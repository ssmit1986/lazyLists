Notebook[{
Cell[BoxData[{
 RowBox[{
  RowBox[{"$HistoryLength", "=", "10"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"PacletDirectoryLoad", "[", 
   RowBox[{"NotebookDirectory", "[", "]"}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"<<", "lazyLists`"}]}], "Input",
 CellLabel->"In[17]:=",ExpressionUUID->"2d6a87cf-3ef1-4832-b8b9-0995d6d1b646"],

Cell[CellGroupData[{

Cell["Usage messages for lazy list constructors and other symbols", \
"Section",ExpressionUUID->"ec4cc4aa-b2ff-4f5e-9ddc-c3f207f96586"],

Cell[CellGroupData[{

Cell["Constructors", \
"Subsection",ExpressionUUID->"270e0702-e686-4de6-bae4-7c5c59474557"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"?", "lazyList"}], "\[IndentingNewLine]", 
 RowBox[{"?", "lazyGenerator"}], "\[IndentingNewLine]", 
 RowBox[{"?", "lazyRange"}], "\[IndentingNewLine]", 
 RowBox[{"?", "lazyPowerRange"}], "\[IndentingNewLine]", 
 RowBox[{"?", "lazyNestList"}], "\[IndentingNewLine]", 
 RowBox[{"?", "lazyFixedPointList"}], "\[IndentingNewLine]", 
 RowBox[{"?", "lazyPeriodicList"}], "\[IndentingNewLine]", 
 RowBox[{"?", "lazyStream"}], "\[IndentingNewLine]", 
 RowBox[{"?", "lazyTuples"}], "\[IndentingNewLine]", 
 RowBox[{"?", "lazyConstantArray"}]}], "Input",
 CellLabel->"In[30]:=",ExpressionUUID->"8f1d3194-9e73-46ae-83d7-5e7cad595285"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"lazyList is a linked-list data structure that \
should contain 2 elements: the first is the first element, the second a held \
expression that will generate the next linked list when evaluated.\\nYou can \
extract these elements explicitely with First and Last/Rest. Part and Take \
have been overloaded with special functionalities when used on lazyList and \
will iteratively evaluate the tail to collect elements from the \
lazyList.\\nlazyList[list] or lazyList[Hold[var]] is a special constructor \
that generates a lazyList from an ordinary list.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    
                    StyleBox["\<\" UpValue Definitions\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                    "\"UpValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "UpValues", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"Rest", "[", 
                    RowBox[{"lazyList", "[", 
                    RowBox[{"_", ",", "lazyLists`Private`tail_"}], "]"}], 
                    "]"}], "^:=", "lazyLists`Private`tail"}]},
                    {
                    RowBox[{
                    RowBox[{"Most", "[", 
                    RowBox[{"lazyList", "[", 
                    RowBox[{"lazyLists`Private`elem_", ",", "_"}], "]"}], 
                    "]"}], "^:=", 
                    RowBox[{"{", "lazyLists`Private`elem", "}"}]}]},
                    {
                    RowBox[{
                    RowBox[{"Prepend", "[", 
                    RowBox[{
                    "lazyLists`Private`lz_lazyList", ",", 
                    "lazyLists`Private`element_"}], "]"}], "^:=", 
                    RowBox[{"lazyList", "[", 
                    RowBox[{
                    "lazyLists`Private`element", ",", 
                    "lazyLists`Private`lz"}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"Append", "[", 
                    RowBox[{
                    RowBox[{"lazyList", "[", 
                    RowBox[{
                    "lazyLists`Private`first_", ",", 
                    "lazyLists`Private`tail_"}], "]"}], ",", 
                    "lazyLists`Private`element_"}], "]"}], "^:=", 
                    RowBox[{"lazyList", "[", 
                    RowBox[{"lazyLists`Private`first", ",", 
                    RowBox[{"Append", "[", 
                    RowBox[{
                    "lazyLists`Private`tail", ",", 
                    "lazyLists`Private`element"}], "]"}]}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"Append", "[", 
                    RowBox[{
                    RowBox[{"lazyList", "[", "]"}], ",", 
                    "lazyLists`Private`element_"}], "]"}], "^:=", 
                    RowBox[{"lazyList", "[", 
                    RowBox[{"lazyLists`Private`element", ",", 
                    RowBox[{"lazyList", "[", "]"}]}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"lazyPrependTo", "[", 
                    RowBox[{
                    RowBox[{"lazyList", "[", 
                    RowBox[{"lazyLists`Private`first_", ",", 
                    RowBox[{"lazyLists`Private`lazyFiniteList", "[", 
                    RowBox[{
                    "lazyLists`Private`list_List", ",", 
                    "lazyLists`Private`i_"}], "]"}]}], "]"}], ",", 
                    "lazyLists`Private`element_"}], "]"}], "^:=", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"lazyLists`Private`newList", "=", 
                    RowBox[{"Prepend", "[", 
                    RowBox[{
                    "lazyLists`Private`list", ",", 
                    "lazyLists`Private`element"}], "]"}]}], "}"}], ",", 
                    RowBox[{"lazyList", "[", 
                    RowBox[{"lazyLists`Private`first", ",", 
                    RowBox[{"lazyLists`Private`lazyFiniteList", "[", 
                    RowBox[{"lazyLists`Private`newList", ",", 
                    RowBox[{"lazyLists`Private`i", "+", "1"}]}], "]"}]}], 
                    "]"}]}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"lazyAppendTo", "[", 
                    RowBox[{
                    RowBox[{"lazyList", "[", 
                    RowBox[{"lazyLists`Private`first_", ",", 
                    RowBox[{"lazyLists`Private`lazyFiniteList", "[", 
                    RowBox[{
                    "lazyLists`Private`list_List", ",", 
                    "lazyLists`Private`i_"}], "]"}]}], "]"}], ",", 
                    "lazyLists`Private`element_"}], "]"}], "^:=", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"lazyLists`Private`newList", "=", 
                    RowBox[{"Append", "[", 
                    RowBox[{
                    "lazyLists`Private`list", ",", 
                    "lazyLists`Private`element"}], "]"}]}], "}"}], ",", 
                    RowBox[{"lazyList", "[", 
                    RowBox[{"lazyLists`Private`first", ",", 
                    RowBox[{"lazyLists`Private`lazyFiniteList", "[", 
                    RowBox[{
                    "lazyLists`Private`newList", ",", "lazyLists`Private`i"}],
                     "]"}]}], "]"}]}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"lazyLists`Private`expr", ":", 
                    RowBox[{"___", "+", "___", "+", 
                    RowBox[{"lazyList", "[", "]"}]}]}], "^:=", 
                    RowBox[{"lazyList", "[", "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"lazyLists`Private`expr", ":", 
                    RowBox[{"_lazyList", "+", "___", "+", "___"}]}], "^:=", 
                    RowBox[{"Thread", "[", 
                    RowBox[{
                    RowBox[{
                    "Unevaluated", "[", "lazyLists`Private`expr", "]"}], ",", 
                    "lazyList"}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"lazyLists`Private`expr", ":", 
                    RowBox[{"___", " ", "___", " ", 
                    RowBox[{"lazyList", "[", "]"}]}]}], "^:=", 
                    RowBox[{"lazyList", "[", "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"lazyLists`Private`expr", ":", 
                    RowBox[{"_lazyList", " ", "___", " ", "___"}]}], "^:=", 
                    RowBox[{"Thread", "[", 
                    RowBox[{
                    RowBox[{
                    "Unevaluated", "[", "lazyLists`Private`expr", "]"}], ",", 
                    "lazyList"}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"lazyLists`Private`expr", ":", 
                    RowBox[{"Power", "[", 
                    RowBox[{"___", ",", 
                    RowBox[{"lazyList", "[", "]"}], ",", "___"}], "]"}]}], "^:=", 
                    RowBox[{"lazyList", "[", "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"lazyLists`Private`expr", ":", 
                    RowBox[{"Power", "[", 
                    RowBox[{"___", ",", "_lazyList", ",", "___"}], "]"}]}], "^:=", 
                    RowBox[{"Thread", "[", 
                    RowBox[{
                    RowBox[{
                    "Unevaluated", "[", "lazyLists`Private`expr", "]"}], ",", 
                    "lazyList"}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"lazyLists`Private`expr", ":", 
                    RowBox[{"Divide", "[", 
                    RowBox[{"___", ",", 
                    RowBox[{"lazyList", "[", "]"}], ",", "___"}], "]"}]}], "^:=", 
                    RowBox[{"lazyList", "[", "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"lazyLists`Private`expr", ":", 
                    RowBox[{"Divide", "[", 
                    RowBox[{"___", ",", "_lazyList", ",", "___"}], "]"}]}], "^:=", 
                    RowBox[{"Thread", "[", 
                    RowBox[{
                    RowBox[{
                    "Unevaluated", "[", "lazyLists`Private`expr", "]"}], ",", 
                    "lazyList"}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"lazyLists`Private`expr", ":", 
                    RowBox[{"Subtract", "[", 
                    RowBox[{"___", ",", 
                    RowBox[{"lazyList", "[", "]"}], ",", "___"}], "]"}]}], "^:=", 
                    RowBox[{"lazyList", "[", "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"lazyLists`Private`expr", ":", 
                    RowBox[{"Subtract", "[", 
                    RowBox[{"___", ",", "_lazyList", ",", "___"}], "]"}]}], "^:=", 
                    RowBox[{"Thread", "[", 
                    RowBox[{
                    RowBox[{
                    "Unevaluated", "[", "lazyLists`Private`expr", "]"}], ",", 
                    "lazyList"}], "]"}]}]},
                    {
                    RowBox[{"lazyList", "/:", 
                    RowBox[{"Take", "[", 
                    RowBox[{
                    RowBox[{"lazyLists`Private`lz", ":", 
                    RowBox[{"lazyList", "[", 
                    RowBox[{"_", ",", "_"}], "]"}]}], ",", 
                    RowBox[{
                    "lazyLists`Private`n_Integer", "?", "Positive"}]}], "]"}],
                     ":=", 
                    RowBox[{"ReleaseHold", "[", 
                    RowBox[{"lazyList", "@@", 
                    RowBox[{"MapAt", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"First", "[", 
                    RowBox[{"#1", ",", 
                    RowBox[{"{", "}"}]}], "]"}], "&"}], ",", 
                    RowBox[{"Reverse", "[", 
                    RowBox[{"Reap", "[", 
                    RowBox[{
                    RowBox[{"Replace", "[", 
                    RowBox[{
                    RowBox[{"Quiet", "[", 
                    RowBox[{
                    RowBox[{"Block", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"$IterationLimit", "=", "$lazyIterationLimit"}], 
                    "}"}], ",", 
                    RowBox[{"ReplaceRepeated", "[", 
                    RowBox[{"lazyLists`Private`lz", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"lazyList", "[", 
                    RowBox[{
                    "lazyLists`Private`first_", ",", 
                    "lazyLists`Private`tail_"}], "]"}], "\[RuleDelayed]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sow", "[", 
                    RowBox[{"lazyLists`Private`first", ",", "\<\"take\"\>"}], 
                    "]"}], ";", "lazyLists`Private`tail"}], ")"}]}], "}"}], 
                    ",", 
                    RowBox[{"MaxIterations", "\[Rule]", 
                    RowBox[{"lazyLists`Private`n", "-", "1"}]}]}], "]"}]}], 
                    "]"}], ",", 
                    RowBox[{"{", 
                    StyleBox[
                    RowBox[{"ReplaceRepeated", "::", "rrlim"}], "MessageName"],
                     "}"}]}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"lazyList", "[", 
                    RowBox[{
                    "lazyLists`Private`first_", ",", 
                    "lazyLists`Private`tail_"}], "]"}], "\[RuleDelayed]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sow", "[", 
                    RowBox[{"lazyLists`Private`first", ",", "\<\"take\"\>"}], 
                    "]"}], ";", 
                    RowBox[{"Hold", "[", "lazyLists`Private`tail", "]"}]}], 
                    ")"}]}]}], "]"}], ",", "\<\"take\"\>"}], "]"}], "]"}], 
                    ",", "1"}], "]"}]}], "]"}]}]},
                    {
                    RowBox[{"lazyList", "/:", 
                    RowBox[{
                    RowBox[{"Take", "[", 
                    RowBox[{
                    RowBox[{"lazyLists`Private`lz", ":", 
                    RowBox[{"lazyList", "[", 
                    RowBox[{"_", ",", "_"}], "]"}]}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"lazyLists`Private`m_Integer", "?", "Positive"}], 
                    ",", 
                    RowBox[{
                    "lazyLists`Private`n_Integer", "?", "Positive"}]}], 
                    "}"}]}], "]"}], "/;", 
                    RowBox[{
                    "lazyLists`Private`n", "<", "lazyLists`Private`m"}]}], ":=", 
                    RowBox[{"Replace", "[", 
                    RowBox[{
                    RowBox[{"Take", "[", 
                    RowBox[{"lazyLists`Private`lz", ",", 
                    RowBox[{"{", 
                    RowBox[{"lazyLists`Private`n", ",", 
                    "lazyLists`Private`m"}], "}"}]}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"lazyList", "[", 
                    RowBox[{
                    "lazyLists`Private`list_List", ",", 
                    "lazyLists`Private`rest_"}], "]"}], "\[RuleDelayed]", 
                    RowBox[{"lazyList", "[", 
                    RowBox[{
                    RowBox[{"Reverse", "[", "lazyLists`Private`list", "]"}], 
                    ",", "lazyLists`Private`rest"}], "]"}]}], "}"}]}], 
                    "]"}]}]},
                    {
                    RowBox[{"lazyList", "/:", 
                    RowBox[{
                    RowBox[{"Take", "[", 
                    RowBox[{
                    RowBox[{"lazyLists`Private`lz", ":", 
                    RowBox[{"lazyList", "[", 
                    RowBox[{"_", ",", "_"}], "]"}]}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"lazyLists`Private`m_Integer", "?", "Positive"}], 
                    ",", 
                    RowBox[{"lazyLists`Private`n", ":", 
                    RowBox[{
                    RowBox[{"_Integer", "?", "Positive"}], "|", "All"}]}]}], 
                    "}"}]}], "]"}], "/;", 
                    RowBox[{
                    RowBox[{"lazyLists`Private`n", "===", "All"}], "||", 
                    RowBox[{
                    "lazyLists`Private`n", ">", "lazyLists`Private`m"}]}]}], ":=", 
                    RowBox[{"Replace", "[", 
                    RowBox[{
                    RowBox[{"Quiet", "[", 
                    RowBox[{
                    RowBox[{"lazyLists`Private`lz", "\[LeftDoubleBracket]", 
                    RowBox[{"{", "lazyLists`Private`m", "}"}], 
                    "\[RightDoubleBracket]"}], ",", 
                    RowBox[{"{", 
                    StyleBox[
                    RowBox[{"Part", "::", "partw"}], "MessageName"], "}"}]}], 
                    "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    "lazyLists`Private`l", ":", 
                    "lazyLists`Private`validLazyListPattern"}], 
                    "\[RuleDelayed]", 
                    RowBox[{"Take", "[", 
                    RowBox[{"lazyLists`Private`l", ",", 
                    RowBox[{"Replace", "[", 
                    RowBox[{"lazyLists`Private`n", ",", 
                    RowBox[{"lazyLists`Private`int_Integer", "\[RuleDelayed]", 
                    RowBox[{
                    "lazyLists`Private`int", "-", "lazyLists`Private`m", "+", 
                    "1"}]}]}], "]"}]}], "]"}]}], ",", 
                    RowBox[{"_", "\[Rule]", 
                    RowBox[{"lazyList", "[", "]"}]}]}], "}"}]}], "]"}]}]},
                    {
                    RowBox[{"lazyList", "/:", 
                    RowBox[{"Take", "[", 
                    RowBox[{
                    RowBox[{"lazyLists`Private`lz", ":", 
                    RowBox[{"lazyList", "[", 
                    RowBox[{"_", ",", "_"}], "]"}]}], ",", "All"}], "]"}], ":=", 
                    RowBox[{"TakeWhile", "[", "lazyLists`Private`lz", "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"TakeWhile", "[", 
                    RowBox[{
                    RowBox[{"lazyLists`Private`lz", ":", 
                    RowBox[{"lazyList", "[", 
                    RowBox[{"_", ",", "_"}], "]"}]}], ",", 
                    RowBox[{"lazyLists`Private`function_", ":", 
                    RowBox[{"(", 
                    RowBox[{"True", "&"}], ")"}]}], ",", 
                    RowBox[{"lazyLists`Private`opts", ":", 
                    RowBox[{"OptionsPattern", "[", 
                    RowBox[{"MaxIterations", "\[Rule]", "\[Infinity]"}], 
                    "]"}]}]}], "]"}], "^:=", 
                    RowBox[{"lazyList", "@@", 
                    RowBox[{"MapAt", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"First", "[", 
                    RowBox[{"#1", ",", 
                    RowBox[{"{", "}"}]}], "]"}], "&"}], ",", 
                    RowBox[{"Reverse", "[", 
                    RowBox[{"Reap", "[", 
                    RowBox[{
                    RowBox[{"Quiet", "[", 
                    RowBox[{
                    RowBox[{"Catch", "[", 
                    RowBox[{
                    RowBox[{"Block", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"$IterationLimit", "=", "$lazyIterationLimit"}], 
                    ",", "lazyLists`Private`first", ",", 
                    "lazyLists`Private`pattern"}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"lazyLists`Private`pattern", "=", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"lazyLists`Private`function", "===", 
                    RowBox[{"(", 
                    RowBox[{"True", "&"}], ")"}]}], ",", 
                    "lazyLists`Private`first_", ",", 
                    RowBox[{
                    "lazyLists`Private`first_", "?", 
                    "lazyLists`Private`function"}]}], "]"}]}], ";", 
                    RowBox[{"ReplaceRepeated", "[", 
                    RowBox[{"lazyLists`Private`lz", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"lazyList", "[", 
                    RowBox[{
                    "lazyLists`Private`pattern", ",", 
                    "lazyLists`Private`tail_"}], "]"}], "\[RuleDelayed]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sow", "[", 
                    RowBox[{"lazyLists`Private`first", ",", "\<\"take\"\>"}], 
                    "]"}], ";", "lazyLists`Private`tail"}], ")"}]}], ",", 
                    RowBox[{"lazyLists`Private`other_", "\[RuleDelayed]", 
                    RowBox[{"Throw", "[", 
                    RowBox[{
                    "lazyLists`Private`other", ",", "\<\"takeWhile\"\>"}], 
                    "]"}]}]}], "}"}], ",", 
                    RowBox[{"MaxIterations", "\[Rule]", 
                    RowBox[{"OptionValue", "[", "MaxIterations", "]"}]}]}], 
                    "]"}]}]}], "]"}], ",", "\<\"takeWhile\"\>"}], "]"}], ",", 
                    RowBox[{"{", 
                    StyleBox[
                    RowBox[{"ReplaceRepeated", "::", "rrlim"}], "MessageName"],
                     "}"}]}], "]"}], ",", "\<\"take\"\>"}], "]"}], "]"}], ",",
                     "1"}], "]"}]}]}]},
                    {
                    RowBox[{
                    RowBox[{"LengthWhile", "[", 
                    RowBox[{
                    RowBox[{"lazyLists`Private`lz", ":", 
                    RowBox[{"lazyList", "[", 
                    RowBox[{"_", ",", "_"}], "]"}]}], ",", 
                    RowBox[{"lazyLists`Private`function_", ":", 
                    RowBox[{"(", 
                    RowBox[{"True", "&"}], ")"}]}], ",", 
                    RowBox[{"lazyLists`Private`opts", ":", 
                    RowBox[{"OptionsPattern", "[", 
                    RowBox[{"MaxIterations", "\[Rule]", "\[Infinity]"}], 
                    "]"}]}]}], "]"}], "^:=", 
                    RowBox[{"Quiet", "[", 
                    RowBox[{
                    RowBox[{"Block", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"$IterationLimit", "=", "$lazyIterationLimit"}], 
                    ",", "lazyLists`Private`first", ",", 
                    "lazyLists`Private`pattern", ",", 
                    RowBox[{"lazyLists`Private`count", "=", "0"}]}], "}"}], 
                    ",", 
                    RowBox[{
                    RowBox[{"lazyLists`Private`pattern", "=", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"lazyLists`Private`function", "===", 
                    RowBox[{"(", 
                    RowBox[{"True", "&"}], ")"}]}], ",", 
                    "lazyLists`Private`first_", ",", 
                    RowBox[{
                    "lazyLists`Private`first_", "?", 
                    "lazyLists`Private`function"}]}], "]"}]}], ";", 
                    RowBox[{"Replace", "[", 
                    RowBox[{
                    RowBox[{"Catch", "[", 
                    RowBox[{
                    RowBox[{"ReplaceRepeated", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"lazyLists`Private`lz", ",", 
                    RowBox[{"First", "[", "lazyLists`Private`lz", "]"}]}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"lazyList", "[", 
                    RowBox[{
                    "lazyLists`Private`pattern", ",", 
                    "lazyLists`Private`tail_"}], "]"}], ",", 
                    "lazyLists`Private`prev_"}], "}"}], "\[RuleDelayed]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"lazyLists`Private`count", "++"}], ";", 
                    RowBox[{"{", 
                    RowBox[{
                    "lazyLists`Private`tail", ",", 
                    "lazyLists`Private`first"}], "}"}]}], ")"}]}], ",", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "lazyLists`Private`other_", ",", 
                    "lazyLists`Private`prev_"}], "}"}], "\[RuleDelayed]", 
                    RowBox[{"Throw", "[", 
                    RowBox[{
                    RowBox[{"lazyList", "[", 
                    RowBox[{
                    "lazyLists`Private`prev", ",", 
                    "lazyLists`Private`other"}], "]"}], 
                    ",", "\<\"lengthWhile\"\>"}], "]"}]}]}], "}"}], ",", 
                    RowBox[{"MaxIterations", "\[Rule]", 
                    RowBox[{"OptionValue", "[", "MaxIterations", "]"}]}]}], 
                    "]"}], ",", "\<\"lengthWhile\"\>"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "lazyLists`Private`l", ":", 
                    "lazyLists`Private`validLazyListPattern"}], ",", 
                    "lazyLists`Private`prev_"}], "}"}], "\[RuleDelayed]", 
                    RowBox[{"Association", "[", 
                    RowBox[{
                    RowBox[{"\<\"Index\"\>", "\[Rule]", "\[Infinity]"}], ",", 
                    
                    RowBox[{"\<\"Element\"\>", "\[Rule]", 
                    "lazyLists`Private`l"}]}], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{
                    "lazyLists`Private`l", ":", 
                    "lazyLists`Private`validLazyListPattern"}], 
                    "\[RuleDelayed]", 
                    RowBox[{"Association", "[", 
                    RowBox[{
                    
                    RowBox[{"\<\"Index\"\>", "\[Rule]", 
                    "lazyLists`Private`count"}], ",", 
                    
                    RowBox[{"\<\"Element\"\>", "\[Rule]", 
                    "lazyLists`Private`l"}]}], "]"}]}]}], "}"}]}], "]"}]}]}], 
                    "]"}], ",", 
                    RowBox[{"{", 
                    StyleBox[
                    RowBox[{"ReplaceRepeated", "::", "rrlim"}], "MessageName"],
                     "}"}]}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"lazyLists`Private`lz", ":", 
                    RowBox[{"lazyList", "[", "]"}]}], ")"}], 
                    "\[LeftDoubleBracket]", "lazyLists`Private`i_", 
                    "\[RightDoubleBracket]"}], "^:=", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"Part", "::", "partw"}], "MessageName"], ",", 
                    RowBox[{"Short", "[", "lazyLists`Private`i", "]"}], ",", 
                    RowBox[{"Short", "[", "lazyLists`Private`lz", "]"}]}], 
                    "]"}], ";", "$Failed"}], ")"}]}]},
                    {
                    RowBox[{"lazyList", "/:", 
                    RowBox[{
                    RowBox[{"lazyList", "[", "___", "]"}], 
                    "\[LeftDoubleBracket]", 
                    RowBox[{"0", "|", 
                    RowBox[{"{", "0", "}"}]}], "\[RightDoubleBracket]"}], ":=",
                     "lazyList"}]},
                    {
                    RowBox[{"lazyList", "/:", 
                    RowBox[{
                    RowBox[{"lazyList", "[", 
                    RowBox[{"lazyLists`Private`first_", ",", "_"}], "]"}], 
                    "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], ":=",
                     "lazyLists`Private`first"}]},
                    {
                    RowBox[{"lazyList", "/:", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"lazyLists`Private`lz", ":", 
                    RowBox[{"lazyList", "[", 
                    RowBox[{"_", ",", "_"}], "]"}]}], ")"}], 
                    "\[LeftDoubleBracket]", 
                    RowBox[{"{", "1", "}"}], "\[RightDoubleBracket]"}], ":=", 
                    "lazyLists`Private`lz"}]},
                    {
                    RowBox[{"lazyList", "/:", 
                    RowBox[{
                    RowBox[{"lazyList", "[", 
                    RowBox[{"_", ",", "lazyLists`Private`tail_"}], "]"}], 
                    "\[LeftDoubleBracket]", 
                    RowBox[{"{", "2", "}"}], "\[RightDoubleBracket]"}], ":=", 
                    "lazyLists`Private`tail"}]},
                    {
                    RowBox[{"lazyList", "/:", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"lazyLists`Private`lz", ":", 
                    RowBox[{"lazyList", "[", 
                    RowBox[{"_", ",", "_"}], "]"}]}], ")"}], 
                    "\[LeftDoubleBracket]", 
                    RowBox[{"{", 
                    RowBox[{"-", "1"}], "}"}], "\[RightDoubleBracket]"}], ":=", 
                    RowBox[{"Replace", "[", 
                    RowBox[{
                    RowBox[{"LengthWhile", "[", 
                    RowBox[{"lazyLists`Private`lz", ",", 
                    RowBox[{"True", "&"}]}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"KeyValuePattern", "[", 
                    
                    RowBox[{"\<\"Element\"\>", "\[Rule]", 
                    "lazyLists`Private`el_"}], "]"}], "\[RuleDelayed]", 
                    "lazyLists`Private`el"}]}], "]"}]}]},
                    {
                    RowBox[{"lazyList", "/:", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"lazyLists`Private`lz", ":", 
                    RowBox[{"lazyList", "[", 
                    RowBox[{"_", ",", "_"}], "]"}]}], ")"}], 
                    "\[LeftDoubleBracket]", 
                    RowBox[{"lazyLists`Private`n", ":", 
                    RowBox[{
                    RowBox[{"_Integer", "?", "Positive"}], "|", 
                    RowBox[{"-", "1"}]}]}], "\[RightDoubleBracket]"}], ":=", 
                    RowBox[{"First", "[", 
                    RowBox[{
                    RowBox[{"lazyLists`Private`lz", "\[LeftDoubleBracket]", 
                    RowBox[{"{", "lazyLists`Private`n", "}"}], 
                    "\[RightDoubleBracket]"}], ",", "$Failed"}], "]"}]}]},
                    {
                    RowBox[{"lazyList", "/:", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"lazyLists`Private`lz", ":", 
                    RowBox[{"lazyList", "[", 
                    RowBox[{"_", ",", "_"}], "]"}]}], ")"}], 
                    "\[LeftDoubleBracket]", 
                    RowBox[{
                    "lazyLists`Private`m_Integer", ";;", 
                    "lazyLists`Private`n_Integer"}], 
                    "\[RightDoubleBracket]"}], ":=", 
                    RowBox[{"Replace", "[", 
                    RowBox[{
                    RowBox[{"Take", "[", 
                    RowBox[{"lazyLists`Private`lz", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "lazyLists`Private`m", ",", "lazyLists`Private`n"}], 
                    "}"}]}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"lazyList", "[", "]"}], "|", 
                    RowBox[{"lazyList", "[", 
                    RowBox[{"_", ",", 
                    RowBox[{"lazyList", "[", "]"}]}], "]"}]}], 
                    "\[RuleDelayed]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"Part", "::", "partw"}], "MessageName"], ",", 
                    RowBox[{"Max", "[", 
                    RowBox[{
                    "lazyLists`Private`m", ",", "lazyLists`Private`n"}], 
                    "]"}], ",", 
                    RowBox[{"Short", "[", "lazyLists`Private`lz", "]"}]}], 
                    "]"}], ";", "$Failed"}], ")"}]}], "}"}]}], "]"}]}]},
                    {
                    RowBox[{"lazyList", "/:", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"lazyLists`Private`lz", ":", 
                    RowBox[{"lazyList", "[", 
                    RowBox[{"_", ",", "_"}], "]"}]}], ")"}], 
                    "\[LeftDoubleBracket]", 
                    RowBox[{
                    "lazyLists`Private`m_Integer", ";;", 
                    "lazyLists`Private`n_Integer", ";;", 
                    "lazyLists`Private`incr_Integer"}], 
                    "\[RightDoubleBracket]"}], ":=", 
                    RowBox[{"lazyLists`Private`lz", "\[LeftDoubleBracket]", 
                    RowBox[{"Range", "[", 
                    RowBox[{
                    "lazyLists`Private`m", ",", "lazyLists`Private`n", ",", 
                    "lazyLists`Private`incr"}], "]"}], 
                    "\[RightDoubleBracket]"}]}]},
                    {
                    RowBox[{"lazyList", "/:", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"lazyLists`Private`lz", ":", 
                    RowBox[{"lazyList", "[", 
                    RowBox[{"_", ",", "_"}], "]"}]}], ")"}], 
                    "\[LeftDoubleBracket]", 
                    RowBox[{"lazyLists`Private`indices", ":", 
                    RowBox[{"{", 
                    RowBox[{"_Integer", ",", "__Integer"}], "}"}]}], 
                    "\[RightDoubleBracket]"}], "/;", 
                    RowBox[{"VectorQ", "[", 
                    RowBox[{"lazyLists`Private`indices", ",", "Positive"}], 
                    "]"}]}], ":=", 
                    RowBox[{"Catch", "[", 
                    RowBox[{
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"lazyLists`Private`sortedIndices", "=", 
                    RowBox[{"Sort", "[", "lazyLists`Private`indices", "]"}]}],
                     ",", "lazyLists`Private`eval"}], "}"}], ",", 
                    RowBox[{"lazyList", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"FoldPairList", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"lazyLists`Private`eval", "=", 
                    RowBox[{"Check", "[", 
                    RowBox[{
                    RowBox[{"#1", "\[LeftDoubleBracket]", 
                    RowBox[{"{", "#2", "}"}], "\[RightDoubleBracket]"}], ",", 
                    RowBox[{"Throw", "[", 
                    RowBox[{"$Failed", ",", "\<\"part\"\>"}], "]"}], ",", 
                    RowBox[{"{", 
                    StyleBox[
                    RowBox[{"Part", "::", "partw"}], "MessageName"], "}"}]}], 
                    "]"}]}], ";", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"First", "[", "lazyLists`Private`eval", "]"}], 
                    ",", "lazyLists`Private`eval"}], "}"}]}], ")"}], "&"}], 
                    ",", "lazyLists`Private`lz", ",", 
                    RowBox[{"Prepend", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    "Differences", "[", "lazyLists`Private`sortedIndices", 
                    "]"}], "+", "1"}], ",", 
                    RowBox[{
                    "First", "[", "lazyLists`Private`sortedIndices", "]"}]}], 
                    "]"}]}], "]"}], "\[LeftDoubleBracket]", 
                    RowBox[{
                    "Ordering", "[", "lazyLists`Private`indices", "]"}], 
                    "\[RightDoubleBracket]"}], ",", 
                    RowBox[{
                    "Evaluate", "[", "lazyLists`Private`eval", "]"}]}], 
                    "]"}]}], "]"}], ",", "\<\"part\"\>"}], "]"}]}]},
                    {
                    RowBox[{"lazyList", "/:", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"lazyLists`Private`lz", ":", 
                    RowBox[{"lazyList", "[", 
                    RowBox[{"_", ",", "_"}], "]"}]}], ")"}], 
                    "\[LeftDoubleBracket]", 
                    RowBox[{"{", 
                    RowBox[{"lazyLists`Private`n_Integer", "?", "Positive"}], 
                    "}"}], "\[RightDoubleBracket]"}], ":=", 
                    RowBox[{"Replace", "[", 
                    RowBox[{
                    RowBox[{"Quiet", "[", 
                    RowBox[{
                    RowBox[{"Block", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"$IterationLimit", "=", "$lazyIterationLimit"}], 
                    "}"}], ",", 
                    RowBox[{"ReplaceRepeated", "[", 
                    RowBox[{"lazyLists`Private`lz", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"lazyList", "[", 
                    RowBox[{
                    "lazyLists`Private`first_", ",", 
                    "lazyLists`Private`tail_"}], "]"}], "\[RuleDelayed]", 
                    "lazyLists`Private`tail"}], "}"}], ",", 
                    RowBox[{"MaxIterations", "\[Rule]", 
                    RowBox[{"lazyLists`Private`n", "-", "1"}]}]}], "]"}]}], 
                    "]"}], ",", 
                    RowBox[{"{", 
                    StyleBox[
                    RowBox[{"ReplaceRepeated", "::", "rrlim"}], "MessageName"],
                     "}"}]}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"lazyList", "[", "]"}], "\[RuleDelayed]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"Part", "::", "partw"}], "MessageName"], ",", 
                    "lazyLists`Private`n", ",", 
                    RowBox[{"Short", "[", "lazyLists`Private`lz", "]"}]}], 
                    "]"}], ";", "$Failed"}], ")"}]}], "}"}]}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"lazyLists`Private`f_", "/@", 
                    RowBox[{"lazyList", "[", 
                    RowBox[{
                    "lazyLists`Private`first_", ",", 
                    "lazyLists`Private`tail_"}], "]"}]}], "^:=", 
                    RowBox[{"lazyList", "[", 
                    RowBox[{
                    RowBox[{
                    "lazyLists`Private`f", "[", "lazyLists`Private`first", 
                    "]"}], ",", 
                    RowBox[{
                    "lazyLists`Private`f", "/@", "lazyLists`Private`tail"}]}],
                     "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"MapIndexed", "[", 
                    RowBox[{"lazyLists`Private`f_", ",", 
                    RowBox[{"lazyList", "[", 
                    RowBox[{
                    "lazyLists`Private`first_", ",", 
                    "lazyLists`Private`tail_"}], "]"}], ",", 
                    RowBox[{"lazyLists`Private`index", ":", 
                    RowBox[{"_Integer", "?", "Positive"}], ":", "1"}]}], 
                    "]"}], "^:=", 
                    RowBox[{"lazyList", "[", 
                    RowBox[{
                    RowBox[{"lazyLists`Private`f", "[", 
                    RowBox[{
                    "lazyLists`Private`first", ",", 
                    "lazyLists`Private`index"}], "]"}], ",", 
                    RowBox[{"MapIndexed", "[", 
                    RowBox[{
                    "lazyLists`Private`f", ",", "lazyLists`Private`tail", ",", 
                    RowBox[{"lazyLists`Private`index", "+", "1"}]}], "]"}]}], 
                    "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"FoldList", "[", 
                    RowBox[{"lazyLists`Private`f_", ",", 
                    RowBox[{"lazyList", "[", 
                    RowBox[{
                    "lazyLists`Private`first_", ",", 
                    "lazyLists`Private`tail_"}], "]"}]}], "]"}], "^:=", 
                    RowBox[{"FoldList", "[", 
                    RowBox[{
                    "lazyLists`Private`f", ",", "lazyLists`Private`first", 
                    ",", "lazyLists`Private`tail"}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"FoldList", "[", 
                    RowBox[{
                    "lazyLists`Private`f_", ",", "lazyLists`Private`current_",
                     ",", 
                    RowBox[{"lazyList", "[", 
                    RowBox[{
                    "lazyLists`Private`first_", ",", 
                    "lazyLists`Private`tail_"}], "]"}]}], "]"}], "^:=", 
                    RowBox[{"lazyList", "[", 
                    RowBox[{"lazyLists`Private`current", ",", 
                    RowBox[{"FoldList", "[", 
                    RowBox[{"lazyLists`Private`f", ",", 
                    RowBox[{"lazyLists`Private`f", "[", 
                    RowBox[{
                    "lazyLists`Private`current", ",", 
                    "lazyLists`Private`first"}], "]"}], ",", 
                    "lazyLists`Private`tail"}], "]"}]}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"FoldList", "[", 
                    RowBox[{
                    "lazyLists`Private`f_", ",", "lazyLists`Private`current_",
                     ",", 
                    RowBox[{"lazyLists`Private`empty", ":", 
                    RowBox[{"lazyList", "[", "]"}]}]}], "]"}], "^:=", 
                    RowBox[{"lazyList", "[", 
                    RowBox[{
                    "lazyLists`Private`current", ",", 
                    "lazyLists`Private`empty"}], "]"}]}]},
                    {
                    RowBox[{"lazyList", "/:", 
                    RowBox[{"FoldPairList", "[", 
                    RowBox[{"lazyLists`Private`fun_", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "lazyLists`Private`emit_", ",", 
                    "lazyLists`Private`feed_"}], "}"}], ",", "True", ",", 
                    RowBox[{"lazyList", "[", 
                    RowBox[{
                    "lazyLists`Private`first_", ",", 
                    "lazyLists`Private`tail_"}], "]"}]}], "]"}], ":=", 
                    RowBox[{"lazyList", "[", 
                    RowBox[{"lazyLists`Private`emit", ",", 
                    RowBox[{"FoldPairList", "[", 
                    RowBox[{"lazyLists`Private`fun", ",", 
                    RowBox[{"lazyLists`Private`fun", "[", 
                    RowBox[{
                    "lazyLists`Private`feed", ",", 
                    "lazyLists`Private`first"}], "]"}], ",", "True", ",", 
                    "lazyLists`Private`tail"}], "]"}]}], "]"}]}]},
                    {
                    RowBox[{"lazyList", "/:", 
                    RowBox[{"FoldPairList", "[", 
                    RowBox[{"lazyLists`Private`fun_", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "lazyLists`Private`emit_", ",", 
                    "lazyLists`Private`feed_"}], "}"}], ",", "True", ",", 
                    RowBox[{"lazyLists`Private`empty", ":", 
                    RowBox[{"lazyList", "[", "]"}]}]}], "]"}], ":=", 
                    RowBox[{"lazyList", "[", 
                    RowBox[{
                    "lazyLists`Private`emit", ",", 
                    "lazyLists`Private`empty"}], "]"}]}]},
                    {
                    RowBox[{"lazyList", "/:", 
                    RowBox[{"FoldPairList", "[", 
                    RowBox[{"lazyLists`Private`fun_", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "lazyLists`Private`emit_", ",", 
                    "lazyLists`Private`feed_"}], "}"}], ",", "True", ",", 
                    RowBox[{"lazyList", "[", 
                    RowBox[{
                    "lazyLists`Private`first_", ",", 
                    "lazyLists`Private`tail_"}], "]"}], ",", 
                    "lazyLists`Private`red_"}], "]"}], ":=", 
                    RowBox[{"lazyList", "[", 
                    RowBox[{
                    RowBox[{"lazyLists`Private`red", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    "lazyLists`Private`emit", ",", "lazyLists`Private`feed"}],
                     "}"}], "]"}], ",", 
                    RowBox[{"FoldPairList", "[", 
                    RowBox[{"lazyLists`Private`fun", ",", 
                    RowBox[{"lazyLists`Private`fun", "[", 
                    RowBox[{
                    "lazyLists`Private`feed", ",", 
                    "lazyLists`Private`first"}], "]"}], ",", "True", ",", 
                    "lazyLists`Private`tail", ",", "lazyLists`Private`red"}], 
                    "]"}]}], "]"}]}]},
                    {
                    RowBox[{"lazyList", "/:", 
                    RowBox[{"FoldPairList", "[", 
                    RowBox[{"lazyLists`Private`fun_", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "lazyLists`Private`emit_", ",", 
                    "lazyLists`Private`feed_"}], "}"}], ",", "True", ",", 
                    RowBox[{"lazyLists`Private`empty", ":", 
                    RowBox[{"lazyList", "[", "]"}]}], ",", 
                    "lazyLists`Private`red_"}], "]"}], ":=", 
                    RowBox[{"lazyList", "[", 
                    RowBox[{
                    RowBox[{"lazyLists`Private`red", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    "lazyLists`Private`emit", ",", "lazyLists`Private`feed"}],
                     "}"}], "]"}], ",", "lazyLists`Private`empty"}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"FoldPairList", "[", 
                    RowBox[{
                    "lazyLists`Private`fun_", ",", "lazyLists`Private`val_", 
                    ",", 
                    RowBox[{"lazyList", "[", 
                    RowBox[{
                    "lazyLists`Private`first_", ",", 
                    "lazyLists`Private`tail_"}], "]"}]}], "]"}], "^:=", 
                    RowBox[{"FoldPairList", "[", 
                    RowBox[{"lazyLists`Private`fun", ",", 
                    RowBox[{"lazyLists`Private`fun", "[", 
                    RowBox[{
                    "lazyLists`Private`val", ",", "lazyLists`Private`first"}],
                     "]"}], ",", "True", ",", "lazyLists`Private`tail"}], 
                    "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"FoldPairList", "[", 
                    RowBox[{
                    "lazyLists`Private`fun_", ",", "lazyLists`Private`val_", 
                    ",", 
                    RowBox[{"lazyList", "[", 
                    RowBox[{
                    "lazyLists`Private`first_", ",", 
                    "lazyLists`Private`tail_"}], "]"}], ",", 
                    "lazyLists`Private`red_"}], "]"}], "^:=", 
                    RowBox[{"FoldPairList", "[", 
                    RowBox[{"lazyLists`Private`fun", ",", 
                    RowBox[{"lazyLists`Private`fun", "[", 
                    RowBox[{
                    "lazyLists`Private`val", ",", "lazyLists`Private`first"}],
                     "]"}], ",", "True", ",", "lazyLists`Private`tail", ",", 
                    "lazyLists`Private`red"}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"FoldPairList", "[", 
                    RowBox[{
                    "lazyLists`Private`fun_", ",", "lazyLists`Private`val_", 
                    ",", 
                    RowBox[{"lazyList", "[", "]"}], ",", "___"}], "]"}], "^:=", 
                    RowBox[{"lazyList", "[", "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"Cases", "[", 
                    RowBox[{
                    RowBox[{"lazyList", "[", "]"}], ",", "_"}], "]"}], "^:=", 
                    RowBox[{"lazyList", "[", "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"Cases", "[", 
                    RowBox[{
                    "lazyLists`Private`lz_lazyList", ",", 
                    "lazyLists`Private`patt_"}], "]"}], "^:=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", "lazyLists`Private`case", "}"}], ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"lazyLists`Private`case", "[", 
                    RowBox[{"lazyList", "[", 
                    RowBox[{
                    RowBox[{
                    "lazyLists`Private`first", ":", 
                    "lazyLists`Private`patt"}], ",", 
                    "lazyLists`Private`tail_"}], "]"}], "]"}], ":=", 
                    RowBox[{"lazyList", "[", 
                    RowBox[{"lazyLists`Private`first", ",", 
                    RowBox[{
                    "lazyLists`Private`case", "[", "lazyLists`Private`tail", 
                    "]"}]}], "]"}]}], ";", 
                    RowBox[{
                    RowBox[{"lazyLists`Private`case", "[", 
                    RowBox[{"lazyList", "[", 
                    RowBox[{
                    "lazyLists`Private`first_", ",", 
                    "lazyLists`Private`tail_"}], "]"}], "]"}], ":=", 
                    RowBox[{
                    "lazyLists`Private`case", "[", "lazyLists`Private`tail", 
                    "]"}]}], ";", 
                    RowBox[{
                    RowBox[{"lazyLists`Private`case", "[", 
                    RowBox[{"lazyList", "[", "]"}], "]"}], ":=", 
                    RowBox[{"lazyList", "[", "]"}]}], ";", 
                    RowBox[{
                    "lazyLists`Private`case", "[", "lazyLists`Private`lz", 
                    "]"}]}]}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"Pick", "[", 
                    RowBox[{
                    RowBox[{"lazyList", "[", "]"}], ",", "_", ",", "_"}], 
                    "]"}], "^:=", 
                    RowBox[{"lazyList", "[", "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"Pick", "[", 
                    RowBox[{"_", ",", 
                    RowBox[{"lazyList", "[", "]"}], ",", "_"}], "]"}], "^:=", 
                    RowBox[{"lazyList", "[", "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"Pick", "[", 
                    RowBox[{
                    "lazyLists`Private`lz_lazyList", ",", 
                    "lazyLists`Private`select_lazyList", ",", 
                    "lazyLists`Private`patt_"}], "]"}], "^:=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", "lazyLists`Private`pick", "}"}], ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"lazyLists`Private`pick", "[", 
                    RowBox[{
                    RowBox[{"lazyList", "[", 
                    RowBox[{
                    "lazyLists`Private`first_", ",", 
                    "lazyLists`Private`tail1_"}], "]"}], ",", 
                    RowBox[{"lazyList", "[", 
                    RowBox[{
                    RowBox[{
                    "lazyLists`Private`match", ":", 
                    "lazyLists`Private`patt"}], ",", 
                    "lazyLists`Private`tail2_"}], "]"}]}], "]"}], ":=", 
                    RowBox[{"lazyList", "[", 
                    RowBox[{"lazyLists`Private`first", ",", 
                    RowBox[{"lazyLists`Private`pick", "[", 
                    RowBox[{
                    "lazyLists`Private`tail1", ",", 
                    "lazyLists`Private`tail2"}], "]"}]}], "]"}]}], ";", 
                    RowBox[{
                    RowBox[{"lazyLists`Private`pick", "[", 
                    RowBox[{
                    RowBox[{"lazyList", "[", 
                    RowBox[{
                    "lazyLists`Private`first_", ",", 
                    "lazyLists`Private`tail1_"}], "]"}], ",", 
                    RowBox[{"lazyList", "[", 
                    RowBox[{
                    "lazyLists`Private`first2_", ",", 
                    "lazyLists`Private`tail2_"}], "]"}]}], "]"}], ":=", 
                    RowBox[{"lazyLists`Private`pick", "[", 
                    RowBox[{
                    "lazyLists`Private`tail1", ",", 
                    "lazyLists`Private`tail2"}], "]"}]}], ";", 
                    RowBox[{
                    RowBox[{"lazyLists`Private`pick", "[", 
                    RowBox[{
                    RowBox[{"lazyList", "[", "]"}], ",", "_"}], "]"}], ":=", 
                    RowBox[{"lazyList", "[", "]"}]}], ";", 
                    RowBox[{
                    RowBox[{"lazyLists`Private`pick", "[", 
                    RowBox[{"_", ",", 
                    RowBox[{"lazyList", "[", "]"}]}], "]"}], ":=", 
                    RowBox[{"lazyList", "[", "]"}]}], ";", 
                    RowBox[{"lazyLists`Private`pick", "[", 
                    RowBox[{
                    "lazyLists`Private`lz", ",", "lazyLists`Private`select"}],
                     "]"}]}]}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{
                    RowBox[{"Select", "[", 
                    RowBox[{
                    RowBox[{"lazyList", "[", 
                    RowBox[{
                    "lazyLists`Private`first_", ",", 
                    "lazyLists`Private`tail_"}], "]"}], ",", 
                    "lazyLists`Private`f_"}], "]"}], "/;", 
                    RowBox[{
                    "lazyLists`Private`f", "[", "lazyLists`Private`first", 
                    "]"}]}], "^:=", 
                    RowBox[{"lazyList", "[", 
                    RowBox[{"lazyLists`Private`first", ",", 
                    RowBox[{"Select", "[", 
                    RowBox[{
                    "lazyLists`Private`tail", ",", "lazyLists`Private`f"}], 
                    "]"}]}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"Select", "[", 
                    RowBox[{
                    RowBox[{"lazyList", "[", 
                    RowBox[{
                    "lazyLists`Private`first_", ",", 
                    "lazyLists`Private`tail_"}], "]"}], ",", 
                    "lazyLists`Private`f_"}], "]"}], "^:=", 
                    RowBox[{"Select", "[", 
                    RowBox[{
                    "lazyLists`Private`tail", ",", "lazyLists`Private`f"}], 
                    "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    "Part", "|", "Take", "|", "TakeWhile", "|", 
                    "LengthWhile"}], ")"}], "[", 
                    RowBox[{
                    RowBox[{"lazyLists`Private`lz$", ":", 
                    RowBox[{"lazyList", "[", "_", "]"}]}], ",", "___"}], 
                    "]"}], "^:=", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"lazyList", "::", "illDefined"}], "MessageName"], 
                    ",", 
                    RowBox[{"Short", "[", "lazyLists`Private`lz$", "]"}]}], 
                    "]"}], ";", "$Failed"}], ")"}]}]},
                    {
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    "Part", "|", "Take", "|", "TakeWhile", "|", 
                    "LengthWhile"}], ")"}], "[", 
                    RowBox[{
                    RowBox[{"lazyLists`Private`lz$", ":", 
                    RowBox[{"lazyList", "[", 
                    RowBox[{"_", ",", "_", ",", "__"}], "]"}]}], ",", "___"}],
                     "]"}], "^:=", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"lazyList", "::", "illDefined"}], "MessageName"], 
                    ",", 
                    RowBox[{"Short", "[", "lazyLists`Private`lz$", "]"}]}], 
                    "]"}], ";", "$Failed"}], ")"}]}]},
                    {
                    RowBox[{
                    RowBox[{"Take", "[", 
                    RowBox[{
                    "lazyLists`Private`lz_lazyList", ",", 
                    "lazyLists`Private`spec_", ",", "___"}], "]"}], "^:=", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"lazyList", "::", "take"}], "MessageName"], ",", 
                    "lazyLists`Private`spec", ",", 
                    RowBox[{"Short", "[", "lazyLists`Private`lz", "]"}]}], 
                    "]"}], ";", 
                    RowBox[{"lazyList", "[", "]"}]}], ")"}]}]},
                    {
                    RowBox[{
                    RowBox[{
                    "lazyLists`Private`lz_lazyList", "\[LeftDoubleBracket]", 
                    RowBox[{"lazyLists`Private`spec_", ",", "___"}], 
                    "\[RightDoubleBracket]"}], "^:=", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"lazyList", "::", "part"}], "MessageName"], ",", 
                    "lazyLists`Private`spec", ",", 
                    RowBox[{"Short", "[", "lazyLists`Private`lz", "]"}]}], 
                    "]"}], ";", "$Failed"}], ")"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    
                    StyleBox["\<\" DownValue Definitions\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                    "\"DownValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "DownValues", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"lazyList", "[", 
                    RowBox[{"{", "}"}], "]"}], ":=", 
                    RowBox[{"lazyList", "[", "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"lazyList", "[", 
                    RowBox[{"Nothing", ",", "lazyLists`Private`tail_"}], 
                    "]"}], ":=", "lazyLists`Private`tail"}]},
                    {
                    RowBox[{
                    RowBox[{"lazyList", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    "lazyLists`Private`fst_", ",", 
                    "lazyLists`Private`rest___"}], "}"}], "]"}], ":=", 
                    RowBox[{"lazyList", "[", 
                    RowBox[{"lazyLists`Private`fst", ",", 
                    RowBox[{"lazyList", "[", 
                    RowBox[{"{", "lazyLists`Private`rest", "}"}], "]"}]}], 
                    "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"lazyList", "[", 
                    RowBox[{"endOfLazyList", ",", "___"}], "]"}], ":=", 
                    RowBox[{"lazyList", "[", "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{
                    RowBox[{"lazyList", "[", 
                    RowBox[{
                    "Hold", "[", "lazyLists`Private`list_Symbol", "]"}], 
                    "]"}], "/;", 
                    RowBox[{"ListQ", "[", "lazyLists`Private`list", "]"}]}], ":=", 
                    RowBox[{"lazyLists`Private`lazyFiniteList", "[", 
                    RowBox[{"lazyLists`Private`list", ",", "1"}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{
                    RowBox[{"lazyList", "[", 
                    RowBox[{
                    "Hold", "[", "lazyLists`Private`list_Symbol", "]"}], 
                    "]"}], "/;", 
                    RowBox[{"!", 
                    RowBox[{"ListQ", "[", "lazyLists`Private`list", "]"}]}]}],
                     ":=", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"lazyList", "::", "noList"}], "MessageName"], ",",
                     "lazyLists`Private`list"}], "]"}], ";", 
                    RowBox[{"lazyList", "[", "]"}]}], ")"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "HoldRest", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"lazyLists`lazyList\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"lazyList is a linked-list data structure that \
should contain 2 elements: the first is the first element, the second a held \
expression that will generate the next linked list when evaluated.\\nYou can \
extract these elements explicitely with First and Last/Rest. Part and Take \
have been overloaded with special functionalities when used on lazyList and \
will iteratively evaluate the tail to collect elements from the \
lazyList.\\nlazyList[list] or lazyList[Hold[var]] is a special constructor \
that generates a lazyList from an ordinary list.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{13., {4., 9.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{13., {4., 9.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "lazyList is a linked-list data structure that should contain 2 elements: \
the first is the first element, the second a held expression that will \
generate the next linked list when evaluated.\nYou can extract these elements \
explicitely with First and Last/Rest. Part and Take have been overloaded with \
special functionalities when used on lazyList and will iteratively evaluate \
the tail to collect elements from the lazyList.\nlazyList[list] or \
lazyList[Hold[var]] is a special constructor that generates a lazyList from \
an ordinary list.", "Documentation" -> None, "OwnValues" -> None, "UpValues" -> 
    Information`InformationValueForm[UpValues, lazyLists`lazyList, {Rest[
         lazyLists`lazyList[
          Blank[], 
          Pattern[lazyLists`Private`tail, 
           Blank[]]]] :> lazyLists`Private`tail, Most[
         lazyLists`lazyList[
          Pattern[lazyLists`Private`elem, 
           Blank[]], 
          Blank[]]] :> {lazyLists`Private`elem}, Prepend[
         Pattern[lazyLists`Private`lz, 
          Blank[lazyLists`lazyList]], 
         Pattern[lazyLists`Private`element, 
          Blank[]]] :> 
       lazyLists`lazyList[lazyLists`Private`element, lazyLists`Private`lz], 
       Append[
         lazyLists`lazyList[
          Pattern[lazyLists`Private`first, 
           Blank[]], 
          Pattern[lazyLists`Private`tail, 
           Blank[]]], 
         Pattern[lazyLists`Private`element, 
          Blank[]]] :> lazyLists`lazyList[lazyLists`Private`first, 
         Append[lazyLists`Private`tail, lazyLists`Private`element]], Append[
         lazyLists`lazyList[], 
         Pattern[lazyLists`Private`element, 
          Blank[]]] :> lazyLists`lazyList[lazyLists`Private`element, 
         lazyLists`lazyList[]], lazyLists`lazyPrependTo[
         lazyLists`lazyList[
          Pattern[lazyLists`Private`first, 
           Blank[]], 
          lazyLists`Private`lazyFiniteList[
           Pattern[lazyLists`Private`list, 
            Blank[List]], 
           Pattern[lazyLists`Private`i, 
            Blank[]]]], 
         Pattern[lazyLists`Private`element, 
          Blank[]]] :> 
       With[{lazyLists`Private`newList = 
          Prepend[lazyLists`Private`list, lazyLists`Private`element]}, 
         lazyLists`lazyList[lazyLists`Private`first, 
          lazyLists`Private`lazyFiniteList[
          lazyLists`Private`newList, lazyLists`Private`i + 1]]], 
       lazyLists`lazyAppendTo[
         lazyLists`lazyList[
          Pattern[lazyLists`Private`first, 
           Blank[]], 
          lazyLists`Private`lazyFiniteList[
           Pattern[lazyLists`Private`list, 
            Blank[List]], 
           Pattern[lazyLists`Private`i, 
            Blank[]]]], 
         Pattern[lazyLists`Private`element, 
          Blank[]]] :> 
       With[{lazyLists`Private`newList = 
          Append[lazyLists`Private`list, lazyLists`Private`element]}, 
         lazyLists`lazyList[lazyLists`Private`first, 
          lazyLists`Private`lazyFiniteList[
          lazyLists`Private`newList, lazyLists`Private`i]]], 
       Pattern[lazyLists`Private`expr, BlankNullSequence[] + 
         BlankNullSequence[] + lazyLists`lazyList[]] :> lazyLists`lazyList[], 
       Pattern[lazyLists`Private`expr, Blank[lazyLists`lazyList] + 
         BlankNullSequence[] + BlankNullSequence[]] :> Thread[
         Unevaluated[lazyLists`Private`expr], lazyLists`lazyList], 
       Pattern[lazyLists`Private`expr, (BlankNullSequence[] 
          BlankNullSequence[]) lazyLists`lazyList[]] :> lazyLists`lazyList[], 
       Pattern[lazyLists`Private`expr, (Blank[lazyLists`lazyList] 
          BlankNullSequence[]) BlankNullSequence[]] :> Thread[
         Unevaluated[lazyLists`Private`expr], lazyLists`lazyList], 
       Pattern[lazyLists`Private`expr, 
         Power[
          BlankNullSequence[], 
          lazyLists`lazyList[], 
          BlankNullSequence[]]] :> lazyLists`lazyList[], 
       Pattern[lazyLists`Private`expr, 
         Power[
          BlankNullSequence[], 
          Blank[lazyLists`lazyList], 
          BlankNullSequence[]]] :> Thread[
         Unevaluated[lazyLists`Private`expr], lazyLists`lazyList], 
       Pattern[lazyLists`Private`expr, 
         Divide[
          BlankNullSequence[], 
          lazyLists`lazyList[], 
          BlankNullSequence[]]] :> lazyLists`lazyList[], 
       Pattern[lazyLists`Private`expr, 
         Divide[
          BlankNullSequence[], 
          Blank[lazyLists`lazyList], 
          BlankNullSequence[]]] :> Thread[
         Unevaluated[lazyLists`Private`expr], lazyLists`lazyList], 
       Pattern[lazyLists`Private`expr, 
         Subtract[
          BlankNullSequence[], 
          lazyLists`lazyList[], 
          BlankNullSequence[]]] :> lazyLists`lazyList[], 
       Pattern[lazyLists`Private`expr, 
         Subtract[
          BlankNullSequence[], 
          Blank[lazyLists`lazyList], 
          BlankNullSequence[]]] :> Thread[
         Unevaluated[lazyLists`Private`expr], lazyLists`lazyList], Take[
         Pattern[lazyLists`Private`lz, 
          lazyLists`lazyList[
           Blank[], 
           Blank[]]], 
         PatternTest[
          Pattern[lazyLists`Private`n, 
           Blank[Integer]], Positive]] :> ReleaseHold[
         Apply[lazyLists`lazyList, 
          MapAt[First[#, {}]& , 
           Reverse[
            Reap[
             Replace[
              Quiet[
               Block[{$IterationLimit = lazyLists`$lazyIterationLimit}, 
                ReplaceRepeated[lazyLists`Private`lz, {lazyLists`lazyList[
                    Pattern[lazyLists`Private`first, 
                    Blank[]], 
                    Pattern[lazyLists`Private`tail, 
                    Blank[]]] :> (Sow[lazyLists`Private`first, "take"]; 
                   lazyLists`Private`tail)}, MaxIterations -> 
                 lazyLists`Private`n - 1]], {
                MessageName[ReplaceRepeated, "rrlim"]}], lazyLists`lazyList[
                Pattern[lazyLists`Private`first, 
                 Blank[]], 
                Pattern[lazyLists`Private`tail, 
                 Blank[]]] :> (Sow[lazyLists`Private`first, "take"]; 
               Hold[lazyLists`Private`tail])], "take"]], 1]]], Condition[
         Take[
          Pattern[lazyLists`Private`lz, 
           lazyLists`lazyList[
            Blank[], 
            Blank[]]], {
           PatternTest[
            Pattern[lazyLists`Private`m, 
             Blank[Integer]], Positive], 
           PatternTest[
            Pattern[lazyLists`Private`n, 
             Blank[Integer]], Positive]}], lazyLists`Private`n < 
         lazyLists`Private`m] :> Replace[
         Take[
         lazyLists`Private`lz, {lazyLists`Private`n, lazyLists`Private`m}], {
         lazyLists`lazyList[
            Pattern[lazyLists`Private`list, 
             Blank[List]], 
            Pattern[lazyLists`Private`rest, 
             Blank[]]] :> lazyLists`lazyList[
            Reverse[lazyLists`Private`list], lazyLists`Private`rest]}], 
       Condition[
         Take[
          Pattern[lazyLists`Private`lz, 
           lazyLists`lazyList[
            Blank[], 
            Blank[]]], {
           PatternTest[
            Pattern[lazyLists`Private`m, 
             Blank[Integer]], Positive], 
           Pattern[lazyLists`Private`n, 
            Alternatives[
             PatternTest[
              Blank[Integer], Positive], All]]}], 
         Or[
         lazyLists`Private`n === All, lazyLists`Private`n > 
          lazyLists`Private`m]] :> Replace[
         Quiet[
          Part[lazyLists`Private`lz, {lazyLists`Private`m}], {
           MessageName[Part, "partw"]}], {
         Pattern[lazyLists`Private`l, lazyLists`Private`validLazyListPattern] :> 
          Take[lazyLists`Private`l, 
            Replace[lazyLists`Private`n, Pattern[lazyLists`Private`int, 
               Blank[Integer]] :> 
             lazyLists`Private`int - lazyLists`Private`m + 1]], Blank[] -> 
          lazyLists`lazyList[]}], Take[
         Pattern[lazyLists`Private`lz, 
          lazyLists`lazyList[
           Blank[], 
           Blank[]]], All] :> TakeWhile[lazyLists`Private`lz], TakeWhile[
         Pattern[lazyLists`Private`lz, 
          lazyLists`lazyList[
           Blank[], 
           Blank[]]], 
         Optional[
          Pattern[lazyLists`Private`function, 
           Blank[]], True& ], 
         Pattern[lazyLists`Private`opts, 
          OptionsPattern[MaxIterations -> DirectedInfinity[1]]]] :> 
       Apply[lazyLists`lazyList, 
         MapAt[First[#, {}]& , 
          Reverse[
           Reap[
            Quiet[
             Catch[
              
              Block[{$IterationLimit = lazyLists`$lazyIterationLimit, 
                lazyLists`Private`first, lazyLists`Private`pattern}, 
               lazyLists`Private`pattern = 
                If[lazyLists`Private`function === (True& ), 
                  Pattern[lazyLists`Private`first, 
                   Blank[]], 
                  PatternTest[
                   Pattern[lazyLists`Private`first, 
                    Blank[]], lazyLists`Private`function]]; 
               ReplaceRepeated[
                lazyLists`Private`lz, {
                 lazyLists`lazyList[lazyLists`Private`pattern, 
                    Pattern[lazyLists`Private`tail, 
                    Blank[]]] :> (Sow[lazyLists`Private`first, "take"]; 
                   lazyLists`Private`tail), Pattern[lazyLists`Private`other, 
                    Blank[]] :> Throw[lazyLists`Private`other, "takeWhile"]}, 
                 MaxIterations -> OptionValue[MaxIterations]]], "takeWhile"], {
              MessageName[ReplaceRepeated, "rrlim"]}], "take"]], 1]], 
       LengthWhile[
         Pattern[lazyLists`Private`lz, 
          lazyLists`lazyList[
           Blank[], 
           Blank[]]], 
         Optional[
          Pattern[lazyLists`Private`function, 
           Blank[]], True& ], 
         Pattern[lazyLists`Private`opts, 
          OptionsPattern[MaxIterations -> DirectedInfinity[1]]]] :> Quiet[
         Block[{$IterationLimit = lazyLists`$lazyIterationLimit, 
           lazyLists`Private`first, lazyLists`Private`pattern, 
           lazyLists`Private`count = 0}, 
          lazyLists`Private`pattern = 
           If[lazyLists`Private`function === (True& ), 
             Pattern[lazyLists`Private`first, 
              Blank[]], 
             PatternTest[
              Pattern[lazyLists`Private`first, 
               Blank[]], lazyLists`Private`function]]; Replace[
            Catch[
             ReplaceRepeated[{lazyLists`Private`lz, 
               First[lazyLists`Private`lz]}, {{
                 lazyLists`lazyList[lazyLists`Private`pattern, 
                  Pattern[lazyLists`Private`tail, 
                   Blank[]]], 
                 Pattern[lazyLists`Private`prev, 
                  Blank[]]} :> (
                Increment[lazyLists`Private`count]; {
                 lazyLists`Private`tail, lazyLists`Private`first}), {
                 Pattern[lazyLists`Private`other, 
                  Blank[]], 
                 Pattern[lazyLists`Private`prev, 
                  Blank[]]} :> Throw[
                 lazyLists`lazyList[
                 lazyLists`Private`prev, lazyLists`Private`other], 
                 "lengthWhile"]}, MaxIterations -> 
              OptionValue[MaxIterations]], "lengthWhile"], {{
               Pattern[
               lazyLists`Private`l, lazyLists`Private`validLazyListPattern], 
               Pattern[lazyLists`Private`prev, 
                Blank[]]} :> 
             Association[
              "Index" -> Infinity, "Element" -> lazyLists`Private`l], 
             Pattern[lazyLists`Private`l, 
               lazyLists`Private`validLazyListPattern] :> 
             Association[
              "Index" -> lazyLists`Private`count, "Element" -> 
               lazyLists`Private`l]}]], {
          MessageName[ReplaceRepeated, "rrlim"]}], Part[
         Pattern[lazyLists`Private`lz, 
          lazyLists`lazyList[]], 
         Pattern[lazyLists`Private`i, 
          Blank[]]] :> (Message[
          MessageName[Part, "partw"], 
          Short[lazyLists`Private`i], 
          Short[lazyLists`Private`lz]]; $Failed), Part[
         lazyLists`lazyList[
          BlankNullSequence[]], 
         Alternatives[0, {0}]] :> lazyLists`lazyList, Part[
         lazyLists`lazyList[
          Pattern[lazyLists`Private`first, 
           Blank[]], 
          Blank[]], 1] :> lazyLists`Private`first, Part[
         Pattern[lazyLists`Private`lz, 
          lazyLists`lazyList[
           Blank[], 
           Blank[]]], {1}] :> lazyLists`Private`lz, Part[
         lazyLists`lazyList[
          Blank[], 
          Pattern[lazyLists`Private`tail, 
           Blank[]]], {2}] :> lazyLists`Private`tail, Part[
         Pattern[lazyLists`Private`lz, 
          lazyLists`lazyList[
           Blank[], 
           Blank[]]], {-1}] :> Replace[
         LengthWhile[lazyLists`Private`lz, True& ], 
         KeyValuePattern["Element" -> Pattern[lazyLists`Private`el, 
             Blank[]]] :> lazyLists`Private`el], Part[
         Pattern[lazyLists`Private`lz, 
          lazyLists`lazyList[
           Blank[], 
           Blank[]]], 
         Pattern[lazyLists`Private`n, 
          Alternatives[
           PatternTest[
            Blank[Integer], Positive], -1]]] :> First[
         Part[lazyLists`Private`lz, {lazyLists`Private`n}], $Failed], Part[
         Pattern[lazyLists`Private`lz, 
          lazyLists`lazyList[
           Blank[], 
           Blank[]]], 
         Span[
          Pattern[lazyLists`Private`m, 
           Blank[Integer]], 
          Pattern[lazyLists`Private`n, 
           Blank[Integer]]]] :> Replace[
         Take[
         lazyLists`Private`lz, {lazyLists`Private`m, lazyLists`Private`n}], {
         Alternatives[
            lazyLists`lazyList[], 
            lazyLists`lazyList[
             Blank[], 
             lazyLists`lazyList[]]] :> (Message[
             MessageName[Part, "partw"], 
             Max[lazyLists`Private`m, lazyLists`Private`n], 
             Short[lazyLists`Private`lz]]; $Failed)}], Part[
         Pattern[lazyLists`Private`lz, 
          lazyLists`lazyList[
           Blank[], 
           Blank[]]], 
         Span[
          Pattern[lazyLists`Private`m, 
           Blank[Integer]], 
          Pattern[lazyLists`Private`n, 
           Blank[Integer]], 
          Pattern[lazyLists`Private`incr, 
           Blank[Integer]]]] :> Part[lazyLists`Private`lz, 
         Range[
         lazyLists`Private`m, lazyLists`Private`n, lazyLists`Private`incr]], 
       Condition[
         Part[
          Pattern[lazyLists`Private`lz, 
           lazyLists`lazyList[
            Blank[], 
            Blank[]]], 
          Pattern[lazyLists`Private`indices, {
            Blank[Integer], 
            BlankSequence[Integer]}]], 
         VectorQ[lazyLists`Private`indices, Positive]] :> Catch[
         Module[{
          lazyLists`Private`sortedIndices = Sort[lazyLists`Private`indices], 
           lazyLists`Private`eval}, 
          lazyLists`lazyList[
           Part[
            FoldPairList[(lazyLists`Private`eval = Check[
                Part[#, {#2}], 
                Throw[$Failed, "part"], {
                 MessageName[Part, "partw"]}]; {
               First[lazyLists`Private`eval], lazyLists`Private`eval})& , 
             lazyLists`Private`lz, 
             Prepend[Differences[lazyLists`Private`sortedIndices] + 1, 
              First[lazyLists`Private`sortedIndices]]], 
            Ordering[lazyLists`Private`indices]], 
           Evaluate[lazyLists`Private`eval]]], "part"], Part[
         Pattern[lazyLists`Private`lz, 
          lazyLists`lazyList[
           Blank[], 
           Blank[]]], {
          PatternTest[
           Pattern[lazyLists`Private`n, 
            Blank[Integer]], Positive]}] :> Replace[
         Quiet[
          Block[{$IterationLimit = lazyLists`$lazyIterationLimit}, 
           ReplaceRepeated[lazyLists`Private`lz, {lazyLists`lazyList[
               Pattern[lazyLists`Private`first, 
                Blank[]], 
               Pattern[lazyLists`Private`tail, 
                Blank[]]] :> lazyLists`Private`tail}, MaxIterations -> 
            lazyLists`Private`n - 1]], {
           MessageName[ReplaceRepeated, "rrlim"]}], {
         lazyLists`lazyList[] :> (Message[
             MessageName[Part, "partw"], lazyLists`Private`n, 
             Short[lazyLists`Private`lz]]; $Failed)}], Map[
         Pattern[lazyLists`Private`f, 
          Blank[]], 
         lazyLists`lazyList[
          Pattern[lazyLists`Private`first, 
           Blank[]], 
          Pattern[lazyLists`Private`tail, 
           Blank[]]]] :> lazyLists`lazyList[
         lazyLists`Private`f[lazyLists`Private`first], 
         Map[lazyLists`Private`f, lazyLists`Private`tail]], MapIndexed[
         Pattern[lazyLists`Private`f, 
          Blank[]], 
         lazyLists`lazyList[
          Pattern[lazyLists`Private`first, 
           Blank[]], 
          Pattern[lazyLists`Private`tail, 
           Blank[]]], 
         Optional[
          Pattern[lazyLists`Private`index, 
           PatternTest[
            Blank[Integer], Positive]], 1]] :> lazyLists`lazyList[
         lazyLists`Private`f[
         lazyLists`Private`first, lazyLists`Private`index], 
         MapIndexed[
         lazyLists`Private`f, lazyLists`Private`tail, lazyLists`Private`index + 
          1]], FoldList[
         Pattern[lazyLists`Private`f, 
          Blank[]], 
         lazyLists`lazyList[
          Pattern[lazyLists`Private`first, 
           Blank[]], 
          Pattern[lazyLists`Private`tail, 
           Blank[]]]] :> 
       FoldList[
        lazyLists`Private`f, lazyLists`Private`first, lazyLists`Private`tail],
        FoldList[
         Pattern[lazyLists`Private`f, 
          Blank[]], 
         Pattern[lazyLists`Private`current, 
          Blank[]], 
         lazyLists`lazyList[
          Pattern[lazyLists`Private`first, 
           Blank[]], 
          Pattern[lazyLists`Private`tail, 
           Blank[]]]] :> lazyLists`lazyList[lazyLists`Private`current, 
         FoldList[lazyLists`Private`f, 
          lazyLists`Private`f[
          lazyLists`Private`current, lazyLists`Private`first], 
          lazyLists`Private`tail]], FoldList[
         Pattern[lazyLists`Private`f, 
          Blank[]], 
         Pattern[lazyLists`Private`current, 
          Blank[]], 
         Pattern[lazyLists`Private`empty, 
          lazyLists`lazyList[]]] :> 
       lazyLists`lazyList[lazyLists`Private`current, lazyLists`Private`empty],
        FoldPairList[
         Pattern[lazyLists`Private`fun, 
          Blank[]], {
          Pattern[lazyLists`Private`emit, 
           Blank[]], 
          Pattern[lazyLists`Private`feed, 
           Blank[]]}, True, 
         lazyLists`lazyList[
          Pattern[lazyLists`Private`first, 
           Blank[]], 
          Pattern[lazyLists`Private`tail, 
           Blank[]]]] :> lazyLists`lazyList[lazyLists`Private`emit, 
         FoldPairList[lazyLists`Private`fun, 
          lazyLists`Private`fun[
          lazyLists`Private`feed, lazyLists`Private`first], True, 
          lazyLists`Private`tail]], FoldPairList[
         Pattern[lazyLists`Private`fun, 
          Blank[]], {
          Pattern[lazyLists`Private`emit, 
           Blank[]], 
          Pattern[lazyLists`Private`feed, 
           Blank[]]}, True, 
         Pattern[lazyLists`Private`empty, 
          lazyLists`lazyList[]]] :> 
       lazyLists`lazyList[lazyLists`Private`emit, lazyLists`Private`empty], 
       FoldPairList[
         Pattern[lazyLists`Private`fun, 
          Blank[]], {
          Pattern[lazyLists`Private`emit, 
           Blank[]], 
          Pattern[lazyLists`Private`feed, 
           Blank[]]}, True, 
         lazyLists`lazyList[
          Pattern[lazyLists`Private`first, 
           Blank[]], 
          Pattern[lazyLists`Private`tail, 
           Blank[]]], 
         Pattern[lazyLists`Private`red, 
          Blank[]]] :> lazyLists`lazyList[
         lazyLists`Private`red[{
          lazyLists`Private`emit, lazyLists`Private`feed}], 
         FoldPairList[lazyLists`Private`fun, 
          lazyLists`Private`fun[
          lazyLists`Private`feed, lazyLists`Private`first], True, 
          lazyLists`Private`tail, lazyLists`Private`red]], FoldPairList[
         Pattern[lazyLists`Private`fun, 
          Blank[]], {
          Pattern[lazyLists`Private`emit, 
           Blank[]], 
          Pattern[lazyLists`Private`feed, 
           Blank[]]}, True, 
         Pattern[lazyLists`Private`empty, 
          lazyLists`lazyList[]], 
         Pattern[lazyLists`Private`red, 
          Blank[]]] :> lazyLists`lazyList[
         lazyLists`Private`red[{
          lazyLists`Private`emit, lazyLists`Private`feed}], 
         lazyLists`Private`empty], FoldPairList[
         Pattern[lazyLists`Private`fun, 
          Blank[]], 
         Pattern[lazyLists`Private`val, 
          Blank[]], 
         lazyLists`lazyList[
          Pattern[lazyLists`Private`first, 
           Blank[]], 
          Pattern[lazyLists`Private`tail, 
           Blank[]]]] :> FoldPairList[lazyLists`Private`fun, 
         lazyLists`Private`fun[
         lazyLists`Private`val, lazyLists`Private`first], True, 
         lazyLists`Private`tail], FoldPairList[
         Pattern[lazyLists`Private`fun, 
          Blank[]], 
         Pattern[lazyLists`Private`val, 
          Blank[]], 
         lazyLists`lazyList[
          Pattern[lazyLists`Private`first, 
           Blank[]], 
          Pattern[lazyLists`Private`tail, 
           Blank[]]], 
         Pattern[lazyLists`Private`red, 
          Blank[]]] :> FoldPairList[lazyLists`Private`fun, 
         lazyLists`Private`fun[
         lazyLists`Private`val, lazyLists`Private`first], True, 
         lazyLists`Private`tail, lazyLists`Private`red], FoldPairList[
         Pattern[lazyLists`Private`fun, 
          Blank[]], 
         Pattern[lazyLists`Private`val, 
          Blank[]], 
         lazyLists`lazyList[], 
         BlankNullSequence[]] :> lazyLists`lazyList[], Cases[
         lazyLists`lazyList[], 
         Blank[]] :> lazyLists`lazyList[], Cases[
         Pattern[lazyLists`Private`lz, 
          Blank[lazyLists`lazyList]], 
         Pattern[lazyLists`Private`patt, 
          Blank[]]] :> Module[{lazyLists`Private`case}, lazyLists`Private`case[
            lazyLists`lazyList[
             Pattern[lazyLists`Private`first, lazyLists`Private`patt], 
             Pattern[lazyLists`Private`tail, 
              Blank[]]]] := lazyLists`lazyList[lazyLists`Private`first, 
            lazyLists`Private`case[lazyLists`Private`tail]]; 
         lazyLists`Private`case[
            lazyLists`lazyList[
             Pattern[lazyLists`Private`first, 
              Blank[]], 
             Pattern[lazyLists`Private`tail, 
              Blank[]]]] := lazyLists`Private`case[lazyLists`Private`tail]; 
         lazyLists`Private`case[
            lazyLists`lazyList[]] := lazyLists`lazyList[]; 
         lazyLists`Private`case[lazyLists`Private`lz]], Pick[
         lazyLists`lazyList[], 
         Blank[], 
         Blank[]] :> lazyLists`lazyList[], Pick[
         Blank[], 
         lazyLists`lazyList[], 
         Blank[]] :> lazyLists`lazyList[], Pick[
         Pattern[lazyLists`Private`lz, 
          Blank[lazyLists`lazyList]], 
         Pattern[lazyLists`Private`select, 
          Blank[lazyLists`lazyList]], 
         Pattern[lazyLists`Private`patt, 
          Blank[]]] :> Module[{lazyLists`Private`pick}, lazyLists`Private`pick[
            lazyLists`lazyList[
             Pattern[lazyLists`Private`first, 
              Blank[]], 
             Pattern[lazyLists`Private`tail1, 
              Blank[]]], 
            lazyLists`lazyList[
             Pattern[lazyLists`Private`match, lazyLists`Private`patt], 
             Pattern[lazyLists`Private`tail2, 
              Blank[]]]] := lazyLists`lazyList[lazyLists`Private`first, 
            lazyLists`Private`pick[
            lazyLists`Private`tail1, lazyLists`Private`tail2]]; 
         lazyLists`Private`pick[
            lazyLists`lazyList[
             Pattern[lazyLists`Private`first, 
              Blank[]], 
             Pattern[lazyLists`Private`tail1, 
              Blank[]]], 
            lazyLists`lazyList[
             Pattern[lazyLists`Private`first2, 
              Blank[]], 
             Pattern[lazyLists`Private`tail2, 
              Blank[]]]] := 
          lazyLists`Private`pick[
           lazyLists`Private`tail1, lazyLists`Private`tail2]; 
         lazyLists`Private`pick[
            lazyLists`lazyList[], 
            Blank[]] := lazyLists`lazyList[]; lazyLists`Private`pick[
            Blank[], 
            lazyLists`lazyList[]] := lazyLists`lazyList[]; 
         lazyLists`Private`pick[
          lazyLists`Private`lz, lazyLists`Private`select]], Condition[
         Select[
          lazyLists`lazyList[
           Pattern[lazyLists`Private`first, 
            Blank[]], 
           Pattern[lazyLists`Private`tail, 
            Blank[]]], 
          Pattern[lazyLists`Private`f, 
           Blank[]]], 
         lazyLists`Private`f[lazyLists`Private`first]] :> 
       lazyLists`lazyList[lazyLists`Private`first, 
         Select[lazyLists`Private`tail, lazyLists`Private`f]], Select[
         lazyLists`lazyList[
          Pattern[lazyLists`Private`first, 
           Blank[]], 
          Pattern[lazyLists`Private`tail, 
           Blank[]]], 
         Pattern[lazyLists`Private`f, 
          Blank[]]] :> Select[lazyLists`Private`tail, lazyLists`Private`f], 
       Alternatives[Part, Take, TakeWhile, LengthWhile][
         Pattern[lazyLists`Private`lz$, 
          lazyLists`lazyList[
           Blank[]]], 
         BlankNullSequence[]] :> (Message[
          MessageName[lazyLists`lazyList, "illDefined"], 
          Short[lazyLists`Private`lz$]]; $Failed), 
       Alternatives[Part, Take, TakeWhile, LengthWhile][
         Pattern[lazyLists`Private`lz$, 
          lazyLists`lazyList[
           Blank[], 
           Blank[], 
           BlankSequence[]]], 
         BlankNullSequence[]] :> (Message[
          MessageName[lazyLists`lazyList, "illDefined"], 
          Short[lazyLists`Private`lz$]]; $Failed), Take[
         Pattern[lazyLists`Private`lz, 
          Blank[lazyLists`lazyList]], 
         Pattern[lazyLists`Private`spec, 
          Blank[]], 
         BlankNullSequence[]] :> (Message[
          MessageName[lazyLists`lazyList, "take"], lazyLists`Private`spec, 
          Short[lazyLists`Private`lz]]; lazyLists`lazyList[]), Part[
         Pattern[lazyLists`Private`lz, 
          Blank[lazyLists`lazyList]], 
         Pattern[lazyLists`Private`spec, 
          Blank[]], 
         BlankNullSequence[]] :> (Message[
          MessageName[lazyLists`lazyList, "part"], lazyLists`Private`spec, 
          Short[lazyLists`Private`lz]]; $Failed)}], "DownValues" -> 
    Information`InformationValueForm[
     DownValues, lazyLists`lazyList, {
      lazyLists`lazyList[{}] :> lazyLists`lazyList[], 
       lazyLists`lazyList[Nothing, 
         Pattern[lazyLists`Private`tail, 
          Blank[]]] :> lazyLists`Private`tail, lazyLists`lazyList[{
          Pattern[lazyLists`Private`fst, 
           Blank[]], 
          Pattern[lazyLists`Private`rest, 
           BlankNullSequence[]]}] :> lazyLists`lazyList[lazyLists`Private`fst, 
         lazyLists`lazyList[{lazyLists`Private`rest}]], 
       lazyLists`lazyList[lazyLists`endOfLazyList, 
         BlankNullSequence[]] :> lazyLists`lazyList[], Condition[
         lazyLists`lazyList[
          Hold[
           Pattern[lazyLists`Private`list, 
            Blank[Symbol]]]], 
         ListQ[lazyLists`Private`list]] :> 
       lazyLists`Private`lazyFiniteList[lazyLists`Private`list, 1], Condition[
         lazyLists`lazyList[
          Hold[
           Pattern[lazyLists`Private`list, 
            Blank[Symbol]]]], 
         Not[
          ListQ[lazyLists`Private`list]]] :> (Message[
          MessageName[lazyLists`lazyList, "noList"], 
          HoldForm[lazyLists`Private`list]]; lazyLists`lazyList[])}], 
    "SubValues" -> None, "DefaultValues" -> None, "NValues" -> None, 
    "FormatValues" -> None, "Options" -> None, "Attributes" -> {HoldRest}, 
    "FullName" -> "lazyLists`lazyList"], False]]], "Output",
 CellLabel->"Out[30]=",ExpressionUUID->"b6dd9b76-c8b0-4a2a-8e6b-d69ee43114af"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"lazyGenerator[f, start, min, max, step] generates a \
lazyList that applies f to values {start, start + step, start + 2 step, ...} \
for values between min and max (which are allowed to be infinite).\\nWhen min \
and max are both infinite, symbolic values for start and step are \
allowed.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"lazyGenerator", "[", 
                    RowBox[{"lazyLists`Private`f_", ",", 
                    RowBox[{"lazyLists`Private`start_", ":", "1"}], ",", 
                    RowBox[{"lazyLists`Private`min_", ":", 
                    RowBox[{"-", "\[Infinity]"}]}], ",", 
                    RowBox[{"lazyLists`Private`max_", ":", "\[Infinity]"}], 
                    ",", 
                    RowBox[{"lazyLists`Private`step_", ":", "1"}]}], "]"}], ":=", 
                    RowBox[{"Replace", "[", 
                    RowBox[{
                    RowBox[{"Switch", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "lazyLists`Private`min", ",", "lazyLists`Private`max", 
                    ",", "lazyLists`Private`start", ",", 
                    "lazyLists`Private`step"}], "}"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "\[Infinity]"}], ",", "\[Infinity]", ",", 
                    "__"}], "}"}], ",", 
                    RowBox[{"lazyLists`Private`twoSidedGenerator", "[", 
                    RowBox[{
                    "lazyLists`Private`f", ",", "lazyLists`Private`start", 
                    ",", "lazyLists`Private`step"}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"-", "\[Infinity]"}], ",", 
                    RowBox[{"_", "?", "NumericQ"}], ",", 
                    RowBox[{"_", "?", "NumericQ"}], ",", 
                    RowBox[{"_", "?", "NumericQ"}]}], "}"}], ",", 
                    RowBox[{"lazyLists`Private`leftSidedGenerator", "[", 
                    RowBox[{
                    "lazyLists`Private`f", ",", "lazyLists`Private`start", 
                    ",", "lazyLists`Private`max", ",", 
                    "lazyLists`Private`step"}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"_", "?", "NumericQ"}], ",", "\[Infinity]", ",", 
                    RowBox[{"_", "?", "NumericQ"}], ",", 
                    RowBox[{"_", "?", "NumericQ"}]}], "}"}], ",", 
                    RowBox[{"lazyLists`Private`rightSidedGenerator", "[", 
                    RowBox[{
                    "lazyLists`Private`f", ",", "lazyLists`Private`start", 
                    ",", "lazyLists`Private`min", ",", 
                    "lazyLists`Private`step"}], "]"}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"_", "?", "NumericQ"}], ",", 
                    RowBox[{"_", "?", "NumericQ"}], ",", 
                    RowBox[{"_", "?", "NumericQ"}], ",", 
                    RowBox[{"_", "?", "NumericQ"}]}], "}"}], ",", 
                    RowBox[{"lazyLists`Private`finiteGenerator", "[", 
                    RowBox[{
                    "lazyLists`Private`f", ",", "lazyLists`Private`start", 
                    ",", "lazyLists`Private`min", ",", 
                    "lazyLists`Private`max", ",", "lazyLists`Private`step"}], 
                    "]"}], ",", "\[IndentingNewLine]", "_", ",", 
                    RowBox[{"lazyList", "[", "]"}]}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"lazyList", "[", "]"}], "\[RuleDelayed]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"lazyGenerator", "::", "badSpec"}], "MessageName"],
                     ",", 
                    RowBox[{"AssociationThread", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    
                    RowBox[{"\<\"min\"\>", ",", "\<\"max\"\>", 
                    ",", "\<\"start\"\>", ",", "\<\"step\"\>"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "lazyLists`Private`min", ",", "lazyLists`Private`max", 
                    ",", "lazyLists`Private`start", ",", 
                    "lazyLists`Private`step"}], "}"}]}], "]"}]}], "]"}], ";", 
                    RowBox[{"lazyList", "[", "]"}]}], ")"}]}], "}"}]}], 
                    "]"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"lazyLists`lazyGenerator\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"lazyGenerator[f, start, min, max, step] generates a \
lazyList that applies f to values {start, start + step, start + 2 step, ...} \
for values between min and max (which are allowed to be infinite).\\nWhen min \
and max are both infinite, symbolic values for start and step are \
allowed.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{13., {4., 9.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{13., {4., 9.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "lazyGenerator[f, start, min, max, step] generates a lazyList that \
applies f to values {start, start + step, start + 2 step, ...} for values \
between min and max (which are allowed to be infinite).\nWhen min and max are \
both infinite, symbolic values for start and step are allowed.", 
    "Documentation" -> None, "OwnValues" -> None, "UpValues" -> None, 
    "DownValues" -> 
    Information`InformationValueForm[
     DownValues, lazyLists`lazyGenerator, {lazyLists`lazyGenerator[
         Pattern[lazyLists`Private`f, 
          Blank[]], 
         Optional[
          Pattern[lazyLists`Private`start, 
           Blank[]], 1], 
         Optional[
          Pattern[lazyLists`Private`min, 
           Blank[]], 
          DirectedInfinity[-1]], 
         Optional[
          Pattern[lazyLists`Private`max, 
           Blank[]], 
          DirectedInfinity[1]], 
         Optional[
          Pattern[lazyLists`Private`step, 
           Blank[]], 1]] :> Replace[
         Switch[{
          lazyLists`Private`min, lazyLists`Private`max, 
           lazyLists`Private`start, lazyLists`Private`step}, {
           DirectedInfinity[-1], 
           DirectedInfinity[1], 
           BlankSequence[]}, 
          lazyLists`Private`twoSidedGenerator[
          lazyLists`Private`f, lazyLists`Private`start, 
           lazyLists`Private`step], {
           DirectedInfinity[-1], 
           PatternTest[
            Blank[], NumericQ], 
           PatternTest[
            Blank[], NumericQ], 
           PatternTest[
            Blank[], NumericQ]}, 
          lazyLists`Private`leftSidedGenerator[
          lazyLists`Private`f, lazyLists`Private`start, lazyLists`Private`max,
            lazyLists`Private`step], {
           PatternTest[
            Blank[], NumericQ], 
           DirectedInfinity[1], 
           PatternTest[
            Blank[], NumericQ], 
           PatternTest[
            Blank[], NumericQ]}, 
          lazyLists`Private`rightSidedGenerator[
          lazyLists`Private`f, lazyLists`Private`start, lazyLists`Private`min,
            lazyLists`Private`step], {
           PatternTest[
            Blank[], NumericQ], 
           PatternTest[
            Blank[], NumericQ], 
           PatternTest[
            Blank[], NumericQ], 
           PatternTest[
            Blank[], NumericQ]}, 
          lazyLists`Private`finiteGenerator[
          lazyLists`Private`f, lazyLists`Private`start, lazyLists`Private`min,
            lazyLists`Private`max, lazyLists`Private`step], 
          Blank[], 
          lazyLists`lazyList[]], {lazyLists`lazyList[] :> (Message[
             MessageName[lazyLists`lazyGenerator, "badSpec"], 
             
             AssociationThread[{"min", "max", "start", "step"}, {
              lazyLists`Private`min, lazyLists`Private`max, 
               lazyLists`Private`start, lazyLists`Private`step}]]; 
           lazyLists`lazyList[])}]}], "SubValues" -> None, "DefaultValues" -> 
    None, "NValues" -> None, "FormatValues" -> None, "Options" -> None, 
    "Attributes" -> {}, "FullName" -> "lazyLists`lazyGenerator"], 
   False]]], "Output",
 CellLabel->"Out[31]=",ExpressionUUID->"5ab30b71-e263-4cd3-88c3-a95e991acb28"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"lazyRange[] is a lazy representation of the \
Integers from 1 to \[Infinity]. lazyRange[min, delta] represents values \
values from min onwards in steps of delta.\\nlazyRange has no upper limit and \
is generally slightly faster than lazyGenerator.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{
                    RowBox[{"lazyRange", "[", 
                    RowBox[{
                    RowBox[{"lazyLists`Private`start_", ":", "1"}], ",", 
                    RowBox[{"lazyLists`Private`step_", ":", "1"}]}], "]"}], "/;", 
                    RowBox[{"!", 
                    RowBox[{"TrueQ", "[", 
                    RowBox[{"lazyLists`Private`step", "\[Equal]", "0"}], 
                    "]"}]}]}], ":=", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"lazyList", "[", 
                    RowBox[{"#1", ",", 
                    RowBox[{"#0", "[", 
                    RowBox[{
                    RowBox[{"#2", "+", "#1"}], ",", "#2"}], "]"}]}], "]"}], 
                    "&"}], ")"}], "[", 
                    RowBox[{
                    "lazyLists`Private`start", ",", 
                    "lazyLists`Private`step"}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"lazyRange", "[", 
                    RowBox[{"lazyLists`Private`start_", ",", 
                    RowBox[{"lazyLists`Private`step_", "/;", 
                    RowBox[{"TrueQ", "[", 
                    RowBox[{"lazyLists`Private`step", "\[Equal]", "0"}], 
                    "]"}]}]}], "]"}], ":=", 
                    RowBox[{
                    "lazyConstantArray", "[", "lazyLists`Private`start", 
                    "]"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"lazyLists`lazyRange\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"lazyRange[] is a lazy representation of the \
Integers from 1 to \[Infinity]. lazyRange[min, delta] represents values \
values from min onwards in steps of delta.\\nlazyRange has no upper limit and \
is generally slightly faster than lazyGenerator.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{13., {4., 9.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{13., {4., 9.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "lazyRange[] is a lazy representation of the Integers from 1 to \
\[Infinity]. lazyRange[min, delta] represents values values from min onwards \
in steps of delta.\nlazyRange has no upper limit and is generally slightly \
faster than lazyGenerator.", "Documentation" -> None, "OwnValues" -> None, 
    "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, lazyLists`lazyRange, {Condition[
         lazyLists`lazyRange[
          Optional[
           Pattern[lazyLists`Private`start, 
            Blank[]], 1], 
          Optional[
           Pattern[lazyLists`Private`step, 
            Blank[]], 1]], 
         Not[
          TrueQ[lazyLists`Private`step == 0]]] :> (lazyLists`lazyList[#, 
         #0[#2 + #, #2]]& )[lazyLists`Private`start, lazyLists`Private`step], 
       lazyLists`lazyRange[
         Pattern[lazyLists`Private`start, 
          Blank[]], 
         Condition[
          Pattern[lazyLists`Private`step, 
           Blank[]], 
          TrueQ[lazyLists`Private`step == 0]]] :> 
       lazyLists`lazyConstantArray[lazyLists`Private`start]}], "SubValues" -> 
    None, "DefaultValues" -> None, "NValues" -> None, "FormatValues" -> None, 
    "Options" -> None, "Attributes" -> {}, "FullName" -> 
    "lazyLists`lazyRange"], False]]], "Output",
 CellLabel->"Out[32]=",ExpressionUUID->"ef3ae2e4-8217-4521-a0ce-a91904bca9eb"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"lazyPowerRange[min, r] is the infinite list {min, r \
\[Times] min, r^2 \[Times] min, ...}\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"lazyPowerRange", "[", 
                    RowBox[{"lazyLists`Private`start_", ",", 
                    RowBox[{"lazyLists`Private`r_", "/;", 
                    RowBox[{"!", 
                    RowBox[{"TrueQ", "[", 
                    RowBox[{"lazyLists`Private`r", "\[Equal]", "1"}], 
                    "]"}]}]}]}], "]"}], ":=", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"lazyList", "[", 
                    RowBox[{"#1", ",", 
                    RowBox[{"#0", "[", 
                    RowBox[{
                    RowBox[{"#2", " ", "#1"}], ",", "#2"}], "]"}]}], "]"}], 
                    "&"}], ")"}], "[", 
                    RowBox[{
                    "lazyLists`Private`start", ",", "lazyLists`Private`r"}], 
                    "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"lazyPowerRange", "[", 
                    RowBox[{"lazyLists`Private`min_", ",", 
                    RowBox[{"lazyLists`Private`r_", "/;", 
                    RowBox[{"TrueQ", "[", 
                    RowBox[{"lazyLists`Private`r", "\[Equal]", "1"}], 
                    "]"}]}]}], "]"}], ":=", 
                    RowBox[{
                    "lazyConstantArray", "[", "lazyLists`Private`min", "]"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"lazyLists`lazyPowerRange\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"lazyPowerRange[min, r] is the infinite list {min, r \
\[Times] min, r^2 \[Times] min, ...}\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{13., {4., 9.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{13., {4., 9.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "lazyPowerRange[min, r] is the infinite list {min, r \[Times] min, r^2 \
\[Times] min, ...}", "Documentation" -> None, "OwnValues" -> None, "UpValues" -> 
    None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, lazyLists`lazyPowerRange, {lazyLists`lazyPowerRange[
         Pattern[lazyLists`Private`start, 
          Blank[]], 
         Condition[
          Pattern[lazyLists`Private`r, 
           Blank[]], 
          Not[
           TrueQ[lazyLists`Private`r == 1]]]] :> (lazyLists`lazyList[#, 
         #0[#2 #, #2]]& )[lazyLists`Private`start, lazyLists`Private`r], 
       lazyLists`lazyPowerRange[
         Pattern[lazyLists`Private`min, 
          Blank[]], 
         Condition[
          Pattern[lazyLists`Private`r, 
           Blank[]], 
          TrueQ[lazyLists`Private`r == 1]]] :> 
       lazyLists`lazyConstantArray[lazyLists`Private`min]}], "SubValues" -> 
    None, "DefaultValues" -> None, "NValues" -> None, "FormatValues" -> None, 
    "Options" -> None, "Attributes" -> {}, "FullName" -> 
    "lazyLists`lazyPowerRange"], False]]], "Output",
 CellLabel->"Out[33]=",ExpressionUUID->"ab4ebcc9-985e-4a6f-baa2-83f132b0f794"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"lazyNestList[f, elem] is the infinite list {elem, \
f[elem], f[f[elem]], ...} starting with elem and generated by iterating f \
repeatedly.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"lazyNestList", "[", 
                    RowBox[{
                    "lazyLists`Private`f_", ",", "lazyLists`Private`elem_"}], 
                    "]"}], ":=", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"lazyList", "[", 
                    RowBox[{"#1", ",", 
                    RowBox[{"#0", "[", 
                    RowBox[{
                    RowBox[{"lazyLists`Private`f", "[", "#1", "]"}], ",", 
                    RowBox[{"#2", "+", "1"}]}], "]"}]}], "]"}], "&"}], ")"}], 
                    "[", 
                    RowBox[{"lazyLists`Private`elem", ",", "1"}], "]"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"lazyLists`lazyNestList\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"lazyNestList[f, elem] is the infinite list {elem, \
f[elem], f[f[elem]], ...} starting with elem and generated by iterating f \
repeatedly.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{13., {4., 9.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{13., {4., 9.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "lazyNestList[f, elem] is the infinite list {elem, f[elem], f[f[elem]], \
...} starting with elem and generated by iterating f repeatedly.", 
    "Documentation" -> None, "OwnValues" -> None, "UpValues" -> None, 
    "DownValues" -> 
    Information`InformationValueForm[
     DownValues, lazyLists`lazyNestList, {lazyLists`lazyNestList[
         Pattern[lazyLists`Private`f, 
          Blank[]], 
         Pattern[lazyLists`Private`elem, 
          Blank[]]] :> (lazyLists`lazyList[#, 
         #0[
          lazyLists`Private`f[#], #2 + 1]]& )[lazyLists`Private`elem, 1]}], 
    "SubValues" -> None, "DefaultValues" -> None, "NValues" -> None, 
    "FormatValues" -> None, "Options" -> None, "Attributes" -> {}, "FullName" -> 
    "lazyLists`lazyNestList"], False]]], "Output",
 CellLabel->"Out[34]=",ExpressionUUID->"cc28482e-841e-435c-a122-67ba3f5940cd"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"lazyFixedPointList[f, elem, sameTest] nests f to \
elem until the result not longer changes according to sameTest.\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"lazyFixedPointList", "[", 
                    RowBox[{
                    "lazyLists`Private`f_", ",", "lazyLists`Private`elem_", 
                    ",", 
                    RowBox[{"lazyLists`Private`sameTest_", ":", "SameQ"}]}], 
                    "]"}], ":=", 
                    RowBox[{"lazyFixedPointList", "[", 
                    RowBox[{"lazyLists`Private`f", ",", 
                    RowBox[{
                    "lazyLists`Private`f", "[", "lazyLists`Private`elem", 
                    "]"}], ",", "lazyLists`Private`elem", ",", 
                    "lazyLists`Private`sameTest"}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{
                    RowBox[{"lazyFixedPointList", "[", 
                    RowBox[{
                    "lazyLists`Private`f_", ",", "lazyLists`Private`elem_", 
                    ",", "lazyLists`Private`prev_", ",", 
                    "lazyLists`Private`sameTest_"}], "]"}], "/;", 
                    RowBox[{"lazyLists`Private`sameTest", "[", 
                    RowBox[{
                    "lazyLists`Private`elem", ",", "lazyLists`Private`prev"}],
                     "]"}]}], ":=", 
                    RowBox[{"lazyList", "[", 
                    RowBox[{"lazyLists`Private`elem", ",", 
                    RowBox[{"lazyList", "[", "]"}]}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"lazyFixedPointList", "[", 
                    RowBox[{
                    "lazyLists`Private`f_", ",", "lazyLists`Private`elem_", 
                    ",", "lazyLists`Private`prev_", ",", 
                    "lazyLists`Private`sameTest_"}], "]"}], ":=", 
                    RowBox[{"lazyList", "[", 
                    RowBox[{"lazyLists`Private`elem", ",", 
                    RowBox[{"lazyFixedPointList", "[", 
                    RowBox[{"lazyLists`Private`f", ",", 
                    RowBox[{
                    "lazyLists`Private`f", "[", "lazyLists`Private`elem", 
                    "]"}], ",", "lazyLists`Private`elem", ",", 
                    "lazyLists`Private`sameTest"}], "]"}]}], "]"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"lazyLists`lazyFixedPointList\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"lazyFixedPointList[f, elem, sameTest] nests f to \
elem until the result not longer changes according to sameTest.\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{13., {4., 9.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{13., {4., 9.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "lazyFixedPointList[f, elem, sameTest] nests f to elem until the result \
not longer changes according to sameTest.", "Documentation" -> None, 
    "OwnValues" -> None, "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, lazyLists`lazyFixedPointList, {lazyLists`lazyFixedPointList[
         Pattern[lazyLists`Private`f, 
          Blank[]], 
         Pattern[lazyLists`Private`elem, 
          Blank[]], 
         Optional[
          Pattern[lazyLists`Private`sameTest, 
           Blank[]], SameQ]] :> 
       lazyLists`lazyFixedPointList[lazyLists`Private`f, 
         lazyLists`Private`f[lazyLists`Private`elem], lazyLists`Private`elem, 
         lazyLists`Private`sameTest], Condition[
         lazyLists`lazyFixedPointList[
          Pattern[lazyLists`Private`f, 
           Blank[]], 
          Pattern[lazyLists`Private`elem, 
           Blank[]], 
          Pattern[lazyLists`Private`prev, 
           Blank[]], 
          Pattern[lazyLists`Private`sameTest, 
           Blank[]]], 
         lazyLists`Private`sameTest[
         lazyLists`Private`elem, lazyLists`Private`prev]] :> 
       lazyLists`lazyList[lazyLists`Private`elem, 
         lazyLists`lazyList[]], lazyLists`lazyFixedPointList[
         Pattern[lazyLists`Private`f, 
          Blank[]], 
         Pattern[lazyLists`Private`elem, 
          Blank[]], 
         Pattern[lazyLists`Private`prev, 
          Blank[]], 
         Pattern[lazyLists`Private`sameTest, 
          Blank[]]] :> lazyLists`lazyList[lazyLists`Private`elem, 
         lazyLists`lazyFixedPointList[lazyLists`Private`f, 
          lazyLists`Private`f[lazyLists`Private`elem], lazyLists`Private`elem,
           lazyLists`Private`sameTest]]}], "SubValues" -> None, 
    "DefaultValues" -> None, "NValues" -> None, "FormatValues" -> None, 
    "Options" -> None, "Attributes" -> {}, "FullName" -> 
    "lazyLists`lazyFixedPointList"], False]]], "Output",
 CellLabel->"Out[35]=",ExpressionUUID->"7b5508ed-21dd-40eb-88c5-5213191ee47a"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"lazyPeriodicList[list] is an infinite lazyList that \
cycles through the values in list periodically.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"lazyPeriodicList", "[", 
                    RowBox[{
                    RowBox[{
                    "Hold", "[", "lazyLists`Private`list_Symbol", "]"}], "|", 
                    "lazyLists`Private`list_List"}], "]"}], ":=", 
                    RowBox[{"lazyLists`Private`lazyPeriodicListInternal", "[", 
                    RowBox[{"lazyLists`Private`list", ",", "1", ",", 
                    RowBox[{"Length", "[", "lazyLists`Private`list", "]"}]}], 
                    "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"lazyPeriodicList", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    "Hold", "[", "lazyLists`Private`list_Symbol", "]"}], "|", 
                    "lazyLists`Private`list_List"}], ",", 
                    RowBox[{
                    "lazyLists`Private`part_Integer", "?", "Positive"}]}], 
                    "]"}], ":=", 
                    RowBox[{"lazyLists`Private`lazyPeriodicListInternal", "[", 
                    RowBox[{"lazyLists`Private`list", ",", "1", ",", 
                    RowBox[{"Length", "[", "lazyLists`Private`list", "]"}], 
                    ",", "lazyLists`Private`part"}], "]"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"lazyLists`lazyPeriodicList\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"lazyPeriodicList[list] is an infinite lazyList that \
cycles through the values in list periodically.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{13., {4., 9.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{13., {4., 9.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "lazyPeriodicList[list] is an infinite lazyList that cycles through the \
values in list periodically.", "Documentation" -> None, "OwnValues" -> None, 
    "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, lazyLists`lazyPeriodicList, {lazyLists`lazyPeriodicList[
         Alternatives[
          Hold[
           Pattern[lazyLists`Private`list, 
            Blank[Symbol]]], 
          Pattern[lazyLists`Private`list, 
           Blank[List]]]] :> 
       lazyLists`Private`lazyPeriodicListInternal[lazyLists`Private`list, 1, 
         Length[lazyLists`Private`list]], lazyLists`lazyPeriodicList[
         Alternatives[
          Hold[
           Pattern[lazyLists`Private`list, 
            Blank[Symbol]]], 
          Pattern[lazyLists`Private`list, 
           Blank[List]]], 
         PatternTest[
          Pattern[lazyLists`Private`part, 
           Blank[Integer]], Positive]] :> 
       lazyLists`Private`lazyPeriodicListInternal[lazyLists`Private`list, 1, 
         Length[lazyLists`Private`list], lazyLists`Private`part]}], 
    "SubValues" -> None, "DefaultValues" -> None, "NValues" -> None, 
    "FormatValues" -> None, "Options" -> None, "Attributes" -> {}, "FullName" -> 
    "lazyLists`lazyPeriodicList"], False]]], "Output",
 CellLabel->"Out[36]=",ExpressionUUID->"f44de1a9-4c6b-405f-b4be-336d1fae9c66"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"lazyStream[streamObject] creates a lazyList that \
streams from streamObject. These streams will stop automatically when \
EndOfFile is reached.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{
                    "lazyStream", "[", "lazyLists`Private`stream_InputStream",
                     "]"}], ":=", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"lazyLists`Private`read", "=", 
                    RowBox[{"Read", "[", "#1", "]"}]}], "}"}], ",", 
                    RowBox[{"lazyList", "[", 
                    RowBox[{"lazyLists`Private`read", ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"lazyLists`Private`read", "=!=", "EndOfFile"}], 
                    ",", 
                    RowBox[{"#0", "[", 
                    RowBox[{"#1", ",", 
                    RowBox[{"#2", "+", "1"}]}], "]"}], ",", 
                    RowBox[{"lazyList", "[", "]"}]}], "]"}]}], "]"}]}], "]"}],
                     "&"}], ")"}], "[", 
                    RowBox[{"lazyLists`Private`stream", ",", "1"}], "]"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"lazyLists`lazyStream\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"lazyStream[streamObject] creates a lazyList that \
streams from streamObject. These streams will stop automatically when \
EndOfFile is reached.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{13., {4., 9.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{13., {4., 9.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "lazyStream[streamObject] creates a lazyList that streams from \
streamObject. These streams will stop automatically when EndOfFile is \
reached.", "Documentation" -> None, "OwnValues" -> None, "UpValues" -> None, 
    "DownValues" -> 
    Information`InformationValueForm[
     DownValues, lazyLists`lazyStream, {lazyLists`lazyStream[
         Pattern[lazyLists`Private`stream, 
          Blank[InputStream]]] :> (With[{lazyLists`Private`read = Read[#]}, 
         lazyLists`lazyList[lazyLists`Private`read, 
          If[lazyLists`Private`read =!= EndOfFile, 
           #0[#, #2 + 1], 
           lazyLists`lazyList[]]]]& )[lazyLists`Private`stream, 1]}], 
    "SubValues" -> None, "DefaultValues" -> None, "NValues" -> None, 
    "FormatValues" -> None, "Options" -> None, "Attributes" -> {}, "FullName" -> 
    "lazyLists`lazyStream"], False]]], "Output",
 CellLabel->"Out[37]=",ExpressionUUID->"aaa917b5-2e2b-4c04-a734-4f73eba12afe"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"lazyTuples is a lazy version of Tuples with mostly \
the same syntax.\\nlazyTuples[n] is a special case that generates an infinite \
list of all n-tuples of integers \[GreaterEqual] 1.\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{
                    RowBox[{"lazyTuples", "[", 
                    RowBox[{
                    RowBox[{"lazyLists`Private`elementLists_List", "|", 
                    RowBox[{
                    "Hold", "[", "lazyLists`Private`elementLists_Symbol", 
                    "]"}]}], ",", 
                    RowBox[{"lazyLists`Private`opts", ":", 
                    RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], "/;", 
                    RowBox[{"MatchQ", "[", 
                    RowBox[{"lazyLists`Private`elementLists", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", "__", "}"}], ".."}], "}"}]}], "]"}]}], ":=", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"lazyLists`Private`lengths", "=", 
                    RowBox[{
                    "Length", "/@", "lazyLists`Private`elementLists"}]}], 
                    "}"}], ",", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"bulkExtractElementsUsingIndexList", "[", 
                    RowBox[{
                    "Unevaluated", "[", "lazyLists`Private`elementLists", 
                    "]"}], "]"}], ",", "Listable"}], "}"}], "/@", 
                    RowBox[{"lazyLists`Private`indexLazyList", "[", 
                    RowBox[{
                    "lazyLists`Private`lengths", ",", 
                    "lazyLists`Private`opts"}], "]"}]}]}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"lazyTuples", "[", 
                    RowBox[{
                    RowBox[{"lazyLists`Private`lengths", ":", 
                    RowBox[{"{", "__Integer", "}"}]}], ",", 
                    RowBox[{"lazyLists`Private`opts", ":", 
                    RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Min", "[", 
                    RowBox[{"lazyLists`Private`lengths", "-", 
                    RowBox[{"Max", "/@", "#1"}]}], "]"}], "<", "0"}], ",", 
                    RowBox[{
                    RowBox[{"Append", "[", "endOfLazyList", "]"}], "[", 
                    RowBox[{"Select", "[", 
                    RowBox[{
                    RowBox[{"Transpose", "[", "#1", "]"}], ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Min", "[", 
                    RowBox[{"lazyLists`Private`lengths", "-", "#1"}], "]"}], 
                    "\[GreaterEqual]", "0"}], "&"}]}], "]"}], "]"}], ",", 
                    RowBox[{"Transpose", "[", "#1", "]"}]}], "]"}], "&"}], 
                    ",", "Listable"}], "}"}], "/@", 
                    RowBox[{"lazyLists`Private`indexLazyList", "[", 
                    RowBox[{
                    "lazyLists`Private`lengths", ",", 
                    "lazyLists`Private`opts"}], "]"}]}]}]},
                    {
                    RowBox[{
                    RowBox[{
                    RowBox[{"lazyTuples", "[", 
                    RowBox[{
                    RowBox[{"lazyLists`Private`elementList_List", "|", 
                    RowBox[{
                    "Hold", "[", "lazyLists`Private`elementList_Symbol", 
                    "]"}]}], ",", 
                    RowBox[{
                    "lazyLists`Private`tupLength_Integer", "?", "Positive"}], 
                    ",", 
                    RowBox[{"lazyLists`Private`opts", ":", 
                    RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], "/;", 
                    RowBox[{
                    RowBox[{"MatchQ", "[", 
                    RowBox[{"lazyLists`Private`elementList", ",", 
                    RowBox[{"{", "__", "}"}]}], "]"}], "&&", 
                    RowBox[{"lazyLists`Private`elementList", "=!=", 
                    RowBox[{"Range", "[", 
                    RowBox[{
                    "Length", "[", "lazyLists`Private`elementList", "]"}], 
                    "]"}]}]}]}], ":=", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"bulkExtractElementsUsingIndexList", "[", 
                    RowBox[{
                    RowBox[{
                    "Unevaluated", "[", "lazyLists`Private`elementList", 
                    "]"}], ",", "lazyLists`Private`tupLength"}], "]"}], ",", 
                    "Listable"}], "}"}], "/@", 
                    RowBox[{"lazyLists`Private`indexLazyList", "[", 
                    RowBox[{
                    RowBox[{"ConstantArray", "[", 
                    RowBox[{
                    RowBox[{
                    "Length", "[", "lazyLists`Private`elementList", "]"}], 
                    ",", "lazyLists`Private`tupLength"}], "]"}], ",", 
                    "lazyLists`Private`opts"}], "]"}]}]}]},
                    {
                    RowBox[{
                    RowBox[{
                    RowBox[{"lazyTuples", "[", 
                    RowBox[{
                    RowBox[{"lazyLists`Private`elementList_List", "|", 
                    RowBox[{
                    "Hold", "[", "lazyLists`Private`elementList_Symbol", 
                    "]"}]}], ",", 
                    RowBox[{
                    "lazyLists`Private`tupLength_Integer", "?", "Positive"}], 
                    ",", 
                    RowBox[{"lazyLists`Private`opts", ":", 
                    RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], "/;", 
                    RowBox[{"lazyLists`Private`elementList", "===", 
                    RowBox[{"Range", "[", 
                    RowBox[{
                    "Length", "[", "lazyLists`Private`elementList", "]"}], 
                    "]"}]}]}], ":=", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"lazyLists`Private`maxIndex", "=", 
                    RowBox[{
                    "Length", "[", "lazyLists`Private`elementList", "]"}]}], 
                    "}"}], ",", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Max", "[", "#1", "]"}], ">", 
                    "lazyLists`Private`maxIndex"}], ",", 
                    RowBox[{
                    RowBox[{"Append", "[", "endOfLazyList", "]"}], "[", 
                    RowBox[{"Select", "[", 
                    RowBox[{"#1", ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Max", "[", "#1", "]"}], "\[LessEqual]", 
                    "lazyLists`Private`maxIndex"}], "&"}]}], "]"}], "]"}], 
                    ",", "#1"}], "]"}], "&"}], ",", "Listable"}], "}"}], "/@", 
                    RowBox[{"lazyTranspose", "[", 
                    RowBox[{"lazyLists`Private`indexLazyList", "[", 
                    RowBox[{
                    RowBox[{"ConstantArray", "[", 
                    RowBox[{
                    RowBox[{
                    "Length", "[", "lazyLists`Private`elementList", "]"}], 
                    ",", "lazyLists`Private`tupLength"}], "]"}], ",", 
                    "lazyLists`Private`opts"}], "]"}], "]"}]}]}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"lazyTuples", "[", 
                    RowBox[{"lazyLists`Private`tupLength_Integer", ",", 
                    RowBox[{"lazyLists`Private`staringTuple", ":", 
                    RowBox[{
                    RowBox[{"{", "__", "}"}], "|", "Automatic"}], ":", 
                    "Automatic"}], ",", 
                    RowBox[{"lazyLists`Private`opt", ":", 
                    RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
                    RowBox[{"partitionedLazyNestList", "[", 
                    RowBox[{"nextIntegerTuple", ",", 
                    RowBox[{"Replace", "[", 
                    RowBox[{"lazyLists`Private`staringTuple", ",", 
                    RowBox[{"Automatic", "\[RuleDelayed]", 
                    RowBox[{"ConstantArray", "[", 
                    RowBox[{"1", ",", "lazyLists`Private`tupLength"}], 
                    "]"}]}]}], "]"}], ",", 
                    RowBox[{
                    "OptionValue", "[", "\<\"PartitionSize\"\>", "]"}]}], 
                    "]"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Options\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Options\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Options", "Tooltip"]& ], 
                   RowBox[{"{", 
                    RowBox[{
                    RowBox[{"\<\"PartitionSize\"\>", "\[Rule]", "10"}], ",", 
                    RowBox[{"\<\"Start\"\>", "\[Rule]", "1"}]}], "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"lazyLists`lazyTuples\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"lazyTuples is a lazy version of Tuples with mostly \
the same syntax.\\nlazyTuples[n] is a special case that generates an infinite \
list of all n-tuples of integers \[GreaterEqual] 1.\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{13., {4., 9.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{13., {4., 9.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "lazyTuples is a lazy version of Tuples with mostly the same syntax.\n\
lazyTuples[n] is a special case that generates an infinite list of all \
n-tuples of integers \[GreaterEqual] 1.", "Documentation" -> None, 
    "OwnValues" -> None, "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, lazyLists`lazyTuples, {Condition[
         lazyLists`lazyTuples[
          Alternatives[
           Pattern[lazyLists`Private`elementLists, 
            Blank[List]], 
           Hold[
            Pattern[lazyLists`Private`elementLists, 
             Blank[Symbol]]]], 
          Pattern[lazyLists`Private`opts, 
           OptionsPattern[]]], 
         MatchQ[lazyLists`Private`elementLists, {
           Repeated[{
             BlankSequence[]}]}]] :> 
       With[{lazyLists`Private`lengths = 
          Map[Length, lazyLists`Private`elementLists]}, 
         Map[{
           lazyLists`bulkExtractElementsUsingIndexList[
            Unevaluated[lazyLists`Private`elementLists]], Listable}, 
          lazyLists`Private`indexLazyList[
          lazyLists`Private`lengths, lazyLists`Private`opts]]], 
       lazyLists`lazyTuples[
         Pattern[lazyLists`Private`lengths, {
           BlankSequence[Integer]}], 
         Pattern[lazyLists`Private`opts, 
          OptionsPattern[]]] :> 
       Map[{If[Min[lazyLists`Private`lengths - Map[Max, #]] < 0, 
           Append[lazyLists`endOfLazyList][
            Select[
             Transpose[#], Min[lazyLists`Private`lengths - #] >= 0& ]], 
           Transpose[#]]& , Listable}, 
         lazyLists`Private`indexLazyList[
         lazyLists`Private`lengths, lazyLists`Private`opts]], Condition[
         lazyLists`lazyTuples[
          Alternatives[
           Pattern[lazyLists`Private`elementList, 
            Blank[List]], 
           Hold[
            Pattern[lazyLists`Private`elementList, 
             Blank[Symbol]]]], 
          PatternTest[
           Pattern[lazyLists`Private`tupLength, 
            Blank[Integer]], Positive], 
          Pattern[lazyLists`Private`opts, 
           OptionsPattern[]]], 
         And[
          MatchQ[lazyLists`Private`elementList, {
            BlankSequence[]}], lazyLists`Private`elementList =!= Range[
            Length[lazyLists`Private`elementList]]]] :> Map[{
          lazyLists`bulkExtractElementsUsingIndexList[
           Unevaluated[lazyLists`Private`elementList], 
           lazyLists`Private`tupLength], Listable}, 
         lazyLists`Private`indexLazyList[
          ConstantArray[
           Length[lazyLists`Private`elementList], 
           lazyLists`Private`tupLength], lazyLists`Private`opts]], Condition[
         lazyLists`lazyTuples[
          Alternatives[
           Pattern[lazyLists`Private`elementList, 
            Blank[List]], 
           Hold[
            Pattern[lazyLists`Private`elementList, 
             Blank[Symbol]]]], 
          PatternTest[
           Pattern[lazyLists`Private`tupLength, 
            Blank[Integer]], Positive], 
          Pattern[lazyLists`Private`opts, 
           OptionsPattern[]]], lazyLists`Private`elementList === Range[
           Length[lazyLists`Private`elementList]]] :> 
       With[{lazyLists`Private`maxIndex = 
          Length[lazyLists`Private`elementList]}, 
         Map[{If[Max[#] > lazyLists`Private`maxIndex, 
            Append[lazyLists`endOfLazyList][
             Select[#, Max[#] <= lazyLists`Private`maxIndex& ]], #]& , 
           Listable}, 
          lazyLists`lazyTranspose[
           lazyLists`Private`indexLazyList[
            ConstantArray[
             Length[lazyLists`Private`elementList], 
             lazyLists`Private`tupLength], lazyLists`Private`opts]]]], 
       lazyLists`lazyTuples[
         Pattern[lazyLists`Private`tupLength, 
          Blank[Integer]], 
         Optional[
          Pattern[lazyLists`Private`staringTuple, 
           Alternatives[{
             BlankSequence[]}, Automatic]], Automatic], 
         Pattern[lazyLists`Private`opt, 
          OptionsPattern[]]] :> 
       lazyLists`partitionedLazyNestList[lazyLists`nextIntegerTuple, 
         Replace[
         lazyLists`Private`staringTuple, Automatic :> 
          ConstantArray[1, lazyLists`Private`tupLength]], 
         OptionValue["PartitionSize"]]}], "SubValues" -> None, 
    "DefaultValues" -> None, "NValues" -> None, "FormatValues" -> None, 
    "Options" -> {"PartitionSize" -> 10, "Start" -> 1}, "Attributes" -> {}, 
    "FullName" -> "lazyLists`lazyTuples"], False]]], "Output",
 CellLabel->"Out[38]=",ExpressionUUID->"ec10782a-9e55-4e84-98b8-0254c62bbdf2"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"lazyConstantArray[elem] produces an infinite list \
of copies of elem.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{
                    "lazyConstantArray", "[", "lazyLists`Private`const_", 
                    "]"}], ":=", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"lazyList", "[", 
                    RowBox[{"lazyLists`Private`const", ",", 
                    RowBox[{"#0", "[", 
                    RowBox[{"#1", "+", "1"}], "]"}]}], "]"}], "&"}], ")"}], 
                    "[", "1", "]"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"lazyLists`lazyConstantArray\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"lazyConstantArray[elem] produces an infinite list \
of copies of elem.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{13., {4., 9.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{13., {4., 9.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "lazyConstantArray[elem] produces an infinite list of copies of elem.", 
    "Documentation" -> None, "OwnValues" -> None, "UpValues" -> None, 
    "DownValues" -> 
    Information`InformationValueForm[
     DownValues, lazyLists`lazyConstantArray, {lazyLists`lazyConstantArray[
         Pattern[lazyLists`Private`const, 
          Blank[]]] :> (lazyLists`lazyList[lazyLists`Private`const, 
         #0[# + 1]]& )[1]}], "SubValues" -> None, "DefaultValues" -> None, 
    "NValues" -> None, "FormatValues" -> None, "Options" -> None, 
    "Attributes" -> {}, "FullName" -> "lazyLists`lazyConstantArray"], 
   False]]], "Output",
 CellLabel->"Out[39]=",ExpressionUUID->"6f50c561-0208-493c-97d2-c6e786fbd123"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Operations on finite lazyLists", \
"Subsection",ExpressionUUID->"6d5d1031-631a-41cb-8e58-264d57f52254"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"?", "lazyFiniteTake"}], "\[IndentingNewLine]", 
 RowBox[{"?", "lazyFinitePart"}], "\[IndentingNewLine]", 
 RowBox[{"?", "lazySetState"}], "\[IndentingNewLine]", 
 RowBox[{"?", "lazyCatenate"}], "\[IndentingNewLine]", 
 RowBox[{"?", "lazyPrependTo"}], "\[IndentingNewLine]", 
 RowBox[{"?", "lazyAppendTo"}], "\[IndentingNewLine]", 
 RowBox[{"?", "setLazyListable"}]}], "Input",
 CellLabel->
  "In[347]:=",ExpressionUUID->"0937c9c9-1b4b-4347-a8ce-1b460d985208"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"lazyFiniteTake[lz, spec] directly applies Take to \
finite lazyLists and periodic lazyLists without having to traverse the \
lazyList element-by-element. \\nIt is equivalent to Take[list, spec]\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"lazyFiniteTake", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"lazyList", "|", "partitionedLazyList"}], ")"}], 
                    "[", 
                    RowBox[{"_", ",", 
                    RowBox[{"HoldPattern", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    "lazyLists`Private`lazyFiniteList", "|", 
                    "lazyLists`Private`lazyPeriodicListInternal"}], ")"}], 
                    "[", 
                    RowBox[{"lazyLists`Private`list_", ",", "__"}], "]"}], 
                    "]"}]}], "]"}], ",", "lazyLists`Private`spec_"}], "]"}], ":=", 
                    RowBox[{"Take", "[", 
                    RowBox[{
                    "lazyLists`Private`list", ",", "lazyLists`Private`spec"}],
                     "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"lazyFiniteTake", "[", 
                    RowBox[{
                    RowBox[{"lazyLists`Private`lz", ":", 
                    RowBox[{"_lazyList", "|", "_partitionedLazyList"}]}], ",",
                     "_"}], "]"}], ":=", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"lazyList", "::", "notFinite"}], "MessageName"], 
                    ",", 
                    RowBox[{"Short", "[", "lazyLists`Private`lz", "]"}]}], 
                    "]"}], ";", "$Failed"}], ")"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"lazyLists`lazyFiniteTake\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"lazyFiniteTake[lz, spec] directly applies Take to \
finite lazyLists and periodic lazyLists without having to traverse the \
lazyList element-by-element. \\nIt is equivalent to Take[list, spec]\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{13., {4., 9.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{13., {4., 9.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "lazyFiniteTake[lz, spec] directly applies Take to finite lazyLists and \
periodic lazyLists without having to traverse the lazyList \
element-by-element. \nIt is equivalent to Take[list, spec]", "Documentation" -> 
    None, "OwnValues" -> None, "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, lazyLists`lazyFiniteTake, {lazyLists`lazyFiniteTake[
         Alternatives[lazyLists`lazyList, lazyLists`partitionedLazyList][
          Blank[], 
          HoldPattern[
           Alternatives[
           lazyLists`Private`lazyFiniteList, 
            lazyLists`Private`lazyPeriodicListInternal][
            Pattern[lazyLists`Private`list, 
             Blank[]], 
            BlankSequence[]]]], 
         Pattern[lazyLists`Private`spec, 
          Blank[]]] :> Take[lazyLists`Private`list, lazyLists`Private`spec], 
       lazyLists`lazyFiniteTake[
         Pattern[lazyLists`Private`lz, 
          Alternatives[
           Blank[lazyLists`lazyList], 
           Blank[lazyLists`partitionedLazyList]]], 
         Blank[]] :> (Message[
          MessageName[lazyLists`lazyList, "notFinite"], 
          Short[lazyLists`Private`lz]]; $Failed)}], "SubValues" -> None, 
    "DefaultValues" -> None, "NValues" -> None, "FormatValues" -> None, 
    "Options" -> None, "Attributes" -> {}, "FullName" -> 
    "lazyLists`lazyFiniteTake"], False]]], "Output",
 CellLabel->
  "Out[347]=",ExpressionUUID->"4e3738a7-a6f2-4f23-8395-504262924dc9"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"lazyFinitePart[lz, i, j, k,...] directly extracts \
Part from finite and periodic lazyLists without having to traverse the \
lazyList element-by-element. \\nIt is equivalent to Part[list, i, j, k, \
...]\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"lazyFinitePart", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"lazyList", "|", "partitionedLazyList"}], ")"}], 
                    "[", 
                    RowBox[{"_", ",", 
                    RowBox[{"HoldPattern", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    "lazyLists`Private`lazyFiniteList", "|", 
                    "lazyLists`Private`lazyPeriodicListInternal"}], ")"}], 
                    "[", 
                    RowBox[{"lazyLists`Private`list_", ",", "__"}], "]"}], 
                    "]"}]}], "]"}], ",", "lazyLists`Private`spec__"}], "]"}], 
                    ":=", 
                    RowBox[{
                    "lazyLists`Private`list", "\[LeftDoubleBracket]", 
                    "lazyLists`Private`spec", "\[RightDoubleBracket]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"lazyFinitePart", "[", 
                    RowBox[{
                    RowBox[{"lazyLists`Private`lz", ":", 
                    RowBox[{"_lazyList", "|", "_partitionedLazyList"}]}], ",",
                     "_"}], "]"}], ":=", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"lazyList", "::", "notFinite"}], "MessageName"], 
                    ",", 
                    RowBox[{"Short", "[", "lazyLists`Private`lz", "]"}]}], 
                    "]"}], ";", "$Failed"}], ")"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"lazyLists`lazyFinitePart\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"lazyFinitePart[lz, i, j, k,...] directly extracts \
Part from finite and periodic lazyLists without having to traverse the \
lazyList element-by-element. \\nIt is equivalent to Part[list, i, j, k, \
...]\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{13., {4., 9.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{13., {4., 9.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "lazyFinitePart[lz, i, j, k,...] directly extracts Part from finite and \
periodic lazyLists without having to traverse the lazyList \
element-by-element. \nIt is equivalent to Part[list, i, j, k, ...]", 
    "Documentation" -> None, "OwnValues" -> None, "UpValues" -> None, 
    "DownValues" -> 
    Information`InformationValueForm[
     DownValues, lazyLists`lazyFinitePart, {lazyLists`lazyFinitePart[
         Alternatives[lazyLists`lazyList, lazyLists`partitionedLazyList][
          Blank[], 
          HoldPattern[
           Alternatives[
           lazyLists`Private`lazyFiniteList, 
            lazyLists`Private`lazyPeriodicListInternal][
            Pattern[lazyLists`Private`list, 
             Blank[]], 
            BlankSequence[]]]], 
         Pattern[lazyLists`Private`spec, 
          BlankSequence[]]] :> 
       Part[lazyLists`Private`list, lazyLists`Private`spec], 
       lazyLists`lazyFinitePart[
         Pattern[lazyLists`Private`lz, 
          Alternatives[
           Blank[lazyLists`lazyList], 
           Blank[lazyLists`partitionedLazyList]]], 
         Blank[]] :> (Message[
          MessageName[lazyLists`lazyList, "notFinite"], 
          Short[lazyLists`Private`lz]]; $Failed)}], "SubValues" -> None, 
    "DefaultValues" -> None, "NValues" -> None, "FormatValues" -> None, 
    "Options" -> None, "Attributes" -> {}, "FullName" -> 
    "lazyLists`lazyFinitePart"], False]]], "Output",
 CellLabel->
  "Out[348]=",ExpressionUUID->"b628b837-a01e-49b4-ac44-91ed6f31a0f8"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"lazySetState[lz, state] with lz a supported \
lazyList returns a lazyList at the specified state. \\nFinite lists, \
lazyPeriodicList, lists generated with lazyGenerator, lazy(Power)Range, and \
lazyNestList are supported.\\nMaps over supported lists are also supported.\"\
\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{
                    RowBox[{"lazySetState", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"lazyList", "|", "partitionedLazyList"}], ")"}], 
                    "[", 
                    RowBox[{"_", ",", 
                    RowBox[{"HoldPattern", "[", 
                    RowBox[{"lazyLists`Private`lazyFiniteList", "[", 
                    RowBox[{
                    "lazyLists`Private`list_", ",", "_", ",", 
                    "lazyLists`Private`rest___"}], "]"}], "]"}]}], "]"}], ",",
                     "lazyLists`Private`index_Integer"}], "]"}], "/;", 
                    RowBox[{
                    "0", "<", "lazyLists`Private`index", "\[LessEqual]", 
                    RowBox[{
                    "Length", "[", "lazyLists`Private`list", "]"}]}]}], ":=", 
                    RowBox[{"lazyLists`Private`lazyFiniteList", "[", 
                    RowBox[{
                    "lazyLists`Private`list", ",", "lazyLists`Private`index", 
                    ",", "lazyLists`Private`rest"}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{
                    RowBox[{"lazySetState", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"lazyList", "|", "partitionedLazyList"}], ")"}], 
                    "[", 
                    RowBox[{"_", ",", 
                    RowBox[{"HoldPattern", "[", 
                    RowBox[{"lazyLists`Private`lazyFiniteList", "[", 
                    RowBox[{"lazyLists`Private`list_", ",", "_", ",", 
                    "lazyLists`Private`rest___"}], "]"}], "]"}]}], "]"}], ",",
                     "lazyLists`Private`index_Integer"}], "]"}], "/;", 
                    RowBox[{
                    RowBox[{"-", 
                    RowBox[{"Length", "[", "lazyLists`Private`list", "]"}]}], 
                    "\[LessEqual]", "lazyLists`Private`index", "<", "0"}]}], ":=", 
                    RowBox[{"lazyLists`Private`lazyFiniteList", "[", 
                    RowBox[{"lazyLists`Private`list", ",", 
                    RowBox[{"lazyLists`Private`index", "+", 
                    RowBox[{"Length", "[", "lazyLists`Private`list", "]"}], 
                    "+", "1"}], ",", "lazyLists`Private`rest"}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"lazySetState", "[", 
                    RowBox[{
                    RowBox[{"lazyLists`Private`lz", ":", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"lazyList", "|", "partitionedLazyList"}], ")"}], 
                    "[", 
                    RowBox[{"_", ",", 
                    RowBox[{"HoldPattern", "[", 
                    RowBox[{"lazyLists`Private`lazyFiniteList", "[", 
                    RowBox[{"lazyLists`Private`list_", ",", "_", ",", "___"}],
                     "]"}], "]"}]}], "]"}]}], ",", 
                    "lazyLists`Private`index_Integer"}], "]"}], ":=", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"Part", "::", "partw"}], "MessageName"], ",", 
                    "lazyLists`Private`index", ",", 
                    RowBox[{"Short", "[", "lazyLists`Private`lz", "]"}]}], 
                    "]"}], ";", "lazyLists`Private`lz"}], ")"}]}]},
                    {
                    RowBox[{
                    RowBox[{"lazySetState", "[", 
                    RowBox[{
                    RowBox[{"lazyLists`Private`l", ":", 
                    RowBox[{"lazyList", "[", 
                    RowBox[{"_", ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"lazyLists`Private`gen", ":", 
                    RowBox[{
                    "lazyLists`Private`twoSidedGenerator", "|", 
                    "lazyLists`Private`leftSidedGenerator", "|", 
                    "lazyLists`Private`rightSidedGenerator", "|", 
                    "lazyLists`Private`finiteGenerator"}]}], ")"}], "[", 
                    RowBox[{
                    "lazyLists`Private`f_", ",", "lazyLists`Private`pos_", 
                    ",", "lazyLists`Private`rest___"}], "]"}]}], "]"}]}], ",",
                     "lazyLists`Private`state_"}], "]"}], ":=", 
                    RowBox[{"Replace", "[", 
                    RowBox[{
                    RowBox[{"Check", "[", 
                    RowBox[{
                    RowBox[{"lazyLists`Private`gen", "[", 
                    RowBox[{
                    "lazyLists`Private`f", ",", "lazyLists`Private`state", 
                    ",", "lazyLists`Private`rest"}], "]"}], ",", "$Failed"}], 
                    "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "Except", "[", "lazyLists`Private`validLazyListPattern", 
                    "]"}], "\[RuleDelayed]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"Part", "::", "partw"}], "MessageName"], ",", 
                    "lazyLists`Private`state", ",", 
                    RowBox[{"Short", "[", "lazyLists`Private`l", "]"}]}], 
                    "]"}], ";", "lazyLists`Private`l"}], ")"}]}], "}"}]}], 
                    "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"lazySetState", "[", 
                    RowBox[{
                    RowBox[{"lazyList", "[", 
                    RowBox[{"_", ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"lazyLists`Private`f", ":", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"lazyList", "[", 
                    RowBox[{"#1", ",", 
                    RowBox[{"#0", "[", 
                    RowBox[{"_", ",", "_"}], "]"}]}], "]"}], "&"}], ")"}]}], 
                    ")"}], "[", 
                    RowBox[{"_", ",", "lazyLists`Private`step_"}], "]"}]}], 
                    "]"}], ",", "lazyLists`Private`state_"}], "]"}], ":=", 
                    RowBox[{"lazyLists`Private`f", "[", 
                    RowBox[{
                    "lazyLists`Private`state", ",", 
                    "lazyLists`Private`step"}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"lazySetState", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"lazyList", "|", "partitionedLazyList"}], ")"}], 
                    "[", 
                    RowBox[{"_", ",", 
                    RowBox[{"HoldPattern", "[", 
                    RowBox[{"lazyLists`Private`lazyPeriodicListInternal", "[", 
                    RowBox[{
                    "lazyLists`Private`list_", ",", "_", ",", 
                    "lazyLists`Private`max_", ",", 
                    "lazyLists`Private`rest___"}], "]"}], "]"}]}], "]"}], ",",
                     "lazyLists`Private`index_Integer"}], "]"}], ":=", 
                    RowBox[{"lazyLists`Private`lazyPeriodicListInternal", "[", 
                    RowBox[{"lazyLists`Private`list", ",", 
                    RowBox[{"Mod", "[", 
                    RowBox[{
                    RowBox[{"lazyLists`Private`index", "+", "1", "-", 
                    RowBox[{
                    "UnitStep", "[", "lazyLists`Private`index", "]"}]}], ",", 
                    "lazyLists`Private`max", ",", "1"}], "]"}], ",", 
                    "lazyLists`Private`max", ",", "lazyLists`Private`rest"}], 
                    "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"lazySetState", "[", 
                    RowBox[{
                    RowBox[{"lazyLists`Private`l", ":", 
                    RowBox[{"lazyList", "[", 
                    RowBox[{"_", ",", 
                    RowBox[{
                    "lazyLists`Private`f_", "/@", 
                    "lazyLists`Private`tail_"}]}], "]"}]}], ",", 
                    "lazyLists`Private`state_"}], "]"}], ":=", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"lazyLists`Private`try", "=", 
                    RowBox[{"Check", "[", 
                    RowBox[{
                    RowBox[{"lazySetState", "[", 
                    RowBox[{
                    "lazyLists`Private`tail", ",", 
                    "lazyLists`Private`state"}], "]"}], ",", "$Failed"}], 
                    "]"}]}], "}"}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"MatchQ", "[", 
                    RowBox[{
                    "lazyLists`Private`try", ",", 
                    "lazyLists`Private`validLazyListPattern"}], "]"}], ",", 
                    RowBox[{
                    "lazyLists`Private`f", "/@", "lazyLists`Private`try"}], 
                    ",", "lazyLists`Private`l"}], "]"}]}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"lazySetState", "[", 
                    RowBox[{"lazyLists`Private`l_lazyList", ",", "_"}], "]"}],
                     ":=", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"lazySetState", "::", "notSupported"}], 
                    "MessageName"], ",", 
                    RowBox[{"Short", "[", "lazyLists`Private`l", "]"}]}], 
                    "]"}], ";", "lazyLists`Private`l"}], ")"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"lazyLists`lazySetState\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"lazySetState[lz, state] with lz a supported \
lazyList returns a lazyList at the specified state. \\nFinite lists, \
lazyPeriodicList, lists generated with lazyGenerator, lazy(Power)Range, and \
lazyNestList are supported.\\nMaps over supported lists are also supported.\"\
\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{13., {4., 9.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{13., {4., 9.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "lazySetState[lz, state] with lz a supported lazyList returns a lazyList \
at the specified state. \nFinite lists, lazyPeriodicList, lists generated \
with lazyGenerator, lazy(Power)Range, and lazyNestList are supported.\nMaps \
over supported lists are also supported.", "Documentation" -> None, 
    "OwnValues" -> None, "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, lazyLists`lazySetState, {Condition[
         lazyLists`lazySetState[
          Alternatives[lazyLists`lazyList, lazyLists`partitionedLazyList][
           Blank[], 
           HoldPattern[
            lazyLists`Private`lazyFiniteList[
             Pattern[lazyLists`Private`list, 
              Blank[]], 
             Blank[], 
             Pattern[lazyLists`Private`rest, 
              BlankNullSequence[]]]]], 
          Pattern[lazyLists`Private`index, 
           Blank[Integer]]], 
         Inequality[0, Less, lazyLists`Private`index, LessEqual, 
          Length[lazyLists`Private`list]]] :> 
       lazyLists`Private`lazyFiniteList[
        lazyLists`Private`list, lazyLists`Private`index, 
         lazyLists`Private`rest], Condition[
         lazyLists`lazySetState[
          Alternatives[lazyLists`lazyList, lazyLists`partitionedLazyList][
           Blank[], 
           HoldPattern[
            lazyLists`Private`lazyFiniteList[
             Pattern[lazyLists`Private`list, 
              Blank[]], 
             Blank[], 
             Pattern[lazyLists`Private`rest, 
              BlankNullSequence[]]]]], 
          Pattern[lazyLists`Private`index, 
           Blank[Integer]]], 
         Inequality[-Length[lazyLists`Private`list], LessEqual, 
          lazyLists`Private`index, Less, 0]] :> 
       lazyLists`Private`lazyFiniteList[
        lazyLists`Private`list, lazyLists`Private`index + 
         Length[lazyLists`Private`list] + 1, lazyLists`Private`rest], 
       lazyLists`lazySetState[
         Pattern[lazyLists`Private`lz, 
          Alternatives[lazyLists`lazyList, lazyLists`partitionedLazyList][
           Blank[], 
           HoldPattern[
            lazyLists`Private`lazyFiniteList[
             Pattern[lazyLists`Private`list, 
              Blank[]], 
             Blank[], 
             BlankNullSequence[]]]]], 
         Pattern[lazyLists`Private`index, 
          Blank[Integer]]] :> (Message[
          MessageName[Part, "partw"], lazyLists`Private`index, 
          Short[lazyLists`Private`lz]]; lazyLists`Private`lz), 
       lazyLists`lazySetState[
         Pattern[lazyLists`Private`l, 
          lazyLists`lazyList[
           Blank[], 
           Pattern[lazyLists`Private`gen, 
            Alternatives[
            lazyLists`Private`twoSidedGenerator, 
             lazyLists`Private`leftSidedGenerator, 
             lazyLists`Private`rightSidedGenerator, 
             lazyLists`Private`finiteGenerator]][
            Pattern[lazyLists`Private`f, 
             Blank[]], 
            Pattern[lazyLists`Private`pos, 
             Blank[]], 
            Pattern[lazyLists`Private`rest, 
             BlankNullSequence[]]]]], 
         Pattern[lazyLists`Private`state, 
          Blank[]]] :> Replace[
         Check[
          lazyLists`Private`gen[
          lazyLists`Private`f, lazyLists`Private`state, 
           lazyLists`Private`rest], $Failed], {
         Except[lazyLists`Private`validLazyListPattern] :> (Message[
             MessageName[Part, "partw"], lazyLists`Private`state, 
             Short[lazyLists`Private`l]]; lazyLists`Private`l)}], 
       lazyLists`lazySetState[
         lazyLists`lazyList[
          Blank[], 
          Pattern[lazyLists`Private`f, lazyLists`lazyList[#, 
            #0[
             Blank[], 
             Blank[]]]& ][
           Blank[], 
           Pattern[lazyLists`Private`step, 
            Blank[]]]], 
         Pattern[lazyLists`Private`state, 
          Blank[]]] :> 
       lazyLists`Private`f[lazyLists`Private`state, lazyLists`Private`step], 
       lazyLists`lazySetState[
         Alternatives[lazyLists`lazyList, lazyLists`partitionedLazyList][
          Blank[], 
          HoldPattern[
           lazyLists`Private`lazyPeriodicListInternal[
            Pattern[lazyLists`Private`list, 
             Blank[]], 
            Blank[], 
            Pattern[lazyLists`Private`max, 
             Blank[]], 
            Pattern[lazyLists`Private`rest, 
             BlankNullSequence[]]]]], 
         Pattern[lazyLists`Private`index, 
          Blank[Integer]]] :> 
       lazyLists`Private`lazyPeriodicListInternal[lazyLists`Private`list, 
         Mod[
         lazyLists`Private`index + 1 - UnitStep[lazyLists`Private`index], 
          lazyLists`Private`max, 1], lazyLists`Private`max, 
         lazyLists`Private`rest], lazyLists`lazySetState[
         Pattern[lazyLists`Private`l, 
          lazyLists`lazyList[
           Blank[], 
           Map[
            Pattern[lazyLists`Private`f, 
             Blank[]], 
            Pattern[lazyLists`Private`tail, 
             Blank[]]]]], 
         Pattern[lazyLists`Private`state, 
          Blank[]]] :> With[{lazyLists`Private`try = Check[
            lazyLists`lazySetState[
            lazyLists`Private`tail, lazyLists`Private`state], $Failed]}, 
         If[
          MatchQ[
          lazyLists`Private`try, lazyLists`Private`validLazyListPattern], 
          Map[lazyLists`Private`f, lazyLists`Private`try], 
          lazyLists`Private`l]], lazyLists`lazySetState[
         Pattern[lazyLists`Private`l, 
          Blank[lazyLists`lazyList]], 
         Blank[]] :> (Message[
          MessageName[lazyLists`lazySetState, "notSupported"], 
          Short[lazyLists`Private`l]]; lazyLists`Private`l)}], "SubValues" -> 
    None, "DefaultValues" -> None, "NValues" -> None, "FormatValues" -> None, 
    "Options" -> None, "Attributes" -> {}, "FullName" -> 
    "lazyLists`lazySetState"], False]]], "Output",
 CellLabel->
  "Out[349]=",ExpressionUUID->"84990fc7-aab5-40fa-9c09-db67ea3d527a"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"lazyCatenate catenates lists of lazyLists, \
lazyLists of lists and lazyLists of lazyLists into one lazyList.\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"lazyCatenate", "[", 
                    RowBox[{"lazyLists`Private`lists", ":", 
                    RowBox[{"{", 
                    RowBox[{"___", ",", "__List", ",", 
                    RowBox[{"partitionedLazyList", "[", 
                    RowBox[{"_", ",", "_"}], "]"}], ",", 
                    "lazyLists`Private`rest___"}], "}"}]}], "]"}], ":=", 
                    RowBox[{"lazyCatenate", "[", 
                    RowBox[{"SequenceReplace", "[", 
                    RowBox[{"lazyLists`Private`lists", ",", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"lazyLists`Private`l1__List", ",", 
                    RowBox[{"partitionedLazyList", "[", 
                    RowBox[{
                    "lazyLists`Private`l2_List", ",", 
                    "lazyLists`Private`tail_"}], "]"}]}], "}"}], 
                    "\[RuleDelayed]", 
                    RowBox[{"partitionedLazyList", "[", 
                    RowBox[{
                    RowBox[{"Join", "[", 
                    RowBox[{
                    "lazyLists`Private`l1", ",", "lazyLists`Private`l2"}], 
                    "]"}], ",", "lazyLists`Private`tail"}], "]"}]}]}], "]"}], 
                    "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"lazyCatenate", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    "lazyLists`Private`fst__partitionedLazyList", ",", 
                    "lazyLists`Private`lists__List"}], "}"}], "]"}], ":=", 
                    RowBox[{"lazyCatenate", "[", 
                    RowBox[{"{", 
                    RowBox[{"lazyLists`Private`fst", ",", 
                    RowBox[{"partitionedLazyList", "[", 
                    RowBox[{
                    RowBox[{"Join", "[", "lazyLists`Private`lists", "]"}], 
                    ",", 
                    RowBox[{"lazyList", "[", "]"}]}], "]"}]}], "}"}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"lazyCatenate", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"partitionedLazyList", "[", 
                    RowBox[{
                    "lazyLists`Private`list_List", ",", 
                    "lazyLists`Private`tail_"}], "]"}], ",", 
                    "lazyLists`Private`rest__partitionedLazyList"}], "}"}], 
                    "]"}], ":=", 
                    RowBox[{"partitionedLazyList", "[", 
                    RowBox[{"lazyLists`Private`list", ",", 
                    RowBox[{"lazyCatenate", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    "lazyLists`Private`tail", ",", "lazyLists`Private`rest"}],
                     "}"}], "]"}]}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"lazyCatenate", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"lazyList", "|", "List"}], ")"}], "[", "]"}], 
                    "]"}], ":=", 
                    RowBox[{"lazyList", "[", "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"lazyCatenate", "[", 
                    RowBox[{"lazyLists`Private`list", ":", 
                    RowBox[{"{", 
                    RowBox[{"___", ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"lazyList", "|", "List"}], ")"}], "[", "]"}], ",",
                     "___"}], "}"}]}], "]"}], ":=", 
                    RowBox[{"lazyCatenate", "[", 
                    RowBox[{"DeleteCases", "[", 
                    RowBox[{"lazyLists`Private`list", ",", 
                    RowBox[{
                    "lazyLists`Private`listOrLazyListPattern", "[", "]"}]}], 
                    "]"}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"lazyCatenate", "[", 
                    RowBox[{"lazyLists`Private`lists", ":", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"_List", "|", "_lazyList"}], ")"}], "..."}], ",", 
                    "_List", ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"_List", "|", "_lazyList"}], ")"}], "..."}]}], 
                    "}"}]}], "]"}], ":=", 
                    RowBox[{"lazyCatenate", "[", 
                    RowBox[{"Replace", "[", 
                    RowBox[{
                    RowBox[{"SequenceReplace", "[", 
                    RowBox[{"lazyLists`Private`lists", ",", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "lazyLists`Private`l1_List", ",", 
                    "lazyLists`Private`l2__List"}], "}"}], "\[RuleDelayed]", 
                    RowBox[{"Join", "[", 
                    RowBox[{
                    "lazyLists`Private`l1", ",", "lazyLists`Private`l2"}], 
                    "]"}]}]}], "]"}], ",", 
                    RowBox[{"lazyLists`Private`l_List", "\[RuleDelayed]", 
                    RowBox[{"lazyList", "[", "lazyLists`Private`l", "]"}]}], 
                    ",", 
                    RowBox[{"{", "1", "}"}]}], "]"}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"lazyCatenate", "[", 
                    RowBox[{"{", 
                    RowBox[{"lazyLists`Private`lz", ":", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"lazyList", "|", "partitionedLazyList"}], ")"}], 
                    "[", 
                    RowBox[{"_", ",", "_"}], "]"}]}], "}"}], "]"}], ":=", 
                    "lazyLists`Private`lz"}]},
                    {
                    RowBox[{
                    RowBox[{"lazyCatenate", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"lazyList", "[", 
                    RowBox[{
                    "lazyLists`Private`first_", ",", 
                    "lazyLists`Private`tail_"}], "]"}], ",", 
                    "lazyLists`Private`rest__"}], "}"}], "]"}], ":=", 
                    RowBox[{"lazyList", "[", 
                    RowBox[{"lazyLists`Private`first", ",", 
                    RowBox[{"lazyCatenate", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    "lazyLists`Private`tail", ",", "lazyLists`Private`rest"}],
                     "}"}], "]"}]}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"lazyCatenate", "[", 
                    RowBox[{"lazyList", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"lazyList", "|", "List"}], ")"}], "[", "]"}], ",",
                     "lazyLists`Private`tail_"}], "]"}], "]"}], ":=", 
                    RowBox[{
                    "lazyCatenate", "[", "lazyLists`Private`tail", "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"lazyCatenate", "[", 
                    RowBox[{"lazyList", "[", 
                    RowBox[{
                    "lazyLists`Private`list_List", ",", 
                    "lazyLists`Private`tail_"}], "]"}], "]"}], ":=", 
                    RowBox[{"lazyCatenate", "[", 
                    RowBox[{"lazyList", "[", 
                    RowBox[{
                    RowBox[{"lazyList", "[", "lazyLists`Private`list", "]"}], 
                    ",", "lazyLists`Private`tail"}], "]"}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"lazyCatenate", "[", 
                    RowBox[{"lazyList", "[", 
                    RowBox[{
                    RowBox[{"lazyList", "[", 
                    RowBox[{
                    "lazyLists`Private`first_", ",", 
                    "lazyLists`Private`tail1_"}], "]"}], ",", 
                    "lazyLists`Private`tail2_"}], "]"}], "]"}], ":=", 
                    RowBox[{"lazyList", "[", 
                    RowBox[{"lazyLists`Private`first", ",", 
                    RowBox[{"lazyCatenate", "[", 
                    RowBox[{"lazyList", "[", 
                    RowBox[{
                    "lazyLists`Private`tail1", ",", 
                    "lazyLists`Private`tail2"}], "]"}], "]"}]}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"lazyCatenate", "[", 
                    RowBox[{"{", 
                    RowBox[{"___", ",", 
                    RowBox[{"lazyLists`Private`arg", ":", 
                    RowBox[{"Except", "[", 
                    RowBox[{"_List", "|", "_lazyList"}], "]"}]}], ",", 
                    "___"}], "}"}], "]"}], ":=", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"lazyCatenate", "::", "invrp"}], "MessageName"], 
                    ",", 
                    RowBox[{"Short", "[", "lazyLists`Private`arg", "]"}]}], 
                    "]"}], ";", "$Failed"}], ")"}]}]},
                    {
                    RowBox[{
                    RowBox[{"lazyCatenate", "[", 
                    RowBox[{"lazyList", "[", 
                    RowBox[{
                    RowBox[{"lazyLists`Private`arg", ":", 
                    RowBox[{"Except", "[", 
                    RowBox[{"_List", "|", "_lazyList"}], "]"}]}], ",", "_"}], 
                    "]"}], "]"}], ":=", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"lazyCatenate", "::", "invrp"}], "MessageName"], 
                    ",", 
                    RowBox[{"Short", "[", "lazyLists`Private`arg", "]"}]}], 
                    "]"}], ";", "$Failed"}], ")"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"lazyLists`lazyCatenate\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"lazyCatenate catenates lists of lazyLists, \
lazyLists of lists and lazyLists of lazyLists into one lazyList.\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{13., {4., 9.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{13., {4., 9.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "lazyCatenate catenates lists of lazyLists, lazyLists of lists and \
lazyLists of lazyLists into one lazyList.", "Documentation" -> None, 
    "OwnValues" -> None, "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, lazyLists`lazyCatenate, {lazyLists`lazyCatenate[
         Pattern[lazyLists`Private`lists, {
           BlankNullSequence[], 
           BlankSequence[List], 
           lazyLists`partitionedLazyList[
            Blank[], 
            Blank[]], 
           Pattern[lazyLists`Private`rest, 
            BlankNullSequence[]]}]] :> lazyLists`lazyCatenate[
         SequenceReplace[lazyLists`Private`lists, {
            Pattern[lazyLists`Private`l1, 
             BlankSequence[List]], 
            lazyLists`partitionedLazyList[
             Pattern[lazyLists`Private`l2, 
              Blank[List]], 
             Pattern[lazyLists`Private`tail, 
              Blank[]]]} :> lazyLists`partitionedLazyList[
            Join[lazyLists`Private`l1, lazyLists`Private`l2], 
            lazyLists`Private`tail]]], lazyLists`lazyCatenate[{
          Pattern[lazyLists`Private`fst, 
           BlankSequence[lazyLists`partitionedLazyList]], 
          Pattern[lazyLists`Private`lists, 
           BlankSequence[List]]}] :> 
       lazyLists`lazyCatenate[{lazyLists`Private`fst, 
          lazyLists`partitionedLazyList[
           Join[lazyLists`Private`lists], 
           lazyLists`lazyList[]]}], lazyLists`lazyCatenate[{
          lazyLists`partitionedLazyList[
           Pattern[lazyLists`Private`list, 
            Blank[List]], 
           Pattern[lazyLists`Private`tail, 
            Blank[]]], 
          Pattern[lazyLists`Private`rest, 
           BlankSequence[lazyLists`partitionedLazyList]]}] :> 
       lazyLists`partitionedLazyList[lazyLists`Private`list, 
         lazyLists`lazyCatenate[{
          lazyLists`Private`tail, lazyLists`Private`rest}]], 
       lazyLists`lazyCatenate[
         Alternatives[lazyLists`lazyList, List][]] :> lazyLists`lazyList[], 
       lazyLists`lazyCatenate[
         Pattern[lazyLists`Private`list, {
           BlankNullSequence[], 
           Alternatives[lazyLists`lazyList, List][], 
           BlankNullSequence[]}]] :> lazyLists`lazyCatenate[
         DeleteCases[lazyLists`Private`list, 
          lazyLists`Private`listOrLazyListPattern[]]], lazyLists`lazyCatenate[
         Pattern[lazyLists`Private`lists, {
           RepeatedNull[
            Alternatives[
             Blank[List], 
             Blank[lazyLists`lazyList]]], 
           Blank[List], 
           RepeatedNull[
            Alternatives[
             Blank[List], 
             Blank[lazyLists`lazyList]]]}]] :> lazyLists`lazyCatenate[
         Replace[
          SequenceReplace[lazyLists`Private`lists, {
             Pattern[lazyLists`Private`l1, 
              Blank[List]], 
             Pattern[lazyLists`Private`l2, 
              BlankSequence[List]]} :> 
           Join[lazyLists`Private`l1, lazyLists`Private`l2]], 
          Pattern[lazyLists`Private`l, 
            Blank[List]] :> lazyLists`lazyList[lazyLists`Private`l], {1}]], 
       lazyLists`lazyCatenate[{
          Pattern[lazyLists`Private`lz, 
           Alternatives[lazyLists`lazyList, lazyLists`partitionedLazyList][
            Blank[], 
            Blank[]]]}] :> lazyLists`Private`lz, lazyLists`lazyCatenate[{
          lazyLists`lazyList[
           Pattern[lazyLists`Private`first, 
            Blank[]], 
           Pattern[lazyLists`Private`tail, 
            Blank[]]], 
          Pattern[lazyLists`Private`rest, 
           BlankSequence[]]}] :> lazyLists`lazyList[lazyLists`Private`first, 
         lazyLists`lazyCatenate[{
          lazyLists`Private`tail, lazyLists`Private`rest}]], 
       lazyLists`lazyCatenate[
         lazyLists`lazyList[
          Alternatives[lazyLists`lazyList, List][], 
          Pattern[lazyLists`Private`tail, 
           Blank[]]]] :> lazyLists`lazyCatenate[lazyLists`Private`tail], 
       lazyLists`lazyCatenate[
         lazyLists`lazyList[
          Pattern[lazyLists`Private`list, 
           Blank[List]], 
          Pattern[lazyLists`Private`tail, 
           Blank[]]]] :> lazyLists`lazyCatenate[
         lazyLists`lazyList[
          lazyLists`lazyList[lazyLists`Private`list], 
          lazyLists`Private`tail]], lazyLists`lazyCatenate[
         lazyLists`lazyList[
          lazyLists`lazyList[
           Pattern[lazyLists`Private`first, 
            Blank[]], 
           Pattern[lazyLists`Private`tail1, 
            Blank[]]], 
          Pattern[lazyLists`Private`tail2, 
           Blank[]]]] :> lazyLists`lazyList[lazyLists`Private`first, 
         lazyLists`lazyCatenate[
          lazyLists`lazyList[
          lazyLists`Private`tail1, lazyLists`Private`tail2]]], 
       lazyLists`lazyCatenate[{
          BlankNullSequence[], 
          Pattern[lazyLists`Private`arg, 
           Except[
            Alternatives[
             Blank[List], 
             Blank[lazyLists`lazyList]]]], 
          BlankNullSequence[]}] :> (Message[
          MessageName[lazyLists`lazyCatenate, "invrp"], 
          Short[lazyLists`Private`arg]]; $Failed), lazyLists`lazyCatenate[
         lazyLists`lazyList[
          Pattern[lazyLists`Private`arg, 
           Except[
            Alternatives[
             Blank[List], 
             Blank[lazyLists`lazyList]]]], 
          Blank[]]] :> (Message[
          MessageName[lazyLists`lazyCatenate, "invrp"], 
          Short[lazyLists`Private`arg]]; $Failed)}], "SubValues" -> None, 
    "DefaultValues" -> None, "NValues" -> None, "FormatValues" -> None, 
    "Options" -> None, "Attributes" -> {}, "FullName" -> 
    "lazyLists`lazyCatenate"], False]]], "Output",
 CellLabel->
  "Out[350]=",ExpressionUUID->"dc2ad628-9377-4db4-acfd-5c3ffb66142c"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"lazyPrependTo[lz, element] can be used on lazyLists \
generated by lazyList[Hold[var]] or lazyList[list] to modify the underlying \
list.\\nIt returns a lazyList with the modified variable at the index where \
lz was originally.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"lazyPrependTo", "[", 
                    RowBox[{
                    RowBox[{"lazyList", "[", 
                    RowBox[{"lazyLists`Private`first_", ",", 
                    RowBox[{"lazyLists`Private`lazyFiniteList", "[", 
                    RowBox[{"lazyLists`Private`list_Symbol", ",", 
                    "lazyLists`Private`i_"}], "]"}]}], "]"}], ",", 
                    "lazyLists`Private`element_"}], "]"}], ":=", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"PrependTo", "[", 
                    RowBox[{
                    "lazyLists`Private`list", ",", 
                    "lazyLists`Private`element"}], "]"}], ";", 
                    RowBox[{"lazyList", "[", 
                    RowBox[{"lazyLists`Private`first", ",", 
                    RowBox[{"lazyLists`Private`lazyFiniteList", "[", 
                    RowBox[{"lazyLists`Private`list", ",", 
                    RowBox[{"lazyLists`Private`i", "+", "1"}]}], "]"}]}], 
                    "]"}]}], ")"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"lazyLists`lazyPrependTo\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"lazyPrependTo[lz, element] can be used on lazyLists \
generated by lazyList[Hold[var]] or lazyList[list] to modify the underlying \
list.\\nIt returns a lazyList with the modified variable at the index where \
lz was originally.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{13., {4., 9.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{13., {4., 9.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "lazyPrependTo[lz, element] can be used on lazyLists generated by \
lazyList[Hold[var]] or lazyList[list] to modify the underlying list.\nIt \
returns a lazyList with the modified variable at the index where lz was \
originally.", "Documentation" -> None, "OwnValues" -> None, "UpValues" -> 
    None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, lazyLists`lazyPrependTo, {lazyLists`lazyPrependTo[
         lazyLists`lazyList[
          Pattern[lazyLists`Private`first, 
           Blank[]], 
          lazyLists`Private`lazyFiniteList[
           Pattern[lazyLists`Private`list, 
            Blank[Symbol]], 
           Pattern[lazyLists`Private`i, 
            Blank[]]]], 
         Pattern[lazyLists`Private`element, 
          Blank[]]] :> (
        PrependTo[lazyLists`Private`list, lazyLists`Private`element]; 
        lazyLists`lazyList[lazyLists`Private`first, 
          lazyLists`Private`lazyFiniteList[
          lazyLists`Private`list, lazyLists`Private`i + 1]])}], "SubValues" -> 
    None, "DefaultValues" -> None, "NValues" -> None, "FormatValues" -> None, 
    "Options" -> None, "Attributes" -> {}, "FullName" -> 
    "lazyLists`lazyPrependTo"], False]]], "Output",
 CellLabel->
  "Out[351]=",ExpressionUUID->"4712cb4c-9447-4918-aace-54f10a1cc406"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"lazyAppendTo[lz, element] can be used on lazyLists \
generated by lazyList[Hold[var]] or lazyList[list] to modify the underlying \
list.\\nIt returns a lazyList with the modified variable at the index where \
lz was originally.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"lazyAppendTo", "[", 
                    RowBox[{
                    RowBox[{"lazyList", "[", 
                    RowBox[{"lazyLists`Private`first_", ",", 
                    RowBox[{"lazyLists`Private`lazyFiniteList", "[", 
                    RowBox[{
                    "lazyLists`Private`list_Symbol", ",", 
                    "lazyLists`Private`i_"}], "]"}]}], "]"}], ",", 
                    "lazyLists`Private`element_"}], "]"}], ":=", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"AppendTo", "[", 
                    RowBox[{
                    "lazyLists`Private`list", ",", 
                    "lazyLists`Private`element"}], "]"}], ";", 
                    RowBox[{"lazyList", "[", 
                    RowBox[{"lazyLists`Private`first", ",", 
                    RowBox[{"lazyLists`Private`lazyFiniteList", "[", 
                    RowBox[{
                    "lazyLists`Private`list", ",", "lazyLists`Private`i"}], 
                    "]"}]}], "]"}]}], ")"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"lazyLists`lazyAppendTo\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"lazyAppendTo[lz, element] can be used on lazyLists \
generated by lazyList[Hold[var]] or lazyList[list] to modify the underlying \
list.\\nIt returns a lazyList with the modified variable at the index where \
lz was originally.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{13., {4., 9.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{13., {4., 9.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "lazyAppendTo[lz, element] can be used on lazyLists generated by \
lazyList[Hold[var]] or lazyList[list] to modify the underlying list.\nIt \
returns a lazyList with the modified variable at the index where lz was \
originally.", "Documentation" -> None, "OwnValues" -> None, "UpValues" -> 
    None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, lazyLists`lazyAppendTo, {lazyLists`lazyAppendTo[
         lazyLists`lazyList[
          Pattern[lazyLists`Private`first, 
           Blank[]], 
          lazyLists`Private`lazyFiniteList[
           Pattern[lazyLists`Private`list, 
            Blank[Symbol]], 
           Pattern[lazyLists`Private`i, 
            Blank[]]]], 
         Pattern[lazyLists`Private`element, 
          Blank[]]] :> (
        AppendTo[lazyLists`Private`list, lazyLists`Private`element]; 
        lazyLists`lazyList[lazyLists`Private`first, 
          lazyLists`Private`lazyFiniteList[
          lazyLists`Private`list, lazyLists`Private`i]])}], "SubValues" -> 
    None, "DefaultValues" -> None, "NValues" -> None, "FormatValues" -> None, 
    "Options" -> None, "Attributes" -> {}, "FullName" -> 
    "lazyLists`lazyAppendTo"], False]]], "Output",
 CellLabel->
  "Out[352]=",ExpressionUUID->"624169a5-9c87-4dd9-a1df-6986e5d42f8f"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"setLazyListable[sym] sets UpValues to lazyList that \
ensure that sym threads over lazyLists. \\nBe aware that the attributes have \
priority over UpValues, so if sym has the Listable attribute it will always \
act first.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{
                    "setLazyListable", "[", "lazyLists`Private`sym_Symbol", 
                    "]"}], ":=", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"lazyList", "/:", 
                    RowBox[{"lazyLists`Private`expr", ":", 
                    RowBox[{"lazyLists`Private`sym", "[", 
                    RowBox[{"___", ",", 
                    RowBox[{"lazyList", "[", "]"}], ",", "___"}], "]"}]}], ":=", 
                    RowBox[{"lazyList", "[", "]"}]}], ";", 
                    RowBox[{"partitionedLazyList", "/:", 
                    RowBox[{"lazyLists`Private`sym", "[", 
                    RowBox[{
                    "lazyLists`Private`first___", ",", 
                    "lazyLists`Private`lz_partitionedLazyList", ",", 
                    "lazyLists`Private`rest___"}], "]"}], ":=", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Thread", "[", 
                    RowBox[{
                    RowBox[{"Unevaluated", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Thread", "[", 
                    RowBox[{"Unevaluated", "[", 
                    RowBox[{"lazyLists`Private`sym", "[", "##1", "]"}], "]"}],
                     "]"}], "&"}], ")"}], "[", "##1", "]"}], "]"}], ",", 
                    "partitionedLazyList"}], "]"}], "&"}], ")"}], "@@", 
                    RowBox[{"repartitionAll", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    "lazyLists`Private`first", ",", "lazyLists`Private`lz", 
                    ",", "lazyLists`Private`rest"}], "}"}], "]"}]}]}], ";", 
                    RowBox[{"lazyList", "/:", 
                    RowBox[{"lazyLists`Private`expr", ":", 
                    RowBox[{"lazyLists`Private`sym", "[", 
                    RowBox[{"___", ",", "_lazyList", ",", "___"}], "]"}]}], ":=", 
                    RowBox[{"Thread", "[", 
                    RowBox[{
                    RowBox[{
                    "Unevaluated", "[", "lazyLists`Private`expr", "]"}], ",", 
                    "lazyList"}], "]"}]}], ";", "lazyLists`Private`sym"}], 
                    ")"}]}]},
                    {
                    RowBox[{
                    RowBox[{"setLazyListable", "[", 
                    RowBox[{"{", 
                    RowBox[{"lazyLists`Private`sym_Symbol", ",", "Listable"}],
                     "}"}], "]"}], ":=", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"lazyList", "/:", 
                    RowBox[{"lazyLists`Private`expr", ":", 
                    RowBox[{"lazyLists`Private`sym", "[", 
                    RowBox[{"___", ",", 
                    RowBox[{"lazyList", "[", "]"}], ",", "___"}], "]"}]}], ":=", 
                    RowBox[{"lazyList", "[", "]"}]}], ";", 
                    RowBox[{"partitionedLazyList", "/:", 
                    RowBox[{"lazyLists`Private`expr", ":", 
                    RowBox[{"lazyLists`Private`sym", "[", 
                    RowBox[{
                    "lazyLists`Private`first___", ",", 
                    "lazyLists`Private`lz_partitionedLazyList", ",", 
                    "lazyLists`Private`rest___"}], "]"}]}], ":=", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Thread", "[", 
                    RowBox[{
                    RowBox[{"Unevaluated", "[", 
                    RowBox[{"lazyLists`Private`sym", "[", "##1", "]"}], "]"}],
                     ",", "partitionedLazyList"}], "]"}], "&"}], ")"}], "@@", 
                    RowBox[{"repartitionAll", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    "lazyLists`Private`first", ",", "lazyLists`Private`lz", 
                    ",", "lazyLists`Private`rest"}], "}"}], "]"}]}]}], ";", 
                    RowBox[{"lazyList", "/:", 
                    RowBox[{"lazyLists`Private`expr", ":", 
                    RowBox[{"lazyLists`Private`sym", "[", 
                    RowBox[{"___", ",", "_lazyList", ",", "___"}], "]"}]}], ":=", 
                    RowBox[{"Thread", "[", 
                    RowBox[{
                    RowBox[{
                    "Unevaluated", "[", "lazyLists`Private`expr", "]"}], ",", 
                    "lazyList"}], "]"}]}], ";", "lazyLists`Private`sym"}], 
                    ")"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "HoldFirst", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"lazyLists`setLazyListable\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"setLazyListable[sym] sets UpValues to lazyList that \
ensure that sym threads over lazyLists. \\nBe aware that the attributes have \
priority over UpValues, so if sym has the Listable attribute it will always \
act first.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{13., {4., 9.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{13., {4., 9.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "setLazyListable[sym] sets UpValues to lazyList that ensure that sym \
threads over lazyLists. \nBe aware that the attributes have priority over \
UpValues, so if sym has the Listable attribute it will always act first.", 
    "Documentation" -> None, "OwnValues" -> None, "UpValues" -> None, 
    "DownValues" -> 
    Information`InformationValueForm[
     DownValues, lazyLists`setLazyListable, {lazyLists`setLazyListable[
         Pattern[lazyLists`Private`sym, 
          Blank[Symbol]]] :> (TagSetDelayed[lazyLists`lazyList, 
          Pattern[lazyLists`Private`expr, 
           lazyLists`Private`sym[
            BlankNullSequence[], 
            lazyLists`lazyList[], 
            BlankNullSequence[]]], 
          lazyLists`lazyList[]]; TagSetDelayed[lazyLists`partitionedLazyList, 
          lazyLists`Private`sym[
           Pattern[lazyLists`Private`first, 
            BlankNullSequence[]], 
           Pattern[lazyLists`Private`lz, 
            Blank[lazyLists`partitionedLazyList]], 
           Pattern[lazyLists`Private`rest, 
            BlankNullSequence[]]], 
          Apply[Thread[
            Unevaluated[
             (Thread[
              Unevaluated[
               lazyLists`Private`sym[
                SlotSequence[1]]]]& )[
              SlotSequence[1]]], lazyLists`partitionedLazyList]& , 
           
           lazyLists`repartitionAll[{
            lazyLists`Private`first, lazyLists`Private`lz, 
             lazyLists`Private`rest}]]]; TagSetDelayed[lazyLists`lazyList, 
          Pattern[lazyLists`Private`expr, 
           lazyLists`Private`sym[
            BlankNullSequence[], 
            Blank[lazyLists`lazyList], 
            BlankNullSequence[]]], 
          Thread[
           Unevaluated[lazyLists`Private`expr], lazyLists`lazyList]]; 
        lazyLists`Private`sym), lazyLists`setLazyListable[{
          Pattern[lazyLists`Private`sym, 
           Blank[Symbol]], Listable}] :> (TagSetDelayed[lazyLists`lazyList, 
          Pattern[lazyLists`Private`expr, 
           lazyLists`Private`sym[
            BlankNullSequence[], 
            lazyLists`lazyList[], 
            BlankNullSequence[]]], 
          lazyLists`lazyList[]]; TagSetDelayed[lazyLists`partitionedLazyList, 
          Pattern[lazyLists`Private`expr, 
           lazyLists`Private`sym[
            Pattern[lazyLists`Private`first, 
             BlankNullSequence[]], 
            Pattern[lazyLists`Private`lz, 
             Blank[lazyLists`partitionedLazyList]], 
            Pattern[lazyLists`Private`rest, 
             BlankNullSequence[]]]], 
          Apply[Thread[
            Unevaluated[
             lazyLists`Private`sym[
              SlotSequence[1]]], lazyLists`partitionedLazyList]& , 
           
           lazyLists`repartitionAll[{
            lazyLists`Private`first, lazyLists`Private`lz, 
             lazyLists`Private`rest}]]]; TagSetDelayed[lazyLists`lazyList, 
          Pattern[lazyLists`Private`expr, 
           lazyLists`Private`sym[
            BlankNullSequence[], 
            Blank[lazyLists`lazyList], 
            BlankNullSequence[]]], 
          Thread[
           Unevaluated[lazyLists`Private`expr], lazyLists`lazyList]]; 
        lazyLists`Private`sym)}], "SubValues" -> None, "DefaultValues" -> 
    None, "NValues" -> None, "FormatValues" -> None, "Options" -> None, 
    "Attributes" -> {HoldFirst}, "FullName" -> "lazyLists`setLazyListable"], 
   False]]], "Output",
 CellLabel->"Out[353]=",ExpressionUUID->"23d4d8b5-231c-4916-a383-d70e25963a98"]
}, Open  ]],

Cell["System symbols that work with lazyLists:", \
"Text",ExpressionUUID->"587da714-8a8f-4437-8b8c-f88a92b7ff4e"],

Cell[CellGroupData[{

Cell[TextData[StyleBox["Part, Take",
 FontWeight->
  "Bold"]], "Item",ExpressionUUID->"aa5df912-6326-4bba-a487-5ea8a0dabd1e"],

Cell[TextData[StyleBox["TakeWhile, LengthWhile",
 FontWeight->
  "Bold"]], "Item",ExpressionUUID->"eaaf9966-d5dd-4f96-8eaf-d9d5cc0841ee"],

Cell[TextData[StyleBox["Append, Prepend",
 FontWeight->
  "Bold"]], "Item",ExpressionUUID->"55d513a0-9ded-47b3-8b29-544559fc0a22"],

Cell[TextData[{
 StyleBox["Nothing",
  FontWeight->"Bold"],
 " (vanishes automatically)"
}], "Item",ExpressionUUID->"a158d074-1c49-48c4-90f3-ae554edfd93f"],

Cell[TextData[StyleBox["Map, MapIndexed",
 FontWeight->
  "Bold"]], "Item",ExpressionUUID->"8306afa4-283f-4205-bdb6-633fd57a2348"],

Cell[TextData[StyleBox["Cases, Pick, Select",
 FontWeight->
  "Bold"]], "Item",ExpressionUUID->"68d71363-255e-4cd4-b43e-c14b37190c6d"],

Cell[TextData[StyleBox["FoldList, FoldPairList",
 FontWeight->
  "Bold"]], "Item",ExpressionUUID->"46b07827-0aac-43c0-9d23-c68beb6d63ae"],

Cell[TextData[StyleBox["Plus, Times, Divide, Subtract, Power",
 FontWeight->
  "Bold"]], "Item",ExpressionUUID->"7185f435-bdb8-4348-94ca-13bed28fae34"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Special functions", \
"Subsection",ExpressionUUID->"8161cb60-2662-464e-bd05-1ed7918a050f"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"?", "lazyMapThread"}], "\[IndentingNewLine]", 
 RowBox[{"?", "lazyTranspose"}], "\[IndentingNewLine]", 
 RowBox[{"?", "lazyPartMap"}], "\[IndentingNewLine]", 
 RowBox[{"?", "composeMappedFunctions"}], "\[IndentingNewLine]", 
 RowBox[{"?", "lazyTruncate"}], "\[IndentingNewLine]", 
 RowBox[{"?", "lazyAggregate"}]}], "Input",
 CellLabel->"In[76]:=",ExpressionUUID->"966ecd04-15a3-4c9a-b904-32be5271d7a0"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"lazyMapThread[f, {lz1, lz2, ...}] is the lazy \
equivalent to MapThread. Mixing lazy lists and normal lists is allowed.\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"lazyMapThread", "[", 
                    RowBox[{"lazyLists`Private`f_", ",", 
                    RowBox[{"lazyLists`Private`lists", ":", 
                    RowBox[{"{", 
                    RowBox[{"___", ",", 
                    RowBox[{"_List", "|", 
                    RowBox[{"Hold", "[", 
                    RowBox[{"_Symbol", "?", "ListQ"}], "]"}]}], ",", "___"}], 
                    "}"}]}], ",", 
                    RowBox[{"lazyLists`Private`opts", ":", 
                    RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
                    RowBox[{"lazyMapThread", "[", 
                    RowBox[{"lazyLists`Private`f", ",", 
                    RowBox[{"Replace", "[", 
                    RowBox[{"lazyLists`Private`lists", ",", 
                    RowBox[{
                    RowBox[{"lazyLists`Private`l", ":", 
                    RowBox[{
                    "_List", "|", "lazyLists`Private`heldListPattern"}]}], 
                    "\[RuleDelayed]", 
                    RowBox[{"lazyList", "[", "lazyLists`Private`l", "]"}]}], 
                    ",", 
                    RowBox[{"{", "1", "}"}]}], "]"}], ",", 
                    "lazyLists`Private`opts"}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"lazyMapThread", "[", 
                    RowBox[{"lazyLists`Private`f_", ",", 
                    RowBox[{"lazyLists`Private`lists", ":", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"lazyList", "[", 
                    RowBox[{"_", ",", "_"}], "]"}], ".."}], "}"}]}], ",", 
                    RowBox[{"lazyLists`Private`opts", ":", 
                    RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
                    RowBox[{"lazyList", "[", 
                    RowBox[{
                    RowBox[{"lazyLists`Private`f", "@@", 
                    RowBox[{"lazyLists`Private`lists", "\[LeftDoubleBracket]", 
                    RowBox[{"All", ",", "1"}], "\[RightDoubleBracket]"}]}], 
                    ",", 
                    RowBox[{"lazyMapThread", "[", 
                    RowBox[{"lazyLists`Private`f", ",", 
                    RowBox[{"lazyLists`Private`lists", "\[LeftDoubleBracket]", 
                    RowBox[{"All", ",", "2"}], "\[RightDoubleBracket]"}], ",",
                     "lazyLists`Private`opts"}], "]"}]}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"lazyMapThread", "[", 
                    RowBox[{"lazyLists`Private`fun_", ",", 
                    RowBox[{"lazyLists`Private`lists", ":", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"lazyList", "|", "partitionedLazyList"}], ")"}], 
                    "[", 
                    RowBox[{"_", ",", "_"}], "]"}], ".."}], "}"}]}], ",", 
                    RowBox[{"lazyLists`Private`opts", ":", 
                    RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"lazyLists`Private`repartitioned", "=", 
                    RowBox[{"repartitionAll", "[", 
                    RowBox[{
                    "lazyLists`Private`lists", ",", 
                    "lazyLists`Private`opts"}], "]"}]}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"lazyLists`Private`heads", "=", 
                    RowBox[{
                    "lazyLists`Private`repartitioned", "\[LeftDoubleBracket]", 
                    RowBox[{"All", ",", "1"}], "\[RightDoubleBracket]"}]}], 
                    ",", 
                    RowBox[{"lazyLists`Private`tails", "=", 
                    RowBox[{
                    "lazyLists`Private`repartitioned", "\[LeftDoubleBracket]", 
                    RowBox[{"All", ",", "2"}], "\[RightDoubleBracket]"}]}]}], 
                    "}"}], ",", 
                    RowBox[{"partitionedLazyList", "[", 
                    RowBox[{
                    RowBox[{"MapThread", "[", 
                    RowBox[{
                    "lazyLists`Private`fun", ",", "lazyLists`Private`heads"}],
                     "]"}], ",", 
                    RowBox[{"lazyMapThread", "[", 
                    RowBox[{
                    "lazyLists`Private`fun", ",", "lazyLists`Private`tails"}],
                     "]"}]}], "]"}]}], "]"}], "/;", 
                    RowBox[{"FreeQ", "[", 
                    RowBox[{"lazyLists`Private`repartitioned", ",", 
                    RowBox[{"lazyList", "[", "]"}], ",", 
                    RowBox[{"{", "1", "}"}], ",", 
                    RowBox[{"Heads", "\[Rule]", "False"}]}], "]"}]}]}], 
                    "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"lazyMapThread", "[", "___", "]"}], ":=", 
                    RowBox[{"lazyList", "[", "]"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Options\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Options\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Options", "Tooltip"]& ], 
                   RowBox[{"\<\"RepartitionFunction\"\>", "\[Rule]", "Max"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"lazyLists`lazyMapThread\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"lazyMapThread[f, {lz1, lz2, ...}] is the lazy \
equivalent to MapThread. Mixing lazy lists and normal lists is allowed.\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{13., {4., 9.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{13., {4., 9.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "lazyMapThread[f, {lz1, lz2, ...}] is the lazy equivalent to MapThread. \
Mixing lazy lists and normal lists is allowed.", "Documentation" -> None, 
    "OwnValues" -> None, "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, lazyLists`lazyMapThread, {lazyLists`lazyMapThread[
         Pattern[lazyLists`Private`f, 
          Blank[]], 
         Pattern[lazyLists`Private`lists, {
           BlankNullSequence[], 
           Alternatives[
            Blank[List], 
            Hold[
             PatternTest[
              Blank[Symbol], ListQ]]], 
           BlankNullSequence[]}], 
         Pattern[lazyLists`Private`opts, 
          OptionsPattern[]]] :> lazyLists`lazyMapThread[lazyLists`Private`f, 
         Replace[lazyLists`Private`lists, Pattern[lazyLists`Private`l, 
            Alternatives[
             Blank[List], lazyLists`Private`heldListPattern]] :> 
          lazyLists`lazyList[lazyLists`Private`l], {1}], 
         lazyLists`Private`opts], lazyLists`lazyMapThread[
         Pattern[lazyLists`Private`f, 
          Blank[]], 
         Pattern[lazyLists`Private`lists, {
           Repeated[
            lazyLists`lazyList[
             Blank[], 
             Blank[]]]}], 
         Pattern[lazyLists`Private`opts, 
          OptionsPattern[]]] :> lazyLists`lazyList[
         Apply[lazyLists`Private`f, 
          Part[lazyLists`Private`lists, All, 1]], 
         lazyLists`lazyMapThread[lazyLists`Private`f, 
          Part[lazyLists`Private`lists, All, 2], lazyLists`Private`opts]], 
       lazyLists`lazyMapThread[
         Pattern[lazyLists`Private`fun, 
          Blank[]], 
         Pattern[lazyLists`Private`lists, {
           Repeated[
            Alternatives[lazyLists`lazyList, lazyLists`partitionedLazyList][
             Blank[], 
             Blank[]]]}], 
         Pattern[lazyLists`Private`opts, 
          OptionsPattern[]]] :> 
       With[{lazyLists`Private`repartitioned = 
          lazyLists`repartitionAll[
           lazyLists`Private`lists, lazyLists`Private`opts]}, 
         Condition[
          
          With[{lazyLists`Private`heads = 
            Part[lazyLists`Private`repartitioned, All, 1], 
            lazyLists`Private`tails = 
            Part[lazyLists`Private`repartitioned, All, 2]}, 
           lazyLists`partitionedLazyList[
            MapThread[lazyLists`Private`fun, lazyLists`Private`heads], 
            lazyLists`lazyMapThread[
            lazyLists`Private`fun, lazyLists`Private`tails]]], 
          FreeQ[lazyLists`Private`repartitioned, 
           lazyLists`lazyList[], {1}, Heads -> False]]], 
       lazyLists`lazyMapThread[
         BlankNullSequence[]] :> lazyLists`lazyList[]}], "SubValues" -> None, 
    "DefaultValues" -> None, "NValues" -> None, "FormatValues" -> None, 
    "Options" -> {"RepartitionFunction" -> Max}, "Attributes" -> {}, 
    "FullName" -> "lazyLists`lazyMapThread"], False]]], "Output",
 CellLabel->"Out[76]=",ExpressionUUID->"43f54153-a5e8-4301-b3c6-2e23ceb090d2"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"lazyTranspose[{lz1, lz2, ...}] creates a lazyList \
with tuples of elements from lz1, lz2, etc. \\nEquivalent to \
lazyMapThread[Identity, {lz1, lz2, ...}]\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"lazyTranspose", "[", 
                    RowBox[{
                    RowBox[{"lazyLists`Private`lists", ":", 
                    RowBox[{"{", 
                    RowBox[{"___", ",", 
                    RowBox[{"_List", "|", 
                    RowBox[{"Hold", "[", 
                    RowBox[{"_Symbol", "?", "ListQ"}], "]"}]}], ",", "___"}], 
                    "}"}]}], ",", 
                    RowBox[{"lazyLists`Private`opts", ":", 
                    RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
                    RowBox[{"lazyTranspose", "[", 
                    RowBox[{
                    RowBox[{"Replace", "[", 
                    RowBox[{"lazyLists`Private`lists", ",", 
                    RowBox[{
                    RowBox[{"lazyLists`Private`l", ":", 
                    RowBox[{
                    "_List", "|", "lazyLists`Private`heldListPattern"}]}], 
                    "\[RuleDelayed]", 
                    RowBox[{"lazyList", "[", "lazyLists`Private`l", "]"}]}], 
                    ",", 
                    RowBox[{"{", "1", "}"}]}], "]"}], ",", 
                    "lazyLists`Private`opts"}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"lazyTranspose", "[", 
                    RowBox[{
                    RowBox[{"lazyLists`Private`list", ":", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"lazyList", "[", 
                    RowBox[{"_", ",", "_"}], "]"}], ".."}], "}"}]}], ",", 
                    RowBox[{"lazyLists`Private`opts", ":", 
                    RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
                    RowBox[{"lazyMapThread", "[", 
                    RowBox[{
                    "List", ",", "lazyLists`Private`list", ",", 
                    "lazyLists`Private`opts"}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"lazyTranspose", "[", 
                    RowBox[{
                    RowBox[{"lazyLists`Private`lists", ":", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"lazyList", "|", "partitionedLazyList"}], ")"}], 
                    "[", 
                    RowBox[{"_", ",", "_"}], "]"}], ".."}], "}"}]}], ",", 
                    RowBox[{"lazyLists`Private`opts", ":", 
                    RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
                    RowBox[{"lazyMapThread", "[", 
                    RowBox[{
                    "List", ",", "lazyLists`Private`lists", ",", 
                    "lazyLists`Private`opts"}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{
                    RowBox[{"lazyTranspose", "[", 
                    RowBox[{"lazyLists`Private`lz", ":", 
                    RowBox[{"partitionedLazyList", "[", 
                    RowBox[{
                    RowBox[{"lazyLists`Private`lists", ":", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", "___", "}"}], ".."}], "}"}]}], ",", "_"}], 
                    "]"}]}], "]"}], "/;", 
                    RowBox[{"SameQ", "@@", 
                    RowBox[{"Length", "/@", "lazyLists`Private`lists"}]}]}], ":=", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"Transpose", ",", "Listable"}], "}"}], "/@", 
                    "lazyLists`Private`lz"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Options\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Options\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Options", "Tooltip"]& ], 
                   RowBox[{"\<\"RepartitionFunction\"\>", "\[Rule]", "Max"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"lazyLists`lazyTranspose\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"lazyTranspose[{lz1, lz2, ...}] creates a lazyList \
with tuples of elements from lz1, lz2, etc. \\nEquivalent to \
lazyMapThread[Identity, {lz1, lz2, ...}]\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{13., {4., 9.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{13., {4., 9.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "lazyTranspose[{lz1, lz2, ...}] creates a lazyList with tuples of \
elements from lz1, lz2, etc. \nEquivalent to lazyMapThread[Identity, {lz1, \
lz2, ...}]", "Documentation" -> None, "OwnValues" -> None, "UpValues" -> None,
     "DownValues" -> 
    Information`InformationValueForm[
     DownValues, lazyLists`lazyTranspose, {lazyLists`lazyTranspose[
         Pattern[lazyLists`Private`lists, {
           BlankNullSequence[], 
           Alternatives[
            Blank[List], 
            Hold[
             PatternTest[
              Blank[Symbol], ListQ]]], 
           BlankNullSequence[]}], 
         Pattern[lazyLists`Private`opts, 
          OptionsPattern[]]] :> lazyLists`lazyTranspose[
         Replace[lazyLists`Private`lists, Pattern[lazyLists`Private`l, 
            Alternatives[
             Blank[List], lazyLists`Private`heldListPattern]] :> 
          lazyLists`lazyList[lazyLists`Private`l], {1}], 
         lazyLists`Private`opts], lazyLists`lazyTranspose[
         Pattern[lazyLists`Private`list, {
           Repeated[
            lazyLists`lazyList[
             Blank[], 
             Blank[]]]}], 
         Pattern[lazyLists`Private`opts, 
          OptionsPattern[]]] :> 
       lazyLists`lazyMapThread[
        List, lazyLists`Private`list, lazyLists`Private`opts], 
       lazyLists`lazyTranspose[
         Pattern[lazyLists`Private`lists, {
           Repeated[
            Alternatives[lazyLists`lazyList, lazyLists`partitionedLazyList][
             Blank[], 
             Blank[]]]}], 
         Pattern[lazyLists`Private`opts, 
          OptionsPattern[]]] :> 
       lazyLists`lazyMapThread[
        List, lazyLists`Private`lists, lazyLists`Private`opts], Condition[
         lazyLists`lazyTranspose[
          Pattern[lazyLists`Private`lz, 
           lazyLists`partitionedLazyList[
            Pattern[lazyLists`Private`lists, {
              Repeated[{
                BlankNullSequence[]}]}], 
            Blank[]]]], 
         Apply[SameQ, 
          Map[Length, lazyLists`Private`lists]]] :> 
       Map[{Transpose, Listable}, lazyLists`Private`lz]}], "SubValues" -> 
    None, "DefaultValues" -> None, "NValues" -> None, "FormatValues" -> None, 
    "Options" -> {"RepartitionFunction" -> Max}, "Attributes" -> {}, 
    "FullName" -> "lazyLists`lazyTranspose"], False]]], "Output",
 CellLabel->"Out[77]=",ExpressionUUID->"bbd0aae6-2769-42cf-9a21-c122dab5662a"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"lazyPartMap[l, {i, j, k, ...}] is equivalent to \
Map[Part[l, {#}]&, {i, j, k, ...}] but faster.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"lazyPartMap", "[", 
                    RowBox[{"lazyLists`Private`l_lazyList", ",", 
                    RowBox[{"lazyLists`Private`indices", ":", 
                    RowBox[{"{", "__Integer", "}"}]}]}], "]"}], ":=", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"lazyLists`Private`sortedIndices", "=", 
                    RowBox[{"Sort", "[", "lazyLists`Private`indices", "]"}]}],
                     "}"}], ",", 
                    RowBox[{
                    RowBox[{"FoldList", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"#1", "\[LeftDoubleBracket]", 
                    RowBox[{"{", "#2", "}"}], "\[RightDoubleBracket]"}], 
                    "&"}], ",", 
                    RowBox[{"lazyLists`Private`l", "\[LeftDoubleBracket]", 
                    RowBox[{
                    "lazyLists`Private`sortedIndices", "\[LeftDoubleBracket]", 
                    RowBox[{"{", "1", "}"}], "\[RightDoubleBracket]"}], 
                    "\[RightDoubleBracket]"}], ",", 
                    RowBox[{
                    RowBox[{
                    "Differences", "[", "lazyLists`Private`sortedIndices", 
                    "]"}], "+", "1"}]}], "]"}], "\[LeftDoubleBracket]", 
                    RowBox[{
                    "Ordering", "[", "lazyLists`Private`indices", "]"}], 
                    "\[RightDoubleBracket]"}]}], "]"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"lazyLists`lazyPartMap\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"lazyPartMap[l, {i, j, k, ...}] is equivalent to \
Map[Part[l, {#}]&, {i, j, k, ...}] but faster.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{13., {4., 9.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{13., {4., 9.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "lazyPartMap[l, {i, j, k, ...}] is equivalent to Map[Part[l, {#}]&, {i, \
j, k, ...}] but faster.", "Documentation" -> None, "OwnValues" -> None, 
    "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, lazyLists`lazyPartMap, {lazyLists`lazyPartMap[
         Pattern[lazyLists`Private`l, 
          Blank[lazyLists`lazyList]], 
         Pattern[lazyLists`Private`indices, {
           BlankSequence[Integer]}]] :> 
       Module[{lazyLists`Private`sortedIndices = 
          Sort[lazyLists`Private`indices]}, 
         Part[
          FoldList[Part[#, {#2}]& , 
           Part[lazyLists`Private`l, 
            Part[lazyLists`Private`sortedIndices, {1}]], 
           Differences[lazyLists`Private`sortedIndices] + 1], 
          Ordering[lazyLists`Private`indices]]]}], "SubValues" -> None, 
    "DefaultValues" -> None, "NValues" -> None, "FormatValues" -> None, 
    "Options" -> None, "Attributes" -> {}, "FullName" -> 
    "lazyLists`lazyPartMap"], False]]], "Output",
 CellLabel->"Out[78]=",ExpressionUUID->"4295c5a7-ef22-4235-979a-a6b345570aff"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"composeMappedFunctions[lzList] will convert \
mappings of the form f /@ g /@ ... /@ lzList to a single map of the form (f \
@* g @* ...) /@ lzList \"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{
                    "composeMappedFunctions", "[", 
                    "lazyLists`Private`lz_lazyList", "]"}], ":=", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"lazyLists`Private`patt", "=", 
                    RowBox[{"Append", "[", 
                    RowBox[{
                    "lazyLists`Private`generatorPattern", ",", "Map"}], 
                    "]"}]}], "}"}], ",", 
                    RowBox[{"lazyLists`Private`lz", "//.", "\[VeryThinSpace]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"HoldPattern", "[", 
                    RowBox[{"lazyLists`Private`f_", "/@", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    "lazyLists`Private`gen", ":", "lazyLists`Private`patt"}], 
                    ")"}], "[", 
                    RowBox[{
                    "lazyLists`Private`fgen_", ",", 
                    "lazyLists`Private`args___"}], "]"}]}], "]"}], 
                    "\[RuleDelayed]", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"lazyLists`Private`composition", "=", 
                    RowBox[{
                    "lazyLists`Private`f", "@*", "lazyLists`Private`fgen"}]}],
                     "}"}], ",", 
                    RowBox[{
                    RowBox[{"lazyLists`Private`gen", "[", 
                    RowBox[{
                    "lazyLists`Private`composition", ",", 
                    "lazyLists`Private`args"}], "]"}], "/;", "True"}]}], 
                    "]"}]}], "}"}]}]}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{
                    "composeMappedFunctions", "[", 
                    "lazyLists`Private`lz_partitionedLazyList", "]"}], ":=", 
                    RowBox[{"lazyLists`Private`lz", "//.", "\[VeryThinSpace]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"HoldPattern", "[", 
                    RowBox[{"lazyLists`Private`fun_", "/@", 
                    RowBox[{
                    "lazyLists`Private`fgen_", "/@", 
                    "lazyLists`Private`tail_"}]}], "]"}], "\[RuleDelayed]", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"lazyLists`Private`composition", "=", 
                    RowBox[{"Replace", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "lazyLists`Private`fun", ",", "lazyLists`Private`fgen"}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"lazyLists`Private`f_", ",", "Listable"}], "}"}], 
                    ",", 
                    RowBox[{"{", 
                    RowBox[{"lazyLists`Private`g_", ",", "Listable"}], 
                    "}"}]}], "}"}], "\[RuleDelayed]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"lazyLists`Private`f", "[", 
                    RowBox[{"lazyLists`Private`g", "[", "#1", "]"}], "]"}], 
                    "&"}], ",", "Listable"}], "}"}]}], ",", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"lazyLists`Private`f", ":", 
                    RowBox[{"Except", "[", 
                    RowBox[{"{", 
                    RowBox[{"_", ",", "Listable"}], "}"}], "]"}]}], ",", 
                    RowBox[{"{", 
                    RowBox[{"lazyLists`Private`g_", ",", "Listable"}], 
                    "}"}]}], "}"}], "\[RuleDelayed]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"lazyLists`Private`f", "/@", 
                    RowBox[{"lazyLists`Private`g", "[", "#1", "]"}]}], "&"}], 
                    ",", "Listable"}], "}"}]}], ",", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"lazyLists`Private`f_", ",", "Listable"}], "}"}], 
                    ",", 
                    RowBox[{"lazyLists`Private`g", ":", 
                    RowBox[{"Except", "[", 
                    RowBox[{"{", 
                    RowBox[{"_", ",", "Listable"}], "}"}], "]"}]}]}], "}"}], 
                    "\[RuleDelayed]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"lazyLists`Private`f", "[", 
                    RowBox[{"lazyLists`Private`g", "/@", "#1"}], "]"}], "&"}],
                     ",", "Listable"}], "}"}]}], ",", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "lazyLists`Private`f_", ",", "lazyLists`Private`g_"}], 
                    "}"}], "\[RuleDelayed]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"lazyLists`Private`f", "[", 
                    RowBox[{"lazyLists`Private`g", "[", "#1", "]"}], "]"}], 
                    "&"}], ")"}]}]}], "}"}]}], "]"}]}], "}"}], ",", 
                    RowBox[{
                    RowBox[{
                    "lazyLists`Private`composition", "/@", 
                    "lazyLists`Private`tail"}], "/;", "True"}]}], "]"}]}], 
                    "}"}]}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"lazyLists`composeMappedFunctions\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"composeMappedFunctions[lzList] will convert \
mappings of the form f /@ g /@ ... /@ lzList to a single map of the form (f \
@* g @* ...) /@ lzList \"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{13., {4., 9.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{13., {4., 9.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "composeMappedFunctions[lzList] will convert mappings of the form f /@ g \
/@ ... /@ lzList to a single map of the form (f @* g @* ...) /@ lzList ", 
    "Documentation" -> None, "OwnValues" -> None, "UpValues" -> None, 
    "DownValues" -> 
    Information`InformationValueForm[
     DownValues, lazyLists`composeMappedFunctions, {
      lazyLists`composeMappedFunctions[
         Pattern[lazyLists`Private`lz, 
          Blank[lazyLists`lazyList]]] :> 
       With[{lazyLists`Private`patt = 
          Append[lazyLists`Private`generatorPattern, Map]}, 
         ReplaceRepeated[lazyLists`Private`lz, {HoldPattern[
             Map[
              Pattern[lazyLists`Private`f, 
               Blank[]], 
              Pattern[lazyLists`Private`gen, lazyLists`Private`patt][
               Pattern[lazyLists`Private`fgen, 
                Blank[]], 
               Pattern[lazyLists`Private`args, 
                BlankNullSequence[]]]]] :> 
           With[{lazyLists`Private`composition = 
              Composition[lazyLists`Private`f, lazyLists`Private`fgen]}, 
             Condition[
              lazyLists`Private`gen[
              lazyLists`Private`composition, lazyLists`Private`args], 
              True]]}]], lazyLists`composeMappedFunctions[
         Pattern[lazyLists`Private`lz, 
          Blank[lazyLists`partitionedLazyList]]] :> 
       ReplaceRepeated[lazyLists`Private`lz, {HoldPattern[
            Map[
             Pattern[lazyLists`Private`fun, 
              Blank[]], 
             Map[
              Pattern[lazyLists`Private`fgen, 
               Blank[]], 
              Pattern[lazyLists`Private`tail, 
               Blank[]]]]] :> 
          With[{lazyLists`Private`composition = 
             Replace[{lazyLists`Private`fun, lazyLists`Private`fgen}, {{{
                   Pattern[lazyLists`Private`f, 
                    Blank[]], Listable}, {
                   Pattern[lazyLists`Private`g, 
                    Blank[]], Listable}} :> {lazyLists`Private`f[
                   lazyLists`Private`g[#]]& , Listable}, {
                  Pattern[lazyLists`Private`f, 
                   Except[{
                    Blank[], Listable}]], {
                   Pattern[lazyLists`Private`g, 
                    Blank[]], Listable}} :> {Map[lazyLists`Private`f, 
                   lazyLists`Private`g[#]]& , Listable}, {{
                   Pattern[lazyLists`Private`f, 
                    Blank[]], Listable}, 
                  Pattern[lazyLists`Private`g, 
                   Except[{
                    Blank[], Listable}]]} :> {lazyLists`Private`f[
                   Map[lazyLists`Private`g, #]]& , Listable}, {
                  Pattern[lazyLists`Private`f, 
                   Blank[]], 
                  Pattern[lazyLists`Private`g, 
                   Blank[]]} :> (lazyLists`Private`f[
                  lazyLists`Private`g[#]]& )}]}, 
            Condition[
             Map[lazyLists`Private`composition, lazyLists`Private`tail], 
             True]]}]}], "SubValues" -> None, "DefaultValues" -> None, 
    "NValues" -> None, "FormatValues" -> None, "Options" -> None, 
    "Attributes" -> {}, "FullName" -> "lazyLists`composeMappedFunctions"], 
   False]]], "Output",
 CellLabel->"Out[79]=",ExpressionUUID->"72d40e96-c9bc-4f6d-afde-2adc00be9ce1"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"lazyTruncate[lzList, int] truncates a (possibly \
infinite) lazyList to finite length.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"lazyTruncate", "[", 
                    RowBox[{
                    RowBox[{"lazyLists`Private`lz", ":", 
                    RowBox[{
                    RowBox[{"lazyList", "[", 
                    RowBox[{"_", ",", "_"}], "]"}], "|", 
                    RowBox[{"partitionedLazyList", "[", 
                    RowBox[{"_List", ",", "_"}], "]"}]}]}], ",", 
                    RowBox[{
                    "lazyLists`Private`int_Integer", "?", "Positive"}]}], 
                    "]"}], ":=", 
                    RowBox[{"MapIndexed", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"#2", "\[LessEqual]", "lazyLists`Private`int"}], 
                    ",", "#1", ",", "endOfLazyList", ",", "endOfLazyList"}], 
                    "]"}], "&"}], ",", "lazyLists`Private`lz"}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"lazyTruncate", "[", 
                    RowBox[{
                    RowBox[{"lazyLists`Private`arg", ":", 
                    RowBox[{"Except", "[", 
                    RowBox[{"_lazyList", "|", "_partitionedLazyList"}], 
                    "]"}]}], ",", "_"}], "]"}], ":=", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"lazyTruncate", "::", "invrp"}], "MessageName"], 
                    ",", 
                    RowBox[{"Short", "[", "lazyLists`Private`arg", "]"}]}], 
                    "]"}], ";", "$Failed"}], ")"}]}]},
                    {
                    RowBox[{
                    RowBox[{"lazyTruncate", "[", 
                    RowBox[{"_", ",", 
                    RowBox[{"lazyLists`Private`i", ":", 
                    RowBox[{"Except", "[", 
                    RowBox[{"_Integer", "?", "Positive"}], "]"}]}]}], "]"}], ":=", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"lazyTruncate", "::", "int"}], "MessageName"], 
                    ",", 
                    RowBox[{"Short", "[", "lazyLists`Private`i", "]"}]}], 
                    "]"}], ";", "$Failed"}], ")"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"lazyLists`lazyTruncate\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"lazyTruncate[lzList, int] truncates a (possibly \
infinite) lazyList to finite length.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{13., {4., 9.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{13., {4., 9.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "lazyTruncate[lzList, int] truncates a (possibly infinite) lazyList to \
finite length.", "Documentation" -> None, "OwnValues" -> None, "UpValues" -> 
    None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, lazyLists`lazyTruncate, {lazyLists`lazyTruncate[
         Pattern[lazyLists`Private`lz, 
          Alternatives[
           lazyLists`lazyList[
            Blank[], 
            Blank[]], 
           lazyLists`partitionedLazyList[
            Blank[List], 
            Blank[]]]], 
         PatternTest[
          Pattern[lazyLists`Private`int, 
           Blank[Integer]], Positive]] :> 
       MapIndexed[
        If[#2 <= lazyLists`Private`int, #, lazyLists`endOfLazyList, 
          lazyLists`endOfLazyList]& , lazyLists`Private`lz], 
       lazyLists`lazyTruncate[
         Pattern[lazyLists`Private`arg, 
          Except[
           Alternatives[
            Blank[lazyLists`lazyList], 
            Blank[lazyLists`partitionedLazyList]]]], 
         Blank[]] :> (Message[
          MessageName[lazyLists`lazyTruncate, "invrp"], 
          Short[lazyLists`Private`arg]]; $Failed), lazyLists`lazyTruncate[
         Blank[], 
         Pattern[lazyLists`Private`i, 
          Except[
           PatternTest[
            Blank[Integer], Positive]]]] :> (Message[
          MessageName[lazyLists`lazyTruncate, "int"], 
          Short[lazyLists`Private`i]]; $Failed)}], "SubValues" -> None, 
    "DefaultValues" -> None, "NValues" -> None, "FormatValues" -> None, 
    "Options" -> None, "Attributes" -> {}, "FullName" -> 
    "lazyLists`lazyTruncate"], False]]], "Output",
 CellLabel->"Out[80]=",ExpressionUUID->"ffe0b5db-6431-4896-b3a5-e617e831758b"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"lazyAggregate[lzList, {aggregator, combiner}, \
batchSize, maxItems] iteratively extracts batchSize elements from lzList and \
then aggregates the values with the aggregator. The combiner aggregates \
results from multiple batches.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"lazyAggregate", "[", 
                    RowBox[{
                    RowBox[{"lazyLists`Private`lz", ":", 
                    RowBox[{
                    RowBox[{"lazyList", "[", 
                    RowBox[{"_", ",", "_"}], "]"}], "|", 
                    RowBox[{"partitionedLazyList", "[", 
                    RowBox[{"_List", ",", "_"}], "]"}]}]}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "lazyLists`Private`agg_", ",", 
                    "lazyLists`Private`comb_"}], "}"}], ",", 
                    RowBox[{
                    "lazyLists`Private`batchSize_Integer", "?", "Positive"}], 
                    ",", 
                    RowBox[{"lazyLists`Private`maxItems", ":", 
                    RowBox[{
                    RowBox[{"_Integer", "?", "Positive"}], "|", 
                    "\[Infinity]"}], ":", "\[Infinity]"}]}], "]"}], ":=", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"lazyLists`Private`n", "=", 
                    RowBox[{"Min", "[", 
                    RowBox[{
                    "lazyLists`Private`batchSize", ",", 
                    "lazyLists`Private`maxItems"}], "]"}]}], "}"}], ",", 
                    RowBox[{"Block", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"$IterationLimit", "=", "$lazyIterationLimit"}], 
                    "}"}], ",", 
                    RowBox[{"lazyLists`Private`lazyAggregateInternal", "[", 
                    RowBox[{
                    RowBox[{"Replace", "[", 
                    RowBox[{
                    RowBox[{"TakeDrop", "[", 
                    RowBox[{
                    "lazyLists`Private`lz", ",", "lazyLists`Private`n"}], 
                    "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "lazyLists`Private`l_List", ",", 
                    "lazyLists`Private`lz1_"}], "}"}], "\[RuleDelayed]", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "lazyLists`Private`agg", "[", "lazyLists`Private`l", 
                    "]"}], ",", "lazyLists`Private`lz1"}], "}"}]}], ",", 
                    RowBox[{"_", "\[RuleDelayed]", "$Failed"}]}], "}"}]}], 
                    "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "lazyLists`Private`agg", ",", "lazyLists`Private`comb"}], 
                    "}"}], ",", "lazyLists`Private`batchSize", ",", 
                    RowBox[{
                    "lazyLists`Private`maxItems", "-", 
                    "lazyLists`Private`n"}]}], "]"}]}], "]"}]}], "]"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"lazyLists`lazyAggregate\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"lazyAggregate[lzList, {aggregator, combiner}, \
batchSize, maxItems] iteratively extracts batchSize elements from lzList and \
then aggregates the values with the aggregator. The combiner aggregates \
results from multiple batches.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{13., {4., 9.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{13., {4., 9.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "lazyAggregate[lzList, {aggregator, combiner}, batchSize, maxItems] \
iteratively extracts batchSize elements from lzList and then aggregates the \
values with the aggregator. The combiner aggregates results from multiple \
batches.", "Documentation" -> None, "OwnValues" -> None, "UpValues" -> None, 
    "DownValues" -> 
    Information`InformationValueForm[
     DownValues, lazyLists`lazyAggregate, {lazyLists`lazyAggregate[
         Pattern[lazyLists`Private`lz, 
          Alternatives[
           lazyLists`lazyList[
            Blank[], 
            Blank[]], 
           lazyLists`partitionedLazyList[
            Blank[List], 
            Blank[]]]], {
          Pattern[lazyLists`Private`agg, 
           Blank[]], 
          Pattern[lazyLists`Private`comb, 
           Blank[]]}, 
         PatternTest[
          Pattern[lazyLists`Private`batchSize, 
           Blank[Integer]], Positive], 
         Optional[
          Pattern[lazyLists`Private`maxItems, 
           Alternatives[
            PatternTest[
             Blank[Integer], Positive], 
            DirectedInfinity[1]]], 
          DirectedInfinity[1]]] :> 
       With[{lazyLists`Private`n = 
          Min[lazyLists`Private`batchSize, lazyLists`Private`maxItems]}, 
         Block[{$IterationLimit = lazyLists`$lazyIterationLimit}, 
          lazyLists`Private`lazyAggregateInternal[
           Replace[
            TakeDrop[lazyLists`Private`lz, lazyLists`Private`n], {{
               Pattern[lazyLists`Private`l, 
                Blank[List]], 
               Pattern[lazyLists`Private`lz1, 
                Blank[]]} :> {
               lazyLists`Private`agg[lazyLists`Private`l], 
               lazyLists`Private`lz1}, Blank[] :> $Failed}], {
           lazyLists`Private`agg, lazyLists`Private`comb}, 
           lazyLists`Private`batchSize, lazyLists`Private`maxItems - 
           lazyLists`Private`n]]]}], "SubValues" -> None, "DefaultValues" -> 
    None, "NValues" -> None, "FormatValues" -> None, "Options" -> None, 
    "Attributes" -> {}, "FullName" -> "lazyLists`lazyAggregate"], 
   False]]], "Output",
 CellLabel->"Out[81]=",ExpressionUUID->"e8bf10a0-b3a8-423c-b689-a291955f17bd"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Partitioned lazy Lists", \
"Subsection",ExpressionUUID->"23ae90cc-f8ed-4b06-b7fd-28dd447957fd"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"?", "partitionedLazyList"}], "\[IndentingNewLine]", 
 RowBox[{"?", "partitionedLazyRange"}], "\[IndentingNewLine]", 
 RowBox[{"?", "partitionedLazyNestList"}], "\[IndentingNewLine]", 
 RowBox[{"?", "lazyPartition"}], "\[IndentingNewLine]", 
 RowBox[{"?", "repartitionAll"}]}], "Input",
 CellLabel->
  "In[358]:=",ExpressionUUID->"f90c95f4-8337-41d0-8b05-f789d6e950ff"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"Is a special wrapper for lazyLists that generate \
ordinary Lists.\\nThe elements of the inner Lists are treated as if they're \
seperate elements of the outer lazyList, making it possible to generate \
elements in chunks.\\nList operations on partitionedLazyList such as Map and \
FoldList will be automatically applied to the generated lists for efficiency.\
\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    
                    StyleBox["\<\" UpValue Definitions\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                    "\"UpValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "UpValues", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"Prepend", "[", 
                    RowBox[{
                    RowBox[{"partitionedLazyList", "[", 
                    RowBox[{
                    "lazyLists`Private`list_List", ",", 
                    "lazyLists`Private`tail_"}], "]"}], ",", 
                    "lazyLists`Private`newElem_"}], "]"}], "^:=", 
                    RowBox[{"partitionedLazyList", "[", 
                    RowBox[{
                    RowBox[{"Prepend", "[", 
                    RowBox[{
                    "lazyLists`Private`list", ",", 
                    "lazyLists`Private`newElem"}], "]"}], ",", 
                    "lazyLists`Private`tail"}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"First", "[", 
                    RowBox[{
                    RowBox[{"partitionedLazyList", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"lazyLists`Private`elem_", ",", "___"}], "}"}], 
                    ",", "_"}], "]"}], ",", "___"}], "]"}], "^:=", 
                    "lazyLists`Private`elem"}]},
                    {
                    RowBox[{
                    RowBox[{"Most", "[", 
                    RowBox[{"partitionedLazyList", "[", 
                    RowBox[{"lazyLists`Private`list_List", ",", "_"}], "]"}], 
                    "]"}], "^:=", "lazyLists`Private`list"}]},
                    {
                    RowBox[{
                    RowBox[{"Rest", "[", 
                    RowBox[{"partitionedLazyList", "[", 
                    RowBox[{
                    RowBox[{"{", "_", "}"}], ",", "lazyLists`Private`tail_"}],
                     "]"}], "]"}], "^:=", "lazyLists`Private`tail"}]},
                    {
                    RowBox[{
                    RowBox[{"Rest", "[", 
                    RowBox[{"partitionedLazyList", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"_", ",", "lazyLists`Private`rest__"}], "}"}], 
                    ",", "lazyLists`Private`tail_"}], "]"}], "]"}], "^:=", 
                    RowBox[{"partitionedLazyList", "[", 
                    RowBox[{
                    RowBox[{"{", "lazyLists`Private`rest", "}"}], ",", 
                    "lazyLists`Private`tail"}], "]"}]}]},
                    {
                    RowBox[{"partitionedLazyList", "/:", 
                    RowBox[{"Take", "[", 
                    RowBox[{
                    RowBox[{"partitionedLazyList", "[", 
                    RowBox[{
                    "lazyLists`Private`list_List", ",", 
                    "lazyLists`Private`tail_"}], "]"}], ",", 
                    RowBox[{"lazyLists`Private`spec", ":", 
                    RowBox[{"_Integer", "|", 
                    RowBox[{"{", 
                    RowBox[{"_Integer", ",", "___Integer"}], "}"}]}]}]}], 
                    "]"}], ":=", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"lazyLists`Private`maxIndex", "=", 
                    RowBox[{"Max", "[", 
                    RowBox[{"Replace", "[", 
                    RowBox[{"lazyLists`Private`spec", ",", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "lazyLists`Private`m_", ",", "lazyLists`Private`n_", ",", 
                    "_"}], "}"}], "\[RuleDelayed]", 
                    RowBox[{"{", 
                    RowBox[{
                    "lazyLists`Private`m", ",", "lazyLists`Private`n"}], 
                    "}"}]}]}], "]"}], "]"}]}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"partitionedLazyList", "[", 
                    RowBox[{
                    RowBox[{"Take", "[", 
                    RowBox[{
                    "lazyLists`Private`list", ",", "lazyLists`Private`spec"}],
                     "]"}], ",", 
                    RowBox[{"Evaluate", "[", 
                    RowBox[{"partitionedLazyList", "[", 
                    RowBox[{
                    RowBox[{"Drop", "[", 
                    RowBox[{
                    "lazyLists`Private`list", ",", 
                    "lazyLists`Private`maxIndex"}], "]"}], ",", 
                    "lazyLists`Private`tail"}], "]"}], "]"}]}], "]"}], "/;", 
                    RowBox[{
                    RowBox[{"Length", "[", "lazyLists`Private`list", "]"}], 
                    "\[GreaterEqual]", "lazyLists`Private`maxIndex"}]}]}], 
                    "]"}]}]},
                    {
                    RowBox[{"partitionedLazyList", "/:", 
                    RowBox[{
                    RowBox[{"Take", "[", 
                    RowBox[{
                    RowBox[{"lazyLists`Private`lz", ":", 
                    RowBox[{"partitionedLazyList", "[", 
                    RowBox[{"_List", ",", "_"}], "]"}]}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"lazyLists`Private`m_Integer", "?", "Positive"}], 
                    ",", 
                    RowBox[{"lazyLists`Private`n_Integer", "?", "Positive"}], 
                    ",", 
                    RowBox[{"lazyLists`Private`step_Integer", ":", "1"}]}], 
                    "}"}]}], "]"}], "/;", 
                    RowBox[{
                    "lazyLists`Private`n", "<", "lazyLists`Private`m"}]}], ":=", 
                    RowBox[{"Replace", "[", 
                    RowBox[{
                    RowBox[{"Take", "[", 
                    RowBox[{"lazyLists`Private`lz", ",", 
                    RowBox[{"lazyLists`Private`parseTakeSpec", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    "lazyLists`Private`m", ",", "lazyLists`Private`n", ",", 
                    "lazyLists`Private`step"}], "}"}], "]"}]}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"partitionedLazyList", "[", 
                    RowBox[{
                    "lazyLists`Private`list_List", ",", 
                    "lazyLists`Private`rest_"}], "]"}], "\[RuleDelayed]", 
                    RowBox[{"partitionedLazyList", "[", 
                    RowBox[{
                    RowBox[{"Reverse", "[", "lazyLists`Private`list", "]"}], 
                    ",", "lazyLists`Private`rest"}], "]"}]}], "}"}]}], 
                    "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"Take", "[", 
                    RowBox[{
                    RowBox[{"lazyLists`Private`lz", ":", 
                    RowBox[{"partitionedLazyList", "[", 
                    RowBox[{"_List", ",", "_"}], "]"}]}], ",", 
                    "lazyLists`Private`spec_"}], "]"}], "^:=", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"lazyLists`Private`parsedSpec", "=", 
                    RowBox[{
                    "lazyLists`Private`parseTakeSpec", "[", 
                    "lazyLists`Private`spec", "]"}]}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"Take", "[", 
                    RowBox[{
                    "lazyLists`Private`lz", ",", 
                    "lazyLists`Private`parsedSpec"}], "]"}], "/;", 
                    RowBox[{
                    RowBox[{
                    "lazyLists`Private`parsedSpec", "=!=", "$Failed"}], "&&", 
                    RowBox[{
                    "lazyLists`Private`parsedSpec", "=!=", 
                    "lazyLists`Private`spec"}]}]}]}], "]"}]}]},
                    {
                    RowBox[{"partitionedLazyList", "/:", 
                    RowBox[{"Take", "[", 
                    RowBox[{
                    RowBox[{"lazyLists`Private`lz", ":", 
                    RowBox[{"partitionedLazyList", "[", 
                    RowBox[{"_List", ",", "_"}], "]"}]}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"lazyLists`Private`start", ":", 
                    RowBox[{"Except", "[", 
                    RowBox[{"1", ",", 
                    RowBox[{"_Integer", "?", "Positive"}]}], "]"}]}], ",", 
                    RowBox[{"lazyLists`Private`stop", ":", 
                    RowBox[{
                    RowBox[{"_Integer", "?", "Positive"}], "|", "All"}]}], 
                    ",", 
                    RowBox[{
                    "lazyLists`Private`step_Integer", "?", "Positive"}]}], 
                    "}"}]}], "]"}], ":=", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"lazyLists`Private`advancedLz", "=", 
                    RowBox[{"Quiet", "[", 
                    RowBox[{
                    RowBox[{"lazyLists`Private`lz", "\[LeftDoubleBracket]", 
                    RowBox[{"{", "lazyLists`Private`start", "}"}], 
                    "\[RightDoubleBracket]"}], ",", 
                    RowBox[{"{", 
                    StyleBox[
                    RowBox[{"Part", "::", "partw"}], "MessageName"], "}"}]}], 
                    "]"}]}], "}"}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"MatchQ", "[", 
                    RowBox[{
                    "lazyLists`Private`advancedLz", ",", 
                    "lazyLists`Private`validPartitionedLazyListPattern"}], 
                    "]"}], ",", 
                    RowBox[{"Take", "[", 
                    RowBox[{"lazyLists`Private`advancedLz", ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", 
                    RowBox[{"Replace", "[", 
                    RowBox[{"lazyLists`Private`stop", ",", 
                    RowBox[{"{", 
                    RowBox[{"lazyLists`Private`int_Integer", "\[RuleDelayed]", 
                    RowBox[{
                    "lazyLists`Private`int", "-", "lazyLists`Private`start", 
                    "+", "1"}]}], "}"}]}], "]"}], ",", 
                    "lazyLists`Private`step"}], "}"}]}], "]"}], ",", 
                    RowBox[{"lazyList", "[", "]"}]}], "]"}]}], "]"}]}]},
                    {
                    RowBox[{"partitionedLazyList", "/:", 
                    RowBox[{"Take", "[", 
                    RowBox[{
                    RowBox[{"lazyLists`Private`partLz", ":", 
                    RowBox[{"partitionedLazyList", "[", 
                    RowBox[{"_List", ",", "_"}], "]"}]}], ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", 
                    RowBox[{"lazyLists`Private`n", ":", 
                    RowBox[{
                    RowBox[{"_Integer", "?", "Positive"}], "|", "All"}]}], 
                    ",", 
                    RowBox[{
                    "lazyLists`Private`step_Integer", "?", "Positive"}]}], 
                    "}"}]}], "]"}], ":=", 
                    RowBox[{"partitionedLazyList", "@@", 
                    RowBox[{"MapAt", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Catenate", "[", 
                    RowBox[{"First", "[", 
                    RowBox[{"#1", ",", 
                    RowBox[{"{", "}"}]}], "]"}], "]"}], "&"}], ",", 
                    RowBox[{
                    RowBox[{"Reap", "[", 
                    RowBox[{
                    RowBox[{"Catch", "[", 
                    RowBox[{
                    RowBox[{"Block", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"$IterationLimit", "=", "$lazyIterationLimit"}], 
                    ",", 
                    RowBox[{
                    "lazyLists`Private`count", "=", "lazyLists`Private`n"}], 
                    ",", 
                    RowBox[{"lazyLists`Private`offset", "=", "0"}], ",", 
                    "lazyLists`Private`result", ",", "lazyLists`Private`take",
                     ",", "lazyLists`Private`len"}], "}"}], ",", 
                    RowBox[{"ReplaceRepeated", "[", 
                    RowBox[{"lazyLists`Private`partLz", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"lazyList", "[", "]"}], "\[RuleDelayed]", 
                    RowBox[{"Throw", "[", 
                    RowBox[{
                    RowBox[{"lazyList", "[", "]"}], 
                    ",", "\<\"takePartitioned\"\>"}], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"partitionedLazyList", "[", 
                    RowBox[{
                    RowBox[{"lazyLists`Private`l", ":", 
                    RowBox[{"Except", "[", "_List", "]"}]}], ",", "_"}], 
                    "]"}], "\[RuleDelayed]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"partitionedLazyList", "::", "cannotPartition"}], 
                    "MessageName"], ",", 
                    RowBox[{"Short", "[", "lazyLists`Private`l", "]"}]}], 
                    "]"}], ";", 
                    RowBox[{"lazyList", "[", "]"}]}], ")"}]}], ",", 
                    RowBox[{"Switch", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "lazyLists`Private`n", ",", "lazyLists`Private`step"}], 
                    "}"}], ",", "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{"All", ",", "1"}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"partitionedLazyList", "[", 
                    RowBox[{
                    "lazyLists`Private`list_List", ",", 
                    "lazyLists`Private`tail_"}], "]"}], "\[RuleDelayed]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sow", "[", 
                    RowBox[{
                    "lazyLists`Private`list", ",", "\<\"results\"\>"}], "]"}],
                     ";", "lazyLists`Private`tail"}], ")"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{"All", ",", "_"}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"partitionedLazyList", "[", 
                    RowBox[{
                    "lazyLists`Private`list_List", ",", 
                    "lazyLists`Private`tail_"}], "]"}], "\[RuleDelayed]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Length", "[", "lazyLists`Private`list", "]"}], 
                    ">", "lazyLists`Private`offset"}], ",", 
                    RowBox[{"Sow", "[", 
                    RowBox[{
                    RowBox[{"lazyLists`Private`list", "\[LeftDoubleBracket]", 
                    RowBox[{
                    RowBox[{"1", "+", "lazyLists`Private`offset"}], ";;", 
                    "All", ";;", "lazyLists`Private`step"}], 
                    "\[RightDoubleBracket]"}], ",", "\<\"results\"\>"}], 
                    "]"}]}], "]"}], ";", 
                    RowBox[{"lazyLists`Private`offset", "=", 
                    RowBox[{"Mod", "[", 
                    RowBox[{
                    RowBox[{"lazyLists`Private`offset", "-", 
                    RowBox[{"Length", "[", "lazyLists`Private`list", "]"}]}], 
                    ",", "lazyLists`Private`step"}], "]"}]}], ";", 
                    "lazyLists`Private`tail"}], ")"}]}], ",", 
                    "\[IndentingNewLine]", 
                    RowBox[{"{", 
                    RowBox[{"_", ",", "1"}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"partitionedLazyList", "[", 
                    RowBox[{
                    RowBox[{"lazyLists`Private`list_List", "?", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"lazyLists`Private`len", "=", 
                    RowBox[{"Length", "[", "#1", "]"}]}], ")"}], "<", 
                    "lazyLists`Private`count"}], "&"}], ")"}]}], ",", 
                    "lazyLists`Private`tail_"}], "]"}], "\[RuleDelayed]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sow", "[", 
                    RowBox[{
                    "lazyLists`Private`list", ",", "\<\"results\"\>"}], "]"}],
                     ";", 
                    RowBox[{
                    "lazyLists`Private`count", "-=", 
                    "lazyLists`Private`len"}], ";", 
                    "lazyLists`Private`tail"}], ")"}]}], ",", 
                    "\[IndentingNewLine]", "_", ",", 
                    RowBox[{
                    RowBox[{"partitionedLazyList", "[", 
                    RowBox[{
                    RowBox[{"lazyLists`Private`list_List", "?", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"lazyLists`Private`len", "=", 
                    RowBox[{"Length", "[", "#1", "]"}]}], ")"}], "<", 
                    "lazyLists`Private`count"}], "&"}], ")"}]}], ",", 
                    "lazyLists`Private`tail_"}], "]"}], "\[RuleDelayed]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"TrueQ", "[", 
                    RowBox[{
                    "lazyLists`Private`len", ">", 
                    "lazyLists`Private`offset"}], "]"}], ",", 
                    RowBox[{"Sow", "[", 
                    RowBox[{
                    RowBox[{"lazyLists`Private`list", "\[LeftDoubleBracket]", 
                    RowBox[{
                    RowBox[{"1", "+", "lazyLists`Private`offset"}], ";;", 
                    "All", ";;", "lazyLists`Private`step"}], 
                    "\[RightDoubleBracket]"}], ",", "\<\"results\"\>"}], 
                    "]"}]}], "]"}], ";", 
                    RowBox[{
                    "lazyLists`Private`count", "-=", 
                    "lazyLists`Private`len"}], ";", 
                    RowBox[{"lazyLists`Private`offset", "=", 
                    RowBox[{"Mod", "[", 
                    RowBox[{
                    RowBox[{
                    "lazyLists`Private`offset", "-", 
                    "lazyLists`Private`len"}], ",", 
                    "lazyLists`Private`step"}], "]"}]}], ";", 
                    "lazyLists`Private`tail"}], ")"}]}]}], "]"}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"lazyLists`Private`n", "===", "All"}], ",", 
                    "Nothing", ",", 
                    RowBox[{
                    RowBox[{"partitionedLazyList", "[", 
                    RowBox[{
                    "lazyLists`Private`list_List", ",", 
                    "lazyLists`Private`tail_"}], "]"}], "\[RuleDelayed]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sow", "[", 
                    RowBox[{
                    RowBox[{"lazyLists`Private`list", "\[LeftDoubleBracket]", 
                    RowBox[{
                    RowBox[{"1", "+", "lazyLists`Private`offset"}], ";;", 
                    "lazyLists`Private`count", ";;", 
                    "lazyLists`Private`step"}], "\[RightDoubleBracket]"}], 
                    ",", "\<\"results\"\>"}], "]"}], ";", 
                    RowBox[{"Throw", "[", 
                    RowBox[{
                    RowBox[{"partitionedLazyList", "[", 
                    RowBox[{
                    RowBox[{"Drop", "[", 
                    RowBox[{
                    "lazyLists`Private`list", ",", 
                    "lazyLists`Private`count"}], "]"}], ",", 
                    "lazyLists`Private`tail"}], "]"}], 
                    ",", "\<\"takePartitioned\"\>"}], "]"}]}], ")"}]}]}], 
                    "]"}]}], "}"}], ",", 
                    RowBox[{"MaxIterations", "\[Rule]", "\[Infinity]"}]}], 
                    "]"}]}], "]"}], ",", "\<\"takePartitioned\"\>"}], "]"}], 
                    ",", "\<\"results\"\>"}], "]"}], "\[LeftDoubleBracket]", 
                    RowBox[{"{", 
                    RowBox[{"2", ",", "1"}], "}"}], "\[RightDoubleBracket]"}],
                     ",", "1"}], "]"}]}]}]},
                    {
                    RowBox[{
                    RowBox[{"TakeWhile", "[", 
                    RowBox[{
                    RowBox[{"lazyLists`Private`partLz", ":", 
                    RowBox[{"partitionedLazyList", "[", 
                    RowBox[{"_List", ",", "_"}], "]"}]}], ",", 
                    RowBox[{"lazyLists`Private`function_", ":", 
                    RowBox[{"(", 
                    RowBox[{"True", "&"}], ")"}]}], ",", 
                    RowBox[{"lazyLists`Private`opts", ":", 
                    RowBox[{"OptionsPattern", "[", 
                    RowBox[{"MaxIterations", "\[Rule]", "\[Infinity]"}], 
                    "]"}]}]}], "]"}], "^:=", 
                    RowBox[{"partitionedLazyList", "@@", 
                    RowBox[{"MapAt", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Catenate", "[", 
                    RowBox[{"First", "[", 
                    RowBox[{"#1", ",", 
                    RowBox[{"{", "}"}]}], "]"}], "]"}], "&"}], ",", 
                    RowBox[{"Reverse", "[", 
                    RowBox[{"Reap", "[", 
                    RowBox[{
                    RowBox[{"Quiet", "[", 
                    RowBox[{
                    RowBox[{"Catch", "[", 
                    RowBox[{
                    RowBox[{"Block", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"$IterationLimit", "=", "$lazyIterationLimit"}], 
                    ",", "lazyLists`Private`first", ",", 
                    "lazyLists`Private`ind"}], "}"}], ",", 
                    RowBox[{"ReplaceRepeated", "[", 
                    RowBox[{"lazyLists`Private`partLz", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"lazyLists`Private`function", "===", 
                    RowBox[{"(", 
                    RowBox[{"True", "&"}], ")"}]}], ",", 
                    RowBox[{
                    RowBox[{"partitionedLazyList", "[", 
                    RowBox[{
                    "lazyLists`Private`list_List", ",", 
                    "lazyLists`Private`tail_"}], "]"}], "\[RuleDelayed]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Sow", "[", 
                    RowBox[{
                    "lazyLists`Private`list", ",", "\<\"partTakeWhile\"\>"}], 
                    "]"}], ";", "lazyLists`Private`tail"}], ")"}]}], ",", 
                    RowBox[{
                    RowBox[{"partitionedLazyList", "[", 
                    RowBox[{
                    "lazyLists`Private`list_List", ",", 
                    "lazyLists`Private`tail_"}], "]"}], "\[RuleDelayed]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"lazyLists`Private`ind", "=", 
                    RowBox[{"LengthWhile", "[", 
                    RowBox[{
                    "lazyLists`Private`list", ",", 
                    "lazyLists`Private`function"}], "]"}]}], ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"lazyLists`Private`ind", "===", 
                    RowBox[{"Length", "[", "lazyLists`Private`list", "]"}]}], 
                    ",", 
                    RowBox[{
                    RowBox[{"Sow", "[", 
                    RowBox[{
                    "lazyLists`Private`list", ",", "\<\"partTakeWhile\"\>"}], 
                    "]"}], ";", "lazyLists`Private`tail"}], ",", 
                    RowBox[{
                    RowBox[{"Sow", "[", 
                    RowBox[{
                    RowBox[{"Take", "[", 
                    RowBox[{
                    "lazyLists`Private`list", ",", "lazyLists`Private`ind"}], 
                    "]"}], ",", "\<\"partTakeWhile\"\>"}], "]"}], ";", 
                    RowBox[{"Throw", "[", 
                    RowBox[{
                    RowBox[{"partitionedLazyList", "[", 
                    RowBox[{
                    RowBox[{"Drop", "[", 
                    RowBox[{
                    "lazyLists`Private`list", ",", "lazyLists`Private`ind"}], 
                    "]"}], ",", "lazyLists`Private`tail"}], "]"}], 
                    ",", "\<\"takeWhile\"\>"}], "]"}]}]}], "]"}]}], ")"}]}]}],
                     "]"}], ",", 
                    RowBox[{"lazyLists`Private`other_", "\[RuleDelayed]", 
                    RowBox[{"Throw", "[", 
                    RowBox[{
                    "lazyLists`Private`other", ",", "\<\"takeWhile\"\>"}], 
                    "]"}]}]}], "}"}], ",", 
                    RowBox[{"MaxIterations", "\[Rule]", 
                    RowBox[{"OptionValue", "[", "MaxIterations", "]"}]}]}], 
                    "]"}]}], "]"}], ",", "\<\"takeWhile\"\>"}], "]"}], ",", 
                    RowBox[{"{", 
                    StyleBox[
                    RowBox[{"ReplaceRepeated", "::", "rrlim"}], "MessageName"],
                     "}"}]}], "]"}], ",", "\<\"partTakeWhile\"\>"}], "]"}], 
                    "]"}], ",", "1"}], "]"}]}]}]},
                    {
                    RowBox[{
                    RowBox[{"LengthWhile", "[", 
                    RowBox[{
                    RowBox[{"lazyLists`Private`lz", ":", 
                    RowBox[{"partitionedLazyList", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"___", ",", "lazyLists`Private`el_"}], "}"}], ",",
                     "_"}], "]"}]}], ",", 
                    RowBox[{"lazyLists`Private`function_", ":", 
                    RowBox[{"(", 
                    RowBox[{"True", "&"}], ")"}]}], ",", 
                    RowBox[{"lazyLists`Private`opts", ":", 
                    RowBox[{"OptionsPattern", "[", 
                    RowBox[{"MaxIterations", "\[Rule]", "\[Infinity]"}], 
                    "]"}]}]}], "]"}], "^:=", 
                    RowBox[{"Quiet", "[", 
                    RowBox[{
                    RowBox[{"Block", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"$IterationLimit", "=", "$lazyIterationLimit"}], 
                    ",", 
                    RowBox[{"lazyLists`Private`count", "=", "0"}], ",", 
                    "lazyLists`Private`ind"}], "}"}], ",", 
                    RowBox[{"Replace", "[", 
                    RowBox[{
                    RowBox[{"Catch", "[", 
                    RowBox[{
                    RowBox[{"ReplaceRepeated", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "lazyLists`Private`lz", ",", "lazyLists`Private`el"}], 
                    "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"lazyLists`Private`function", "===", 
                    RowBox[{"(", 
                    RowBox[{"True", "&"}], ")"}]}], ",", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"partitionedLazyList", "[", 
                    RowBox[{
                    RowBox[{"lazyLists`Private`list", ":", 
                    RowBox[{"{", 
                    RowBox[{"___", ",", "lazyLists`Private`elem_"}], "}"}]}], 
                    ",", "lazyLists`Private`tail_"}], "]"}], ",", 
                    "lazyLists`Private`prev_"}], "}"}], "\[RuleDelayed]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"lazyLists`Private`count", "+=", 
                    RowBox[{"Length", "[", "lazyLists`Private`list", "]"}]}], 
                    ";", 
                    RowBox[{"{", 
                    RowBox[{
                    "lazyLists`Private`tail", ",", "lazyLists`Private`elem"}],
                     "}"}]}], ")"}]}], ",", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"partitionedLazyList", "[", 
                    RowBox[{
                    RowBox[{"lazyLists`Private`list", ":", 
                    RowBox[{"{", 
                    RowBox[{"___", ",", "lazyLists`Private`elem_"}], "}"}]}], 
                    ",", "lazyLists`Private`tail_"}], "]"}], ",", 
                    "lazyLists`Private`prev_"}], "}"}], "\[RuleDelayed]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"lazyLists`Private`count", "+=", 
                    RowBox[{"(", 
                    RowBox[{"lazyLists`Private`ind", "=", 
                    RowBox[{"LengthWhile", "[", 
                    RowBox[{
                    "lazyLists`Private`list", ",", 
                    "lazyLists`Private`function"}], "]"}]}], ")"}]}], ";", 
                    RowBox[{"Switch", "[", 
                    RowBox[{
                    "lazyLists`Private`ind", ",", "\[IndentingNewLine]", 
                    RowBox[{"Length", "[", "lazyLists`Private`list", "]"}], 
                    ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "lazyLists`Private`tail", ",", "lazyLists`Private`elem"}],
                     "}"}], ",", "\[IndentingNewLine]", "0", ",", 
                    RowBox[{"Throw", "[", 
                    RowBox[{
                    RowBox[{"partitionedLazyList", "[", 
                    RowBox[{
                    RowBox[{"{", "lazyLists`Private`prev", "}"}], ",", 
                    "lazyLists`Private`tail"}], "]"}], 
                    ",", "\<\"lengthWhile\"\>"}], "]"}], ",", 
                    "\[IndentingNewLine]", "_", ",", 
                    RowBox[{"Throw", "[", 
                    RowBox[{
                    RowBox[{"partitionedLazyList", "[", 
                    RowBox[{
                    RowBox[{"Drop", "[", 
                    RowBox[{"lazyLists`Private`list", ",", 
                    RowBox[{"lazyLists`Private`ind", "-", "1"}]}], "]"}], ",",
                     "lazyLists`Private`tail"}], "]"}], 
                    ",", "\<\"lengthWhile\"\>"}], "]"}]}], "]"}]}], ")"}]}]}],
                     "]"}], ",", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "lazyLists`Private`other_", ",", 
                    "lazyLists`Private`prev_"}], "}"}], "\[RuleDelayed]", 
                    RowBox[{"Throw", "[", 
                    RowBox[{
                    RowBox[{"partitionedLazyList", "[", 
                    RowBox[{
                    RowBox[{"{", "lazyLists`Private`prev", "}"}], ",", 
                    "lazyLists`Private`other"}], "]"}], 
                    ",", "\<\"lengthWhile\"\>"}], "]"}]}]}], "}"}], ",", 
                    RowBox[{"MaxIterations", "\[Rule]", 
                    RowBox[{"OptionValue", "[", "MaxIterations", "]"}]}]}], 
                    "]"}], ",", "\<\"lengthWhile\"\>"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "lazyLists`Private`l", ":", 
                    "lazyLists`Private`validPartitionedLazyListPattern"}], 
                    ",", "lazyLists`Private`prev_"}], "}"}], "\[RuleDelayed]", 
                    RowBox[{"Association", "[", 
                    RowBox[{
                    RowBox[{"\<\"Index\"\>", "\[Rule]", "\[Infinity]"}], ",", 
                    
                    RowBox[{"\<\"Element\"\>", "\[Rule]", 
                    "lazyLists`Private`l"}]}], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{
                    "lazyLists`Private`l", ":", 
                    "lazyLists`Private`validPartitionedLazyListPattern"}], 
                    "\[RuleDelayed]", 
                    RowBox[{"Association", "[", 
                    RowBox[{
                    
                    RowBox[{"\<\"Index\"\>", "\[Rule]", 
                    "lazyLists`Private`count"}], ",", 
                    
                    RowBox[{"\<\"Element\"\>", "\[Rule]", 
                    "lazyLists`Private`l"}]}], "]"}]}]}], "}"}]}], "]"}]}], 
                    "]"}], ",", 
                    RowBox[{"{", 
                    StyleBox[
                    RowBox[{"ReplaceRepeated", "::", "rrlim"}], "MessageName"],
                     "}"}]}], "]"}]}]},
                    {
                    RowBox[{"partitionedLazyList", "/:", 
                    RowBox[{"_partitionedLazyList", "\[LeftDoubleBracket]", 
                    RowBox[{
                    RowBox[{"{", "0", "}"}], "|", "0"}], 
                    "\[RightDoubleBracket]"}], ":=", "partitionedLazyList"}]},
                    {
                    RowBox[{"partitionedLazyList", "/:", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"lazyLists`Private`partLz", ":", 
                    RowBox[{"partitionedLazyList", "[", 
                    RowBox[{"_List", ",", "_"}], "]"}]}], ")"}], 
                    "\[LeftDoubleBracket]", "1", "\[RightDoubleBracket]"}], ":=", 
                    RowBox[{"First", "[", "lazyLists`Private`partLz", "]"}]}]},
                    {
                    RowBox[{"partitionedLazyList", "/:", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"lazyLists`Private`partLz", ":", 
                    RowBox[{"partitionedLazyList", "[", 
                    RowBox[{"_List", ",", "_"}], "]"}]}], ")"}], 
                    "\[LeftDoubleBracket]", 
                    RowBox[{"{", "1", "}"}], "\[RightDoubleBracket]"}], ":=", 
                    "lazyLists`Private`partLz"}]},
                    {
                    RowBox[{"partitionedLazyList", "/:", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"lazyLists`Private`partLz", ":", 
                    RowBox[{"partitionedLazyList", "[", 
                    RowBox[{"_List", ",", "_"}], "]"}]}], ")"}], 
                    "\[LeftDoubleBracket]", 
                    RowBox[{"lazyLists`Private`n", ":", 
                    RowBox[{
                    RowBox[{"_Integer", "?", "Positive"}], "|", 
                    RowBox[{"-", "1"}]}]}], "\[RightDoubleBracket]"}], ":=", 
                    RowBox[{"First", "[", 
                    RowBox[{
                    RowBox[{
                    "lazyLists`Private`partLz", "\[LeftDoubleBracket]", 
                    RowBox[{"{", "lazyLists`Private`n", "}"}], 
                    "\[RightDoubleBracket]"}], ",", "$Failed"}], "]"}]}]},
                    {
                    RowBox[{"partitionedLazyList", "/:", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"partitionedLazyList", "[", 
                    RowBox[{
                    RowBox[{"lazyLists`Private`list", ":", 
                    RowBox[{"{", 
                    RowBox[{"_", ",", "___"}], "}"}]}], ",", 
                    "lazyLists`Private`tail_"}], "]"}], 
                    "\[LeftDoubleBracket]", 
                    RowBox[{"{", 
                    RowBox[{"lazyLists`Private`n_Integer", "?", "Positive"}], 
                    "}"}], "\[RightDoubleBracket]"}], "/;", 
                    RowBox[{"lazyLists`Private`n", "\[LessEqual]", 
                    RowBox[{
                    "Length", "[", "lazyLists`Private`list", "]"}]}]}], ":=", 
                    RowBox[{"partitionedLazyList", "[", 
                    RowBox[{
                    RowBox[{"Drop", "[", 
                    RowBox[{"lazyLists`Private`list", ",", 
                    RowBox[{"lazyLists`Private`n", "-", "1"}]}], "]"}], ",", 
                    "lazyLists`Private`tail"}], "]"}]}]},
                    {
                    RowBox[{"partitionedLazyList", "/:", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"lazyLists`Private`lz", ":", 
                    RowBox[{"partitionedLazyList", "[", 
                    RowBox[{"_List", ",", "_"}], "]"}]}], ")"}], 
                    "\[LeftDoubleBracket]", 
                    RowBox[{"{", 
                    RowBox[{"-", "1"}], "}"}], "\[RightDoubleBracket]"}], ":=", 
                    RowBox[{"Replace", "[", 
                    RowBox[{
                    RowBox[{"LengthWhile", "[", 
                    RowBox[{"lazyLists`Private`lz", ",", 
                    RowBox[{"True", "&"}]}], "]"}], ",", 
                    RowBox[{
                    RowBox[{"KeyValuePattern", "[", 
                    
                    RowBox[{"\<\"Element\"\>", "\[Rule]", 
                    "lazyLists`Private`el_"}], "]"}], "\[RuleDelayed]", 
                    "lazyLists`Private`el"}]}], "]"}]}]},
                    {
                    RowBox[{"partitionedLazyList", "/:", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"lazyLists`Private`partLz", ":", 
                    RowBox[{"partitionedLazyList", "[", 
                    RowBox[{"_List", ",", "_"}], "]"}]}], ")"}], 
                    "\[LeftDoubleBracket]", "lazyLists`Private`span_Span", 
                    "\[RightDoubleBracket]"}], ":=", 
                    RowBox[{"Take", "[", 
                    RowBox[{"lazyLists`Private`partLz", ",", 
                    RowBox[{"List", "@@", "lazyLists`Private`span"}]}], 
                    "]"}]}]},
                    {
                    RowBox[{"partitionedLazyList", "/:", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"lazyLists`Private`partLz", ":", 
                    RowBox[{"partitionedLazyList", "[", 
                    RowBox[{"_List", ",", "_"}], "]"}]}], ")"}], 
                    "\[LeftDoubleBracket]", 
                    RowBox[{"{", 
                    RowBox[{"lazyLists`Private`n_Integer", "?", "Positive"}], 
                    "}"}], "\[RightDoubleBracket]"}], ":=", 
                    RowBox[{"Catch", "[", 
                    RowBox[{
                    RowBox[{"Block", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"$IterationLimit", "=", "$lazyIterationLimit"}], 
                    ",", 
                    RowBox[{
                    "lazyLists`Private`count", "=", "lazyLists`Private`n"}], 
                    ",", "lazyLists`Private`length"}], "}"}], ",", 
                    RowBox[{"ReplaceRepeated", "[", 
                    RowBox[{"lazyLists`Private`partLz", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"lazyList", "[", "]"}], "\[RuleDelayed]", 
                    RowBox[{"Throw", "[", 
                    RowBox[{
                    RowBox[{"lazyList", "[", "]"}], 
                    ",", "\<\"partPartitioned\"\>"}], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{"partitionedLazyList", "[", 
                    RowBox[{
                    RowBox[{"lazyLists`Private`l", ":", 
                    RowBox[{"Except", "[", "_List", "]"}]}], ",", "_"}], 
                    "]"}], "\[RuleDelayed]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"partitionedLazyList", "::", "cannotPartition"}], 
                    "MessageName"], ",", 
                    RowBox[{"Short", "[", "lazyLists`Private`l", "]"}]}], 
                    "]"}], ";", 
                    RowBox[{"lazyList", "[", "]"}]}], ")"}]}], ",", 
                    RowBox[{
                    RowBox[{"partitionedLazyList", "[", 
                    RowBox[{
                    RowBox[{"lazyLists`Private`list_List", "?", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"lazyLists`Private`length", "=", 
                    RowBox[{"Length", "[", "#1", "]"}]}], ")"}], "<", 
                    "lazyLists`Private`count"}], "&"}], ")"}]}], ",", 
                    "lazyLists`Private`tail_"}], "]"}], "\[RuleDelayed]", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    "lazyLists`Private`count", "-=", 
                    "lazyLists`Private`length"}], ";", 
                    "lazyLists`Private`tail"}], ")"}]}], ",", 
                    RowBox[{
                    RowBox[{"partitionedLazyList", "[", 
                    RowBox[{
                    "lazyLists`Private`l_List", ",", 
                    "lazyLists`Private`tail_"}], "]"}], "\[RuleDelayed]", 
                    RowBox[{"Throw", "[", 
                    RowBox[{
                    RowBox[{"partitionedLazyList", "[", 
                    RowBox[{
                    RowBox[{"lazyLists`Private`l", "\[LeftDoubleBracket]", 
                    RowBox[{"{", "lazyLists`Private`count", "}"}], 
                    "\[RightDoubleBracket]"}], ",", 
                    RowBox[{"Evaluate", "[", 
                    RowBox[{"partitionedLazyList", "[", 
                    RowBox[{
                    RowBox[{"Drop", "[", 
                    RowBox[{
                    "lazyLists`Private`l", ",", "lazyLists`Private`count"}], 
                    "]"}], ",", "lazyLists`Private`tail"}], "]"}], "]"}]}], 
                    "]"}], ",", "\<\"partPartitioned\"\>"}], "]"}]}]}], "}"}],
                     ",", 
                    RowBox[{"MaxIterations", "\[Rule]", "\[Infinity]"}]}], 
                    "]"}]}], "]"}], ",", "\<\"partPartitioned\"\>"}], "]"}]}]},
                    {
                    RowBox[{"partitionedLazyList", "/:", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"lazyLists`Private`lz", ":", 
                    RowBox[{"partitionedLazyList", "[", 
                    RowBox[{"_List", ",", "_"}], "]"}]}], ")"}], 
                    "\[LeftDoubleBracket]", 
                    RowBox[{"lazyLists`Private`indices", ":", 
                    RowBox[{"{", 
                    RowBox[{"_Integer", ",", "__Integer"}], "}"}]}], 
                    "\[RightDoubleBracket]"}], "/;", 
                    RowBox[{"VectorQ", "[", 
                    RowBox[{"lazyLists`Private`indices", ",", "Positive"}], 
                    "]"}]}], ":=", 
                    RowBox[{"Catch", "[", 
                    RowBox[{
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"lazyLists`Private`sortedIndices", "=", 
                    RowBox[{"Sort", "[", "lazyLists`Private`indices", "]"}]}],
                     ",", "lazyLists`Private`eval"}], "}"}], ",", 
                    RowBox[{"partitionedLazyList", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"FoldPairList", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"lazyLists`Private`eval", "=", 
                    RowBox[{"Check", "[", 
                    RowBox[{
                    RowBox[{"#1", "\[LeftDoubleBracket]", 
                    RowBox[{"{", "#2", "}"}], "\[RightDoubleBracket]"}], ",", 
                    RowBox[{"Throw", "[", 
                    RowBox[{"$Failed", ",", "\<\"part\"\>"}], "]"}], ",", 
                    RowBox[{"{", 
                    StyleBox[
                    RowBox[{"Part", "::", "partw"}], "MessageName"], "}"}]}], 
                    "]"}]}], ";", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"First", "[", "lazyLists`Private`eval", "]"}], 
                    ",", "lazyLists`Private`eval"}], "}"}]}], ")"}], "&"}], 
                    ",", "lazyLists`Private`lz", ",", 
                    RowBox[{"Prepend", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    "Differences", "[", "lazyLists`Private`sortedIndices", 
                    "]"}], "+", "1"}], ",", 
                    RowBox[{
                    "First", "[", "lazyLists`Private`sortedIndices", "]"}]}], 
                    "]"}]}], "]"}], "\[LeftDoubleBracket]", 
                    RowBox[{
                    "Ordering", "[", "lazyLists`Private`indices", "]"}], 
                    "\[RightDoubleBracket]"}], ",", 
                    RowBox[{
                    "Evaluate", "[", "lazyLists`Private`eval", "]"}]}], 
                    "]"}]}], "]"}], ",", "\<\"part\"\>"}], "]"}]}]},
                    {
                    RowBox[{"partitionedLazyList", "/:", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"lazyLists`Private`fun_", ",", "Listable"}], 
                    "}"}], "/@", 
                    RowBox[{"partitionedLazyList", "[", 
                    RowBox[{
                    "lazyLists`Private`first_", ",", 
                    "lazyLists`Private`tail_"}], "]"}]}], ":=", 
                    RowBox[{"partitionedLazyList", "[", 
                    RowBox[{
                    RowBox[{
                    "lazyLists`Private`fun", "[", "lazyLists`Private`first", 
                    "]"}], ",", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"lazyLists`Private`fun", ",", "Listable"}], "}"}],
                     "/@", "lazyLists`Private`tail"}]}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"lazyLists`Private`fun_", "/@", 
                    RowBox[{"partitionedLazyList", "[", 
                    RowBox[{
                    "lazyLists`Private`first_", ",", 
                    "lazyLists`Private`tail_"}], "]"}]}], "^:=", 
                    RowBox[{"partitionedLazyList", "[", 
                    RowBox[{
                    RowBox[{
                    "lazyLists`Private`fun", "/@", 
                    "lazyLists`Private`first"}], ",", 
                    RowBox[{
                    "lazyLists`Private`fun", "/@", 
                    "lazyLists`Private`tail"}]}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"MapIndexed", "[", 
                    RowBox[{"lazyLists`Private`fun_", ",", 
                    RowBox[{"partitionedLazyList", "[", 
                    RowBox[{
                    "lazyLists`Private`first_", ",", 
                    "lazyLists`Private`tail_"}], "]"}], ",", 
                    RowBox[{"lazyLists`Private`index", ":", 
                    RowBox[{"_Integer", "?", "Positive"}], ":", "1"}]}], 
                    "]"}], "^:=", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"lazyLists`Private`length", "=", 
                    RowBox[{"Length", "[", "lazyLists`Private`first", "]"}]}],
                     "}"}], ",", 
                    RowBox[{"partitionedLazyList", "[", 
                    RowBox[{
                    RowBox[{"MapThread", "[", 
                    RowBox[{"lazyLists`Private`fun", ",", 
                    RowBox[{"{", 
                    RowBox[{"lazyLists`Private`first", ",", 
                    RowBox[{
                    RowBox[{"Range", "[", "lazyLists`Private`length", "]"}], 
                    "+", "lazyLists`Private`index", "-", "1"}]}], "}"}]}], 
                    "]"}], ",", 
                    RowBox[{"MapIndexed", "[", 
                    RowBox[{
                    "lazyLists`Private`fun", ",", "lazyLists`Private`tail", 
                    ",", 
                    RowBox[{
                    "lazyLists`Private`index", "+", 
                    "lazyLists`Private`length"}]}], "]"}]}], "]"}]}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"FoldList", "[", 
                    RowBox[{"lazyLists`Private`fun_", ",", 
                    RowBox[{"partitionedLazyList", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "lazyLists`Private`elem_", ",", 
                    "lazyLists`Private`rest___"}], "}"}], ",", 
                    "lazyLists`Private`tail_"}], "]"}]}], "]"}], "^:=", 
                    RowBox[{"FoldList", "[", 
                    RowBox[{
                    "lazyLists`Private`fun", ",", "lazyLists`Private`elem", 
                    ",", 
                    RowBox[{"partitionedLazyList", "[", 
                    RowBox[{
                    RowBox[{"{", "lazyLists`Private`rest", "}"}], ",", 
                    "lazyLists`Private`tail"}], "]"}]}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"FoldList", "[", 
                    RowBox[{
                    "lazyLists`Private`fun_", ",", 
                    "lazyLists`Private`current_", ",", 
                    RowBox[{"partitionedLazyList", "[", 
                    RowBox[{
                    "lazyLists`Private`first_List", ",", 
                    "lazyLists`Private`tail_"}], "]"}]}], "]"}], "^:=", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"lazyLists`Private`fold", "=", 
                    RowBox[{"FoldList", "[", 
                    RowBox[{
                    "lazyLists`Private`fun", ",", "lazyLists`Private`current",
                     ",", "lazyLists`Private`first"}], "]"}]}], "}"}], ",", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "lazyLists`Private`newTail", "=", 
                    "lazyLists`Private`tail"}], "}"}], ",", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"lazyLists`Private`newTail", "===", 
                    RowBox[{"lazyList", "[", "]"}]}], ",", 
                    RowBox[{"partitionedLazyList", "[", 
                    RowBox[{"lazyLists`Private`fold", ",", 
                    RowBox[{"lazyList", "[", "]"}]}], "]"}], ",", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"lazyLists`Private`last", "=", 
                    RowBox[{"Last", "[", "lazyLists`Private`fold", "]"}]}], 
                    "}"}], ",", 
                    RowBox[{"partitionedLazyList", "[", 
                    RowBox[{
                    RowBox[{"Most", "[", "lazyLists`Private`fold", "]"}], ",", 
                    RowBox[{"FoldList", "[", 
                    RowBox[{
                    "lazyLists`Private`fun", ",", "lazyLists`Private`last", 
                    ",", "lazyLists`Private`newTail"}], "]"}]}], "]"}]}], 
                    "]"}]}], "]"}]}], "]"}]}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"FoldPairList", "[", 
                    RowBox[{
                    "lazyLists`Private`fun_", ",", 
                    "lazyLists`Private`current_", ",", 
                    RowBox[{"partitionedLazyList", "[", 
                    RowBox[{
                    "lazyLists`Private`first_List", ",", 
                    "lazyLists`Private`tail_"}], "]"}], ",", 
                    RowBox[{"lazyLists`Private`g_", ":", "First"}]}], "]"}], "^:=", 
                    RowBox[{"Block", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "lazyLists`Private`state", ",", 
                    "lazyLists`Private`fold"}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"lazyLists`Private`fold", "=", 
                    RowBox[{"FoldPairList", "[", 
                    RowBox[{
                    "lazyLists`Private`fun", ",", "lazyLists`Private`current",
                     ",", "lazyLists`Private`first", ",", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"lazyLists`Private`state", "=", 
                    RowBox[{"Last", "[", "#1", "]"}]}], ";", 
                    RowBox[{"lazyLists`Private`g", "[", "#1", "]"}]}], ")"}], 
                    "&"}]}], "]"}]}], ";", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "lazyLists`Private`st", "=", "lazyLists`Private`state"}], 
                    "}"}], ",", 
                    RowBox[{"partitionedLazyList", "[", 
                    RowBox[{"lazyLists`Private`fold", ",", 
                    RowBox[{"FoldPairList", "[", 
                    RowBox[{
                    "lazyLists`Private`fun", ",", "lazyLists`Private`st", ",",
                     "lazyLists`Private`tail", ",", "lazyLists`Private`g"}], 
                    "]"}]}], "]"}]}], "]"}]}]}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"Cases", "[", 
                    RowBox[{
                    RowBox[{"partitionedLazyList", "[", 
                    RowBox[{
                    "lazyLists`Private`list_List", ",", 
                    "lazyLists`Private`tail_"}], "]"}], ",", 
                    "lazyLists`Private`patt_"}], "]"}], "^:=", 
                    RowBox[{"partitionedLazyList", "[", 
                    RowBox[{
                    RowBox[{"Cases", "[", 
                    RowBox[{
                    "lazyLists`Private`list", ",", "lazyLists`Private`patt"}],
                     "]"}], ",", 
                    RowBox[{"Cases", "[", 
                    RowBox[{
                    "lazyLists`Private`tail", ",", "lazyLists`Private`patt"}],
                     "]"}]}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"Pick", "[", 
                    RowBox[{
                    RowBox[{"partitionedLazyList", "[", 
                    RowBox[{
                    "lazyLists`Private`first_List", ",", 
                    "lazyLists`Private`tail1_"}], "]"}], ",", 
                    RowBox[{"partitionedLazyList", "[", 
                    RowBox[{
                    "lazyLists`Private`select_List", ",", 
                    "lazyLists`Private`tail2_"}], "]"}], ",", 
                    "lazyLists`Private`patt_"}], "]"}], "^:=", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"lazyLists`Private`minLength", "=", 
                    RowBox[{"Min", "[", 
                    RowBox[{"Length", "/@", 
                    RowBox[{"{", 
                    RowBox[{
                    "lazyLists`Private`first", ",", 
                    "lazyLists`Private`select"}], "}"}]}], "]"}]}], "}"}], 
                    ",", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"lazyLists`Private`rest1", "=", 
                    RowBox[{"Drop", "[", 
                    RowBox[{
                    "lazyLists`Private`first", ",", 
                    "lazyLists`Private`minLength"}], "]"}]}], ",", 
                    RowBox[{"lazyLists`Private`rest2", "=", 
                    RowBox[{"Drop", "[", 
                    RowBox[{
                    "lazyLists`Private`select", ",", 
                    "lazyLists`Private`minLength"}], "]"}]}]}], "}"}], ",", 
                    RowBox[{"partitionedLazyList", "[", 
                    RowBox[{
                    RowBox[{"Pick", "[", 
                    RowBox[{
                    RowBox[{"Take", "[", 
                    RowBox[{
                    "lazyLists`Private`first", ",", 
                    "lazyLists`Private`minLength"}], "]"}], ",", 
                    RowBox[{"Take", "[", 
                    RowBox[{
                    "lazyLists`Private`select", ",", 
                    "lazyLists`Private`minLength"}], "]"}], ",", 
                    "lazyLists`Private`patt"}], "]"}], ",", 
                    RowBox[{"Pick", "[", 
                    RowBox[{
                    RowBox[{"partitionedLazyList", "[", 
                    RowBox[{
                    "lazyLists`Private`rest1", ",", 
                    "lazyLists`Private`tail1"}], "]"}], ",", 
                    RowBox[{"partitionedLazyList", "[", 
                    RowBox[{
                    "lazyLists`Private`rest2", ",", 
                    "lazyLists`Private`tail2"}], "]"}], ",", 
                    "lazyLists`Private`patt"}], "]"}]}], "]"}]}], "]"}]}], 
                    "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"Select", "[", 
                    RowBox[{
                    RowBox[{"partitionedLazyList", "[", 
                    RowBox[{
                    "lazyLists`Private`first_List", ",", 
                    "lazyLists`Private`tail_"}], "]"}], ",", 
                    "lazyLists`Private`fun_"}], "]"}], "^:=", 
                    RowBox[{"partitionedLazyList", "[", 
                    RowBox[{
                    RowBox[{"Select", "[", 
                    RowBox[{
                    "lazyLists`Private`first", ",", "lazyLists`Private`fun"}],
                     "]"}], ",", 
                    RowBox[{"Select", "[", 
                    RowBox[{
                    "lazyLists`Private`tail", ",", "lazyLists`Private`fun"}], 
                    "]"}]}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"lazyLists`Private`expr$", ":", 
                    RowBox[{
                    "lazyLists`Private`first$___", "+", 
                    "lazyLists`Private`lz$_partitionedLazyList", "+", 
                    "lazyLists`Private`rest$___"}]}], "^:=", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Thread", "[", 
                    RowBox[{
                    RowBox[{"Unevaluated", "[", 
                    RowBox[{"+", "##1"}], "]"}], ",", "partitionedLazyList"}],
                     "]"}], "&"}], ")"}], "@@", 
                    RowBox[{"repartitionAll", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    "lazyLists`Private`first$", ",", "lazyLists`Private`lz$", 
                    ",", "lazyLists`Private`rest$"}], "}"}], "]"}]}]}]},
                    {
                    RowBox[{
                    RowBox[{"lazyLists`Private`expr$", ":", 
                    RowBox[{
                    "lazyLists`Private`first$___", " ", 
                    "lazyLists`Private`lz$_partitionedLazyList", " ", 
                    "lazyLists`Private`rest$___"}]}], "^:=", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Thread", "[", 
                    RowBox[{
                    RowBox[{"Unevaluated", "[", 
                    RowBox[{"Times", "[", "##1", "]"}], "]"}], ",", 
                    "partitionedLazyList"}], "]"}], "&"}], ")"}], "@@", 
                    RowBox[{"repartitionAll", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    "lazyLists`Private`first$", ",", "lazyLists`Private`lz$", 
                    ",", "lazyLists`Private`rest$"}], "}"}], "]"}]}]}]},
                    {
                    RowBox[{
                    RowBox[{"lazyLists`Private`expr$", ":", 
                    RowBox[{"Power", "[", 
                    RowBox[{
                    "lazyLists`Private`first$___", ",", 
                    "lazyLists`Private`lz$_partitionedLazyList", ",", 
                    "lazyLists`Private`rest$___"}], "]"}]}], "^:=", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Thread", "[", 
                    RowBox[{
                    RowBox[{"Unevaluated", "[", 
                    RowBox[{"Power", "[", "##1", "]"}], "]"}], ",", 
                    "partitionedLazyList"}], "]"}], "&"}], ")"}], "@@", 
                    RowBox[{"repartitionAll", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    "lazyLists`Private`first$", ",", "lazyLists`Private`lz$", 
                    ",", "lazyLists`Private`rest$"}], "}"}], "]"}]}]}]},
                    {
                    RowBox[{
                    RowBox[{"lazyLists`Private`expr$", ":", 
                    RowBox[{"Divide", "[", 
                    RowBox[{
                    "lazyLists`Private`first$___", ",", 
                    "lazyLists`Private`lz$_partitionedLazyList", ",", 
                    "lazyLists`Private`rest$___"}], "]"}]}], "^:=", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Thread", "[", 
                    RowBox[{
                    RowBox[{"Unevaluated", "[", 
                    RowBox[{"Divide", "[", "##1", "]"}], "]"}], ",", 
                    "partitionedLazyList"}], "]"}], "&"}], ")"}], "@@", 
                    RowBox[{"repartitionAll", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    "lazyLists`Private`first$", ",", "lazyLists`Private`lz$", 
                    ",", "lazyLists`Private`rest$"}], "}"}], "]"}]}]}]},
                    {
                    RowBox[{
                    RowBox[{"lazyLists`Private`expr$", ":", 
                    RowBox[{"Subtract", "[", 
                    RowBox[{
                    "lazyLists`Private`first$___", ",", 
                    "lazyLists`Private`lz$_partitionedLazyList", ",", 
                    "lazyLists`Private`rest$___"}], "]"}]}], "^:=", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Thread", "[", 
                    RowBox[{
                    RowBox[{"Unevaluated", "[", 
                    RowBox[{"Subtract", "[", "##1", "]"}], "]"}], ",", 
                    "partitionedLazyList"}], "]"}], "&"}], ")"}], "@@", 
                    RowBox[{"repartitionAll", "[", 
                    RowBox[{"{", 
                    RowBox[{
                    "lazyLists`Private`first$", ",", "lazyLists`Private`lz$", 
                    ",", "lazyLists`Private`rest$"}], "}"}], "]"}]}]}]},
                    {
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    "Part", "|", "Take", "|", "TakeWhile", "|", 
                    "LengthWhile"}], ")"}], "[", 
                    RowBox[{
                    RowBox[{"lazyLists`Private`lz$", ":", 
                    RowBox[{"partitionedLazyList", "[", "_", "]"}]}], ",", 
                    "___"}], "]"}], "^:=", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"partitionedLazyList", "::", "illDefined"}], 
                    "MessageName"], ",", 
                    RowBox[{"Short", "[", "lazyLists`Private`lz$", "]"}]}], 
                    "]"}], ";", "$Failed"}], ")"}]}]},
                    {
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    "Part", "|", "Take", "|", "TakeWhile", "|", 
                    "LengthWhile"}], ")"}], "[", 
                    RowBox[{
                    RowBox[{"lazyLists`Private`lz$", ":", 
                    RowBox[{"partitionedLazyList", "[", 
                    RowBox[{"_", ",", "_", ",", "__"}], "]"}]}], ",", "___"}],
                     "]"}], "^:=", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"partitionedLazyList", "::", "illDefined"}], 
                    "MessageName"], ",", 
                    RowBox[{"Short", "[", "lazyLists`Private`lz$", "]"}]}], 
                    "]"}], ";", "$Failed"}], ")"}]}]},
                    {
                    RowBox[{
                    RowBox[{"Take", "[", 
                    RowBox[{
                    "lazyLists`Private`lz_partitionedLazyList", ",", 
                    "lazyLists`Private`spec_", ",", "___"}], "]"}], "^:=", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"lazyList", "::", "take"}], "MessageName"], ",", 
                    "lazyLists`Private`spec", ",", 
                    RowBox[{"Short", "[", "lazyLists`Private`lz", "]"}]}], 
                    "]"}], ";", 
                    RowBox[{"lazyList", "[", "]"}]}], ")"}]}]},
                    {
                    RowBox[{
                    RowBox[{
                    "lazyLists`Private`lz_partitionedLazyList", 
                    "\[LeftDoubleBracket]", 
                    RowBox[{"lazyLists`Private`spec_", ",", "___"}], 
                    "\[RightDoubleBracket]"}], "^:=", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"lazyList", "::", "part"}], "MessageName"], ",", 
                    "lazyLists`Private`spec", ",", 
                    RowBox[{"Short", "[", "lazyLists`Private`lz", "]"}]}], 
                    "]"}], ";", "$Failed"}], ")"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    
                    StyleBox["\<\" DownValue Definitions\"\>", 
                    "InformationRowLabel",
                    StripOnInput->False],
                    "\"DownValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "DownValues", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"partitionedLazyList", "[", "]"}], ":=", 
                    RowBox[{"lazyList", "[", "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"partitionedLazyList", "[", "$Failed", "]"}], ":=",
                     "$Failed"}]},
                    {
                    RowBox[{
                    RowBox[{"partitionedLazyList", "[", 
                    RowBox[{
                    RowBox[{"lazyList", "[", "]"}], ",", "___"}], "]"}], ":=", 
                    RowBox[{"lazyList", "[", "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"partitionedLazyList", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "Shortest", "[", "lazyLists`Private`first___", "]"}], ",",
                     "endOfLazyList", ",", "___"}], "}"}], ",", "___"}], 
                    "]"}], ":=", 
                    RowBox[{"partitionedLazyList", "[", 
                    RowBox[{
                    RowBox[{"{", "lazyLists`Private`first", "}"}], ",", 
                    RowBox[{"lazyList", "[", "]"}]}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"partitionedLazyList", "[", 
                    RowBox[{"lazyLists`Private`lz", ":", 
                    RowBox[{"lazyList", "[", 
                    RowBox[{
                    RowBox[{"Except", "[", "_List", "]"}], ",", "_"}], 
                    "]"}]}], "]"}], ":=", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Message", "[", 
                    RowBox[{
                    StyleBox[
                    RowBox[{"partitionedLazyList", "::", "cannotPartition"}], 
                    "MessageName"], ",", 
                    RowBox[{"Short", "[", "lazyLists`Private`lz", "]"}]}], 
                    "]"}], ";", 
                    RowBox[{"lazyList", "[", "]"}]}], ")"}]}]},
                    {
                    RowBox[{
                    RowBox[{"partitionedLazyList", "[", 
                    RowBox[{
                    RowBox[{"{", "}"}], ",", "lazyLists`Private`tail_"}], 
                    "]"}], ":=", "lazyLists`Private`tail"}]},
                    {
                    RowBox[{
                    RowBox[{
                    "partitionedLazyList", "[", "lazyLists`Private`list_List",
                     "]"}], ":=", 
                    RowBox[{"partitionedLazyList", "[", 
                    RowBox[{"lazyLists`Private`list", ",", 
                    RowBox[{"lazyList", "[", "]"}]}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"partitionedLazyList", "[", 
                    RowBox[{"lazyList", "[", 
                    RowBox[{
                    "lazyLists`Private`list_List", ",", 
                    "lazyLists`Private`tail_"}], "]"}], "]"}], ":=", 
                    RowBox[{"partitionedLazyList", "[", 
                    RowBox[{"lazyLists`Private`list", ",", 
                    RowBox[{
                    "partitionedLazyList", "[", "lazyLists`Private`tail", 
                    "]"}]}], "]"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Attributes\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Attributes\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Attributes", "Tooltip"]& ], 
                   RowBox[{"{", "HoldRest", "}"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"lazyLists`partitionedLazyList\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"Is a special wrapper for lazyLists that generate \
ordinary Lists.\\nThe elements of the inner Lists are treated as if they're \
seperate elements of the outer lazyList, making it possible to generate \
elements in chunks.\\nList operations on partitionedLazyList such as Map and \
FoldList will be automatically applied to the generated lists for efficiency.\
\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{13., {4., 9.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{13., {4., 9.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "Is a special wrapper for lazyLists that generate ordinary Lists.\nThe \
elements of the inner Lists are treated as if they're seperate elements of \
the outer lazyList, making it possible to generate elements in chunks.\nList \
operations on partitionedLazyList such as Map and FoldList will be \
automatically applied to the generated lists for efficiency.", 
    "Documentation" -> None, "OwnValues" -> None, "UpValues" -> 
    Information`InformationValueForm[
     UpValues, lazyLists`partitionedLazyList, {Prepend[
         lazyLists`partitionedLazyList[
          Pattern[lazyLists`Private`list, 
           Blank[List]], 
          Pattern[lazyLists`Private`tail, 
           Blank[]]], 
         Pattern[lazyLists`Private`newElem, 
          Blank[]]] :> lazyLists`partitionedLazyList[
         Prepend[lazyLists`Private`list, lazyLists`Private`newElem], 
         lazyLists`Private`tail], First[
         lazyLists`partitionedLazyList[{
           Pattern[lazyLists`Private`elem, 
            Blank[]], 
           BlankNullSequence[]}, 
          Blank[]], 
         BlankNullSequence[]] :> lazyLists`Private`elem, Most[
         lazyLists`partitionedLazyList[
          Pattern[lazyLists`Private`list, 
           Blank[List]], 
          Blank[]]] :> lazyLists`Private`list, Rest[
         lazyLists`partitionedLazyList[{
           Blank[]}, 
          Pattern[lazyLists`Private`tail, 
           Blank[]]]] :> lazyLists`Private`tail, Rest[
         lazyLists`partitionedLazyList[{
           Blank[], 
           Pattern[lazyLists`Private`rest, 
            BlankSequence[]]}, 
          Pattern[lazyLists`Private`tail, 
           Blank[]]]] :> 
       lazyLists`partitionedLazyList[{lazyLists`Private`rest}, 
         lazyLists`Private`tail], Take[
         lazyLists`partitionedLazyList[
          Pattern[lazyLists`Private`list, 
           Blank[List]], 
          Pattern[lazyLists`Private`tail, 
           Blank[]]], 
         Pattern[lazyLists`Private`spec, 
          Alternatives[
           Blank[Integer], {
            Blank[Integer], 
            BlankNullSequence[Integer]}]]] :> 
       With[{lazyLists`Private`maxIndex = Max[
            Replace[lazyLists`Private`spec, {
               Pattern[lazyLists`Private`m, 
                Blank[]], 
               Pattern[lazyLists`Private`n, 
                Blank[]], 
               Blank[]} :> {lazyLists`Private`m, lazyLists`Private`n}]]}, 
         Condition[
          lazyLists`partitionedLazyList[
           Take[lazyLists`Private`list, lazyLists`Private`spec], 
           Evaluate[
            lazyLists`partitionedLazyList[
             Drop[lazyLists`Private`list, lazyLists`Private`maxIndex], 
             lazyLists`Private`tail]]], Length[lazyLists`Private`list] >= 
          lazyLists`Private`maxIndex]], Condition[
         Take[
          Pattern[lazyLists`Private`lz, 
           lazyLists`partitionedLazyList[
            Blank[List], 
            Blank[]]], {
           PatternTest[
            Pattern[lazyLists`Private`m, 
             Blank[Integer]], Positive], 
           PatternTest[
            Pattern[lazyLists`Private`n, 
             Blank[Integer]], Positive], 
           Optional[
            Pattern[lazyLists`Private`step, 
             Blank[Integer]], 1]}], lazyLists`Private`n < 
         lazyLists`Private`m] :> Replace[
         Take[lazyLists`Private`lz, 
          
          lazyLists`Private`parseTakeSpec[{
           lazyLists`Private`m, lazyLists`Private`n, 
            lazyLists`Private`step}]], {lazyLists`partitionedLazyList[
            Pattern[lazyLists`Private`list, 
             Blank[List]], 
            Pattern[lazyLists`Private`rest, 
             Blank[]]] :> lazyLists`partitionedLazyList[
            Reverse[lazyLists`Private`list], lazyLists`Private`rest]}], Take[
         Pattern[lazyLists`Private`lz, 
          lazyLists`partitionedLazyList[
           Blank[List], 
           Blank[]]], 
         Pattern[lazyLists`Private`spec, 
          Blank[]]] :> 
       With[{lazyLists`Private`parsedSpec = 
          lazyLists`Private`parseTakeSpec[lazyLists`Private`spec]}, 
         Condition[
          Take[lazyLists`Private`lz, lazyLists`Private`parsedSpec], 
          And[
          lazyLists`Private`parsedSpec =!= $Failed, 
           lazyLists`Private`parsedSpec =!= lazyLists`Private`spec]]], Take[
         Pattern[lazyLists`Private`lz, 
          lazyLists`partitionedLazyList[
           Blank[List], 
           Blank[]]], {
          Pattern[lazyLists`Private`start, 
           Except[1, 
            PatternTest[
             Blank[Integer], Positive]]], 
          Pattern[lazyLists`Private`stop, 
           Alternatives[
            PatternTest[
             Blank[Integer], Positive], All]], 
          PatternTest[
           Pattern[lazyLists`Private`step, 
            Blank[Integer]], Positive]}] :> 
       With[{lazyLists`Private`advancedLz = Quiet[
            Part[lazyLists`Private`lz, {lazyLists`Private`start}], {
             MessageName[Part, "partw"]}]}, 
         If[
          MatchQ[
          lazyLists`Private`advancedLz, 
           lazyLists`Private`validPartitionedLazyListPattern], 
          Take[lazyLists`Private`advancedLz, {1, 
            Replace[lazyLists`Private`stop, {Pattern[lazyLists`Private`int, 
                Blank[Integer]] :> 
              lazyLists`Private`int - lazyLists`Private`start + 1}], 
            lazyLists`Private`step}], 
          lazyLists`lazyList[]]], Take[
         Pattern[lazyLists`Private`partLz, 
          lazyLists`partitionedLazyList[
           Blank[List], 
           Blank[]]], {1, 
          Pattern[lazyLists`Private`n, 
           Alternatives[
            PatternTest[
             Blank[Integer], Positive], All]], 
          PatternTest[
           Pattern[lazyLists`Private`step, 
            Blank[Integer]], Positive]}] :> 
       Apply[lazyLists`partitionedLazyList, 
         MapAt[Catenate[
           First[#, {}]]& , 
          Part[
           Reap[
            Catch[
             
             Block[{$IterationLimit = lazyLists`$lazyIterationLimit, 
               lazyLists`Private`count = lazyLists`Private`n, 
               lazyLists`Private`offset = 0, lazyLists`Private`result, 
               lazyLists`Private`take, lazyLists`Private`len}, 
              ReplaceRepeated[
              lazyLists`Private`partLz, {lazyLists`lazyList[] :> Throw[
                  lazyLists`lazyList[], "takePartitioned"], 
                lazyLists`partitionedLazyList[
                  Pattern[lazyLists`Private`l, 
                   Except[
                    Blank[List]]], 
                  Blank[]] :> (Message[
                   MessageName[
                   lazyLists`partitionedLazyList, "cannotPartition"], 
                   Short[lazyLists`Private`l]]; lazyLists`lazyList[]), 
                
                Switch[{lazyLists`Private`n, lazyLists`Private`step}, {
                 All, 1}, lazyLists`partitionedLazyList[
                   Pattern[lazyLists`Private`list, 
                    Blank[List]], 
                   Pattern[lazyLists`Private`tail, 
                    Blank[]]] :> (Sow[lazyLists`Private`list, "results"]; 
                  lazyLists`Private`tail), {All, 
                  Blank[]}, lazyLists`partitionedLazyList[
                   Pattern[lazyLists`Private`list, 
                    Blank[List]], 
                   Pattern[lazyLists`Private`tail, 
                    Blank[]]] :> (
                  If[Length[lazyLists`Private`list] > 
                    lazyLists`Private`offset, 
                    Sow[
                    Part[lazyLists`Private`list, 
                    Span[
                    1 + lazyLists`Private`offset, All, 
                    lazyLists`Private`step]], "results"]]; 
                  lazyLists`Private`offset = Mod[
                    Subtract[lazyLists`Private`offset, 
                    Length[lazyLists`Private`list]], lazyLists`Private`step]; 
                  lazyLists`Private`tail), {
                  Blank[], 1}, lazyLists`partitionedLazyList[
                   PatternTest[
                    Pattern[lazyLists`Private`list, 
                    Blank[List]], (lazyLists`Private`len = Length[#]) < 
                    lazyLists`Private`count& ], 
                   Pattern[lazyLists`Private`tail, 
                    Blank[]]] :> (Sow[lazyLists`Private`list, "results"]; 
                  SubtractFrom[
                   lazyLists`Private`count, lazyLists`Private`len]; 
                  lazyLists`Private`tail), 
                 Blank[], lazyLists`partitionedLazyList[
                   PatternTest[
                    Pattern[lazyLists`Private`list, 
                    Blank[List]], (lazyLists`Private`len = Length[#]) < 
                    lazyLists`Private`count& ], 
                   Pattern[lazyLists`Private`tail, 
                    Blank[]]] :> (If[
                    TrueQ[lazyLists`Private`len > lazyLists`Private`offset], 
                    Sow[
                    Part[lazyLists`Private`list, 
                    Span[
                    1 + lazyLists`Private`offset, All, 
                    lazyLists`Private`step]], "results"]]; 
                  SubtractFrom[
                   lazyLists`Private`count, lazyLists`Private`len]; 
                  lazyLists`Private`offset = Mod[
                    Subtract[lazyLists`Private`offset, lazyLists`Private`len],
                     lazyLists`Private`step]; lazyLists`Private`tail)], 
                If[
                lazyLists`Private`n === All, Nothing, 
                 lazyLists`partitionedLazyList[
                   Pattern[lazyLists`Private`list, 
                    Blank[List]], 
                   Pattern[lazyLists`Private`tail, 
                    Blank[]]] :> (Sow[
                    Part[lazyLists`Private`list, 
                    Span[
                    1 + lazyLists`Private`offset, lazyLists`Private`count, 
                    lazyLists`Private`step]], "results"]; Throw[
                    lazyLists`partitionedLazyList[
                    Drop[lazyLists`Private`list, lazyLists`Private`count], 
                    lazyLists`Private`tail], "takePartitioned"])]}, 
               MaxIterations -> DirectedInfinity[1]]], "takePartitioned"], 
            "results"], {2, 1}], 1]], TakeWhile[
         Pattern[lazyLists`Private`partLz, 
          lazyLists`partitionedLazyList[
           Blank[List], 
           Blank[]]], 
         Optional[
          Pattern[lazyLists`Private`function, 
           Blank[]], True& ], 
         Pattern[lazyLists`Private`opts, 
          OptionsPattern[MaxIterations -> DirectedInfinity[1]]]] :> 
       Apply[lazyLists`partitionedLazyList, 
         MapAt[Catenate[
           First[#, {}]]& , 
          Reverse[
           Reap[
            Quiet[
             Catch[
              
              Block[{$IterationLimit = lazyLists`$lazyIterationLimit, 
                lazyLists`Private`first, lazyLists`Private`ind}, 
               ReplaceRepeated[lazyLists`Private`partLz, {
                 If[
                 lazyLists`Private`function === (True& ), 
                  lazyLists`partitionedLazyList[
                    Pattern[lazyLists`Private`list, 
                    Blank[List]], 
                    Pattern[lazyLists`Private`tail, 
                    Blank[]]] :> (
                   Sow[lazyLists`Private`list, "partTakeWhile"]; 
                   lazyLists`Private`tail), lazyLists`partitionedLazyList[
                    Pattern[lazyLists`Private`list, 
                    Blank[List]], 
                    Pattern[lazyLists`Private`tail, 
                    Blank[]]] :> (
                   lazyLists`Private`ind = 
                    LengthWhile[
                    lazyLists`Private`list, lazyLists`Private`function]; 
                   If[lazyLists`Private`ind === 
                    Length[lazyLists`Private`list], 
                    Sow[lazyLists`Private`list, "partTakeWhile"]; 
                    lazyLists`Private`tail, Sow[
                    Take[lazyLists`Private`list, lazyLists`Private`ind], 
                    "partTakeWhile"]; Throw[
                    lazyLists`partitionedLazyList[
                    Drop[lazyLists`Private`list, lazyLists`Private`ind], 
                    lazyLists`Private`tail], "takeWhile"]])], 
                 Pattern[lazyLists`Private`other, 
                   Blank[]] :> Throw[lazyLists`Private`other, "takeWhile"]}, 
                MaxIterations -> OptionValue[MaxIterations]]], "takeWhile"], {
              MessageName[ReplaceRepeated, "rrlim"]}], "partTakeWhile"]], 1]],
        LengthWhile[
         Pattern[lazyLists`Private`lz, 
          lazyLists`partitionedLazyList[{
            BlankNullSequence[], 
            Pattern[lazyLists`Private`el, 
             Blank[]]}, 
           Blank[]]], 
         Optional[
          Pattern[lazyLists`Private`function, 
           Blank[]], True& ], 
         Pattern[lazyLists`Private`opts, 
          OptionsPattern[MaxIterations -> DirectedInfinity[1]]]] :> Quiet[
         Block[{$IterationLimit = lazyLists`$lazyIterationLimit, 
           lazyLists`Private`count = 0, lazyLists`Private`ind}, 
          Replace[
           Catch[
            ReplaceRepeated[{lazyLists`Private`lz, lazyLists`Private`el}, {
              If[lazyLists`Private`function === (True& ), {
                 lazyLists`partitionedLazyList[
                  Pattern[lazyLists`Private`list, {
                    BlankNullSequence[], 
                    Pattern[lazyLists`Private`elem, 
                    Blank[]]}], 
                  Pattern[lazyLists`Private`tail, 
                   Blank[]]], 
                 Pattern[lazyLists`Private`prev, 
                  Blank[]]} :> (AddTo[lazyLists`Private`count, 
                  Length[lazyLists`Private`list]]; {
                 lazyLists`Private`tail, lazyLists`Private`elem}), {
                 lazyLists`partitionedLazyList[
                  Pattern[lazyLists`Private`list, {
                    BlankNullSequence[], 
                    Pattern[lazyLists`Private`elem, 
                    Blank[]]}], 
                  Pattern[lazyLists`Private`tail, 
                   Blank[]]], 
                 Pattern[lazyLists`Private`prev, 
                  Blank[]]} :> (
                AddTo[lazyLists`Private`count, lazyLists`Private`ind = 
                  LengthWhile[
                   lazyLists`Private`list, lazyLists`Private`function]]; 
                Switch[lazyLists`Private`ind, 
                  Length[lazyLists`Private`list], {
                  lazyLists`Private`tail, lazyLists`Private`elem}, 0, 
                  Throw[
                   
                   lazyLists`partitionedLazyList[{lazyLists`Private`prev}, 
                    lazyLists`Private`tail], "lengthWhile"], 
                  Blank[], 
                  Throw[
                   lazyLists`partitionedLazyList[
                    Drop[lazyLists`Private`list, lazyLists`Private`ind - 1], 
                    lazyLists`Private`tail], "lengthWhile"]])], {
                Pattern[lazyLists`Private`other, 
                 Blank[]], 
                Pattern[lazyLists`Private`prev, 
                 Blank[]]} :> Throw[
                
                lazyLists`partitionedLazyList[{lazyLists`Private`prev}, 
                 lazyLists`Private`other], "lengthWhile"]}, MaxIterations -> 
             OptionValue[MaxIterations]], "lengthWhile"], {{
              Pattern[
              lazyLists`Private`l, 
               lazyLists`Private`validPartitionedLazyListPattern], 
              Pattern[lazyLists`Private`prev, 
               Blank[]]} :> 
            Association[
             "Index" -> Infinity, "Element" -> lazyLists`Private`l], 
            Pattern[lazyLists`Private`l, 
              lazyLists`Private`validPartitionedLazyListPattern] :> 
            Association[
             "Index" -> lazyLists`Private`count, "Element" -> 
              lazyLists`Private`l]}]], {
          MessageName[ReplaceRepeated, "rrlim"]}], Part[
         Blank[lazyLists`partitionedLazyList], 
         Alternatives[{0}, 0]] :> lazyLists`partitionedLazyList, Part[
         Pattern[lazyLists`Private`partLz, 
          lazyLists`partitionedLazyList[
           Blank[List], 
           Blank[]]], 1] :> First[lazyLists`Private`partLz], Part[
         Pattern[lazyLists`Private`partLz, 
          lazyLists`partitionedLazyList[
           Blank[List], 
           Blank[]]], {1}] :> lazyLists`Private`partLz, Part[
         Pattern[lazyLists`Private`partLz, 
          lazyLists`partitionedLazyList[
           Blank[List], 
           Blank[]]], 
         Pattern[lazyLists`Private`n, 
          Alternatives[
           PatternTest[
            Blank[Integer], Positive], -1]]] :> First[
         Part[lazyLists`Private`partLz, {lazyLists`Private`n}], $Failed], 
       Condition[
         Part[
          lazyLists`partitionedLazyList[
           Pattern[lazyLists`Private`list, {
             Blank[], 
             BlankNullSequence[]}], 
           Pattern[lazyLists`Private`tail, 
            Blank[]]], {
           PatternTest[
            Pattern[lazyLists`Private`n, 
             Blank[Integer]], Positive]}], lazyLists`Private`n <= 
         Length[lazyLists`Private`list]] :> lazyLists`partitionedLazyList[
         Drop[lazyLists`Private`list, lazyLists`Private`n - 1], 
         lazyLists`Private`tail], Part[
         Pattern[lazyLists`Private`lz, 
          lazyLists`partitionedLazyList[
           Blank[List], 
           Blank[]]], {-1}] :> Replace[
         LengthWhile[lazyLists`Private`lz, True& ], 
         KeyValuePattern["Element" -> Pattern[lazyLists`Private`el, 
             Blank[]]] :> lazyLists`Private`el], Part[
         Pattern[lazyLists`Private`partLz, 
          lazyLists`partitionedLazyList[
           Blank[List], 
           Blank[]]], 
         Pattern[lazyLists`Private`span, 
          Blank[Span]]] :> Take[lazyLists`Private`partLz, 
         Apply[List, lazyLists`Private`span]], Part[
         Pattern[lazyLists`Private`partLz, 
          lazyLists`partitionedLazyList[
           Blank[List], 
           Blank[]]], {
          PatternTest[
           Pattern[lazyLists`Private`n, 
            Blank[Integer]], Positive]}] :> Catch[
         Block[{$IterationLimit = lazyLists`$lazyIterationLimit, 
           lazyLists`Private`count = lazyLists`Private`n, 
           lazyLists`Private`length}, 
          ReplaceRepeated[
          lazyLists`Private`partLz, {lazyLists`lazyList[] :> Throw[
              lazyLists`lazyList[], "partPartitioned"], 
            lazyLists`partitionedLazyList[
              Pattern[lazyLists`Private`l, 
               Except[
                Blank[List]]], 
              Blank[]] :> (Message[
               MessageName[lazyLists`partitionedLazyList, "cannotPartition"], 
               Short[lazyLists`Private`l]]; lazyLists`lazyList[]), 
            lazyLists`partitionedLazyList[
              PatternTest[
               Pattern[lazyLists`Private`list, 
                Blank[List]], (lazyLists`Private`length = Length[#]) < 
               lazyLists`Private`count& ], 
              Pattern[lazyLists`Private`tail, 
               Blank[]]] :> (
             SubtractFrom[lazyLists`Private`count, lazyLists`Private`length]; 
             lazyLists`Private`tail), lazyLists`partitionedLazyList[
              Pattern[lazyLists`Private`l, 
               Blank[List]], 
              Pattern[lazyLists`Private`tail, 
               Blank[]]] :> Throw[
              lazyLists`partitionedLazyList[
               Part[lazyLists`Private`l, {lazyLists`Private`count}], 
               Evaluate[
                lazyLists`partitionedLazyList[
                 Drop[lazyLists`Private`l, lazyLists`Private`count], 
                 lazyLists`Private`tail]]], "partPartitioned"]}, 
           MaxIterations -> DirectedInfinity[1]]], "partPartitioned"], 
       Condition[
         Part[
          Pattern[lazyLists`Private`lz, 
           lazyLists`partitionedLazyList[
            Blank[List], 
            Blank[]]], 
          Pattern[lazyLists`Private`indices, {
            Blank[Integer], 
            BlankSequence[Integer]}]], 
         VectorQ[lazyLists`Private`indices, Positive]] :> Catch[
         Module[{
          lazyLists`Private`sortedIndices = Sort[lazyLists`Private`indices], 
           lazyLists`Private`eval}, 
          lazyLists`partitionedLazyList[
           Part[
            FoldPairList[(lazyLists`Private`eval = Check[
                Part[#, {#2}], 
                Throw[$Failed, "part"], {
                 MessageName[Part, "partw"]}]; {
               First[lazyLists`Private`eval], lazyLists`Private`eval})& , 
             lazyLists`Private`lz, 
             Prepend[Differences[lazyLists`Private`sortedIndices] + 1, 
              First[lazyLists`Private`sortedIndices]]], 
            Ordering[lazyLists`Private`indices]], 
           Evaluate[lazyLists`Private`eval]]], "part"], Map[{
          Pattern[lazyLists`Private`fun, 
           Blank[]], Listable}, 
         lazyLists`partitionedLazyList[
          Pattern[lazyLists`Private`first, 
           Blank[]], 
          Pattern[lazyLists`Private`tail, 
           Blank[]]]] :> lazyLists`partitionedLazyList[
         lazyLists`Private`fun[lazyLists`Private`first], 
         Map[{lazyLists`Private`fun, Listable}, lazyLists`Private`tail]], Map[
         Pattern[lazyLists`Private`fun, 
          Blank[]], 
         lazyLists`partitionedLazyList[
          Pattern[lazyLists`Private`first, 
           Blank[]], 
          Pattern[lazyLists`Private`tail, 
           Blank[]]]] :> lazyLists`partitionedLazyList[
         Map[lazyLists`Private`fun, lazyLists`Private`first], 
         Map[lazyLists`Private`fun, lazyLists`Private`tail]], MapIndexed[
         Pattern[lazyLists`Private`fun, 
          Blank[]], 
         lazyLists`partitionedLazyList[
          Pattern[lazyLists`Private`first, 
           Blank[]], 
          Pattern[lazyLists`Private`tail, 
           Blank[]]], 
         Optional[
          Pattern[lazyLists`Private`index, 
           PatternTest[
            Blank[Integer], Positive]], 1]] :> 
       With[{lazyLists`Private`length = Length[lazyLists`Private`first]}, 
         lazyLists`partitionedLazyList[
          MapThread[
          lazyLists`Private`fun, {
           lazyLists`Private`first, Range[lazyLists`Private`length] + 
            lazyLists`Private`index - 1}], 
          MapIndexed[
          lazyLists`Private`fun, lazyLists`Private`tail, 
           lazyLists`Private`index + lazyLists`Private`length]]], FoldList[
         Pattern[lazyLists`Private`fun, 
          Blank[]], 
         lazyLists`partitionedLazyList[{
           Pattern[lazyLists`Private`elem, 
            Blank[]], 
           Pattern[lazyLists`Private`rest, 
            BlankNullSequence[]]}, 
          Pattern[lazyLists`Private`tail, 
           Blank[]]]] :> 
       FoldList[lazyLists`Private`fun, lazyLists`Private`elem, 
         lazyLists`partitionedLazyList[{lazyLists`Private`rest}, 
          lazyLists`Private`tail]], FoldList[
         Pattern[lazyLists`Private`fun, 
          Blank[]], 
         Pattern[lazyLists`Private`current, 
          Blank[]], 
         lazyLists`partitionedLazyList[
          Pattern[lazyLists`Private`first, 
           Blank[List]], 
          Pattern[lazyLists`Private`tail, 
           Blank[]]]] :> 
       With[{lazyLists`Private`fold = 
          FoldList[
           lazyLists`Private`fun, lazyLists`Private`current, 
            lazyLists`Private`first]}, 
         With[{lazyLists`Private`newTail = lazyLists`Private`tail}, 
          If[lazyLists`Private`newTail === lazyLists`lazyList[], 
           lazyLists`partitionedLazyList[lazyLists`Private`fold, 
            lazyLists`lazyList[]], 
           With[{lazyLists`Private`last = Last[lazyLists`Private`fold]}, 
            lazyLists`partitionedLazyList[
             Most[lazyLists`Private`fold], 
             FoldList[
             lazyLists`Private`fun, lazyLists`Private`last, 
              lazyLists`Private`newTail]]]]]], FoldPairList[
         Pattern[lazyLists`Private`fun, 
          Blank[]], 
         Pattern[lazyLists`Private`current, 
          Blank[]], 
         lazyLists`partitionedLazyList[
          Pattern[lazyLists`Private`first, 
           Blank[List]], 
          Pattern[lazyLists`Private`tail, 
           Blank[]]], 
         Optional[
          Pattern[lazyLists`Private`g, 
           Blank[]], First]] :> 
       Block[{lazyLists`Private`state, lazyLists`Private`fold}, 
         lazyLists`Private`fold = 
          FoldPairList[
           lazyLists`Private`fun, lazyLists`Private`current, 
            lazyLists`Private`first, (lazyLists`Private`state = Last[#]; 
            lazyLists`Private`g[#])& ]; 
         With[{lazyLists`Private`st = lazyLists`Private`state}, 
           lazyLists`partitionedLazyList[lazyLists`Private`fold, 
            FoldPairList[
            lazyLists`Private`fun, lazyLists`Private`st, 
             lazyLists`Private`tail, lazyLists`Private`g]]]], Cases[
         lazyLists`partitionedLazyList[
          Pattern[lazyLists`Private`list, 
           Blank[List]], 
          Pattern[lazyLists`Private`tail, 
           Blank[]]], 
         Pattern[lazyLists`Private`patt, 
          Blank[]]] :> lazyLists`partitionedLazyList[
         Cases[lazyLists`Private`list, lazyLists`Private`patt], 
         Cases[lazyLists`Private`tail, lazyLists`Private`patt]], Pick[
         lazyLists`partitionedLazyList[
          Pattern[lazyLists`Private`first, 
           Blank[List]], 
          Pattern[lazyLists`Private`tail1, 
           Blank[]]], 
         lazyLists`partitionedLazyList[
          Pattern[lazyLists`Private`select, 
           Blank[List]], 
          Pattern[lazyLists`Private`tail2, 
           Blank[]]], 
         Pattern[lazyLists`Private`patt, 
          Blank[]]] :> With[{lazyLists`Private`minLength = Min[
            Map[
            Length, {lazyLists`Private`first, lazyLists`Private`select}]]}, 
         With[{
          lazyLists`Private`rest1 = 
           Drop[lazyLists`Private`first, lazyLists`Private`minLength], 
           lazyLists`Private`rest2 = 
           Drop[lazyLists`Private`select, lazyLists`Private`minLength]}, 
          lazyLists`partitionedLazyList[
           Pick[
            Take[lazyLists`Private`first, lazyLists`Private`minLength], 
            Take[lazyLists`Private`select, lazyLists`Private`minLength], 
            lazyLists`Private`patt], 
           Pick[
            lazyLists`partitionedLazyList[
            lazyLists`Private`rest1, lazyLists`Private`tail1], 
            lazyLists`partitionedLazyList[
            lazyLists`Private`rest2, lazyLists`Private`tail2], 
            lazyLists`Private`patt]]]], Select[
         lazyLists`partitionedLazyList[
          Pattern[lazyLists`Private`first, 
           Blank[List]], 
          Pattern[lazyLists`Private`tail, 
           Blank[]]], 
         Pattern[lazyLists`Private`fun, 
          Blank[]]] :> lazyLists`partitionedLazyList[
         Select[lazyLists`Private`first, lazyLists`Private`fun], 
         Select[lazyLists`Private`tail, lazyLists`Private`fun]], 
       Pattern[lazyLists`Private`expr$, Pattern[lazyLists`Private`first$, 
           BlankNullSequence[]] + Pattern[lazyLists`Private`lz$, 
           Blank[lazyLists`partitionedLazyList]] + 
         Pattern[lazyLists`Private`rest$, 
           BlankNullSequence[]]] :> Apply[Thread[
          Unevaluated[
           Plus[
            SlotSequence[1]]], lazyLists`partitionedLazyList]& , 
         lazyLists`repartitionAll[{
          lazyLists`Private`first$, lazyLists`Private`lz$, 
           lazyLists`Private`rest$}]], 
       Pattern[lazyLists`Private`expr$, (Pattern[lazyLists`Private`first$, 
            BlankNullSequence[]] Pattern[lazyLists`Private`lz$, 
            Blank[lazyLists`partitionedLazyList]]) 
         Pattern[lazyLists`Private`rest$, 
           BlankNullSequence[]]] :> Apply[Thread[
          Unevaluated[
           Times[
            SlotSequence[1]]], lazyLists`partitionedLazyList]& , 
         lazyLists`repartitionAll[{
          lazyLists`Private`first$, lazyLists`Private`lz$, 
           lazyLists`Private`rest$}]], Pattern[lazyLists`Private`expr$, 
         Power[
          Pattern[lazyLists`Private`first$, 
           BlankNullSequence[]], 
          Pattern[lazyLists`Private`lz$, 
           Blank[lazyLists`partitionedLazyList]], 
          Pattern[lazyLists`Private`rest$, 
           BlankNullSequence[]]]] :> Apply[Thread[
          Unevaluated[
           Power[
            SlotSequence[1]]], lazyLists`partitionedLazyList]& , 
         lazyLists`repartitionAll[{
          lazyLists`Private`first$, lazyLists`Private`lz$, 
           lazyLists`Private`rest$}]], Pattern[lazyLists`Private`expr$, 
         Divide[
          Pattern[lazyLists`Private`first$, 
           BlankNullSequence[]], 
          Pattern[lazyLists`Private`lz$, 
           Blank[lazyLists`partitionedLazyList]], 
          Pattern[lazyLists`Private`rest$, 
           BlankNullSequence[]]]] :> Apply[Thread[
          Unevaluated[
           Divide[
            SlotSequence[1]]], lazyLists`partitionedLazyList]& , 
         lazyLists`repartitionAll[{
          lazyLists`Private`first$, lazyLists`Private`lz$, 
           lazyLists`Private`rest$}]], Pattern[lazyLists`Private`expr$, 
         Subtract[
          Pattern[lazyLists`Private`first$, 
           BlankNullSequence[]], 
          Pattern[lazyLists`Private`lz$, 
           Blank[lazyLists`partitionedLazyList]], 
          Pattern[lazyLists`Private`rest$, 
           BlankNullSequence[]]]] :> Apply[Thread[
          Unevaluated[
           Subtract[
            SlotSequence[1]]], lazyLists`partitionedLazyList]& , 
         lazyLists`repartitionAll[{
          lazyLists`Private`first$, lazyLists`Private`lz$, 
           lazyLists`Private`rest$}]], 
       Alternatives[Part, Take, TakeWhile, LengthWhile][
         Pattern[lazyLists`Private`lz$, 
          lazyLists`partitionedLazyList[
           Blank[]]], 
         BlankNullSequence[]] :> (Message[
          MessageName[lazyLists`partitionedLazyList, "illDefined"], 
          Short[lazyLists`Private`lz$]]; $Failed), 
       Alternatives[Part, Take, TakeWhile, LengthWhile][
         Pattern[lazyLists`Private`lz$, 
          lazyLists`partitionedLazyList[
           Blank[], 
           Blank[], 
           BlankSequence[]]], 
         BlankNullSequence[]] :> (Message[
          MessageName[lazyLists`partitionedLazyList, "illDefined"], 
          Short[lazyLists`Private`lz$]]; $Failed), Take[
         Pattern[lazyLists`Private`lz, 
          Blank[lazyLists`partitionedLazyList]], 
         Pattern[lazyLists`Private`spec, 
          Blank[]], 
         BlankNullSequence[]] :> (Message[
          MessageName[lazyLists`lazyList, "take"], lazyLists`Private`spec, 
          Short[lazyLists`Private`lz]]; lazyLists`lazyList[]), Part[
         Pattern[lazyLists`Private`lz, 
          Blank[lazyLists`partitionedLazyList]], 
         Pattern[lazyLists`Private`spec, 
          Blank[]], 
         BlankNullSequence[]] :> (Message[
          MessageName[lazyLists`lazyList, "part"], lazyLists`Private`spec, 
          Short[lazyLists`Private`lz]]; $Failed)}], "DownValues" -> 
    Information`InformationValueForm[
     DownValues, lazyLists`partitionedLazyList, {
      lazyLists`partitionedLazyList[] :> lazyLists`lazyList[], 
       lazyLists`partitionedLazyList[$Failed] :> $Failed, 
       lazyLists`partitionedLazyList[
         lazyLists`lazyList[], 
         BlankNullSequence[]] :> lazyLists`lazyList[], 
       lazyLists`partitionedLazyList[{
          Shortest[
           Pattern[lazyLists`Private`first, 
            BlankNullSequence[]]], lazyLists`endOfLazyList, 
          BlankNullSequence[]}, 
         BlankNullSequence[]] :> 
       lazyLists`partitionedLazyList[{lazyLists`Private`first}, 
         lazyLists`lazyList[]], lazyLists`partitionedLazyList[
         Pattern[lazyLists`Private`lz, 
          lazyLists`lazyList[
           Except[
            Blank[List]], 
           Blank[]]]] :> (Message[
          MessageName[lazyLists`partitionedLazyList, "cannotPartition"], 
          Short[lazyLists`Private`lz]]; lazyLists`lazyList[]), 
       lazyLists`partitionedLazyList[{}, 
         Pattern[lazyLists`Private`tail, 
          Blank[]]] :> lazyLists`Private`tail, lazyLists`partitionedLazyList[
         Pattern[lazyLists`Private`list, 
          Blank[List]]] :> 
       lazyLists`partitionedLazyList[lazyLists`Private`list, 
         lazyLists`lazyList[]], lazyLists`partitionedLazyList[
         lazyLists`lazyList[
          Pattern[lazyLists`Private`list, 
           Blank[List]], 
          Pattern[lazyLists`Private`tail, 
           Blank[]]]] :> lazyLists`partitionedLazyList[lazyLists`Private`list, 
         lazyLists`partitionedLazyList[lazyLists`Private`tail]]}], 
    "SubValues" -> None, "DefaultValues" -> None, "NValues" -> None, 
    "FormatValues" -> None, "Options" -> None, "Attributes" -> {HoldRest}, 
    "FullName" -> "lazyLists`partitionedLazyList"], False]]], "Output",
 CellLabel->
  "Out[358]=",ExpressionUUID->"112ddb90-a08d-48e8-97d6-34de8a6898e6"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"partitionedLazyRange[start, step, partitionLength] \
works like lazyRange, but yields a \
partitionedLazyList.\\npartitionedLazyRange[partitionLength] generates the \
natural numbers in chuncks of length partitionLength.\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"partitionedLazyRange", "[", 
                    RowBox[{
                    RowBox[{"lazyLists`Private`start_", ":", "1"}], ",", 
                    RowBox[{"lazyLists`Private`step_", ":", "1"}], ",", 
                    RowBox[{
                    "lazyLists`Private`partition_Integer", "?", 
                    "Positive"}]}], "]"}], ":=", 
                    RowBox[{"partitionedLazyList", "[", 
                    RowBox[{"lazyRange", "[", 
                    RowBox[{
                    RowBox[{"lazyLists`Private`start", "+", 
                    RowBox[{"lazyLists`Private`step", " ", 
                    RowBox[{"Range", "[", 
                    RowBox[{"0", ",", 
                    RowBox[{"lazyLists`Private`partition", "-", "1"}]}], 
                    "]"}]}]}], ",", 
                    RowBox[{
                    "lazyLists`Private`partition", " ", 
                    "lazyLists`Private`step"}]}], "]"}], "]"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"lazyLists`partitionedLazyRange\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"partitionedLazyRange[start, step, partitionLength] \
works like lazyRange, but yields a \
partitionedLazyList.\\npartitionedLazyRange[partitionLength] generates the \
natural numbers in chuncks of length partitionLength.\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{13., {4., 9.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{13., {4., 9.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "partitionedLazyRange[start, step, partitionLength] works like lazyRange, \
but yields a partitionedLazyList.\npartitionedLazyRange[partitionLength] \
generates the natural numbers in chuncks of length partitionLength.", 
    "Documentation" -> None, "OwnValues" -> None, "UpValues" -> None, 
    "DownValues" -> 
    Information`InformationValueForm[
     DownValues, lazyLists`partitionedLazyRange, {
      lazyLists`partitionedLazyRange[
         Optional[
          Pattern[lazyLists`Private`start, 
           Blank[]], 1], 
         Optional[
          Pattern[lazyLists`Private`step, 
           Blank[]], 1], 
         PatternTest[
          Pattern[lazyLists`Private`partition, 
           Blank[Integer]], Positive]] :> lazyLists`partitionedLazyList[
         lazyLists`lazyRange[
         lazyLists`Private`start + 
          lazyLists`Private`step Range[0, lazyLists`Private`partition - 1], 
          lazyLists`Private`partition lazyLists`Private`step]]}], "SubValues" -> 
    None, "DefaultValues" -> None, "NValues" -> None, "FormatValues" -> None, 
    "Options" -> None, "Attributes" -> {}, "FullName" -> 
    "lazyLists`partitionedLazyRange"], False]]], "Output",
 CellLabel->
  "Out[359]=",ExpressionUUID->"02c003bd-90d7-474b-804d-ea08c9cc99a4"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"partitionedLazyNestList[fun, elem, partitionLength] \
is a partitioned version of lazyNestList.\\nEach new partition is generated \
with NestList.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"partitionedLazyNestList", "[", 
                    RowBox[{
                    "lazyLists`Private`fun_", ",", "lazyLists`Private`elem_", 
                    ",", 
                    RowBox[{
                    "lazyLists`Private`partition_Integer", "?", 
                    "Positive"}]}], "]"}], ":=", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"lazyLists`Private`nestList", "=", 
                    RowBox[{"NestList", "[", 
                    RowBox[{"lazyLists`Private`fun", ",", "#1", ",", 
                    RowBox[{"lazyLists`Private`partition", "-", "1"}]}], 
                    "]"}]}], "}"}], ",", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"lazyLists`Private`last", "=", 
                    RowBox[{"Last", "[", "lazyLists`Private`nestList", 
                    "]"}]}], "}"}], ",", 
                    RowBox[{"partitionedLazyList", "[", 
                    RowBox[{"lazyLists`Private`nestList", ",", 
                    RowBox[{"#0", "[", 
                    RowBox[{
                    RowBox[{
                    "lazyLists`Private`fun", "[", "lazyLists`Private`last", 
                    "]"}], ",", 
                    RowBox[{"#2", "+", "1"}]}], "]"}]}], "]"}]}], "]"}]}], 
                    "]"}], "&"}], ")"}], "[", 
                    RowBox[{"lazyLists`Private`elem", ",", "1"}], "]"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"lazyLists`partitionedLazyNestList\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"partitionedLazyNestList[fun, elem, partitionLength] \
is a partitioned version of lazyNestList.\\nEach new partition is generated \
with NestList.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{13., {4., 9.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{13., {4., 9.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "partitionedLazyNestList[fun, elem, partitionLength] is a partitioned \
version of lazyNestList.\nEach new partition is generated with NestList.", 
    "Documentation" -> None, "OwnValues" -> None, "UpValues" -> None, 
    "DownValues" -> 
    Information`InformationValueForm[
     DownValues, lazyLists`partitionedLazyNestList, {
      lazyLists`partitionedLazyNestList[
         Pattern[lazyLists`Private`fun, 
          Blank[]], 
         Pattern[lazyLists`Private`elem, 
          Blank[]], 
         PatternTest[
          Pattern[lazyLists`Private`partition, 
           Blank[Integer]], Positive]] :> (
        With[{lazyLists`Private`nestList = 
          NestList[
           lazyLists`Private`fun, #, lazyLists`Private`partition - 1]}, 
         With[{lazyLists`Private`last = Last[lazyLists`Private`nestList]}, 
          lazyLists`partitionedLazyList[lazyLists`Private`nestList, 
           #0[
            lazyLists`Private`fun[lazyLists`Private`last], #2 + 1]]]]& )[
        lazyLists`Private`elem, 1]}], "SubValues" -> None, "DefaultValues" -> 
    None, "NValues" -> None, "FormatValues" -> None, "Options" -> None, 
    "Attributes" -> {}, "FullName" -> "lazyLists`partitionedLazyNestList"], 
   False]]], "Output",
 CellLabel->
  "Out[360]=",ExpressionUUID->"ba7d6fa8-d073-4f68-9f1f-c4bf5c0d3993"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"lazyPartition[l, n] turns an ordinary list or \
lazyList into a partitioned lazyList with chunks of length n.\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"lazyPartition", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"lazyList", "[", "]"}], "|", 
                    RowBox[{"{", "}"}]}], ",", "___"}], "]"}], ":=", 
                    RowBox[{"lazyList", "[", "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"lazyPartition", "[", 
                    RowBox[{
                    RowBox[{"lazyList", "[", 
                    RowBox[{"lazyLists`Private`fst_", ",", 
                    RowBox[{
                    "lazyList", "[", "lazyLists`Private`rest_List", "]"}]}], 
                    "]"}], ",", 
                    RowBox[{
                    "lazyLists`Private`newPart_Integer", "?", "Positive"}]}], 
                    "]"}], ":=", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"lazyLists`Private`newRest", "=", 
                    RowBox[{"Drop", "[", 
                    RowBox[{"lazyLists`Private`rest", ",", 
                    RowBox[{"UpTo", "[", 
                    RowBox[{"lazyLists`Private`newPart", "-", "1"}], "]"}]}], 
                    "]"}]}], "}"}], ",", 
                    RowBox[{"partitionedLazyList", "[", 
                    RowBox[{
                    RowBox[{"Prepend", "[", 
                    RowBox[{
                    RowBox[{"Take", "[", 
                    RowBox[{"lazyLists`Private`rest", ",", 
                    RowBox[{"UpTo", "[", 
                    RowBox[{"lazyLists`Private`newPart", "-", "1"}], "]"}]}], 
                    "]"}], ",", "lazyLists`Private`fst"}], "]"}], ",", 
                    RowBox[{"lazyPartition", "[", 
                    RowBox[{
                    "lazyLists`Private`newRest", ",", 
                    "lazyLists`Private`newPart"}], "]"}]}], "]"}]}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"lazyPartition", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"lazyList", "|", "partitionedLazyList"}], ")"}], 
                    "[", 
                    RowBox[{"_", ",", 
                    RowBox[{"HoldPattern", "[", 
                    RowBox[{"lazyLists`Private`lazyFiniteList", "[", 
                    RowBox[{
                    "lazyLists`Private`list_", ",", "lazyLists`Private`ind_", 
                    ",", 
                    RowBox[{"lazyLists`Private`p0_Integer", ":", "1"}]}], 
                    "]"}], "]"}]}], "]"}], ",", 
                    RowBox[{
                    "lazyLists`Private`newPart_Integer", "?", "Positive"}]}], 
                    "]"}], ":=", 
                    RowBox[{"lazyLists`Private`lazyFiniteList", "[", 
                    RowBox[{"lazyLists`Private`list", ",", 
                    RowBox[{
                    "lazyLists`Private`ind", "-", "lazyLists`Private`p0"}], 
                    ",", "lazyLists`Private`newPart"}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"lazyPartition", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"lazyList", "|", "partitionedLazyList"}], ")"}], 
                    "[", 
                    RowBox[{"_", ",", 
                    RowBox[{"HoldPattern", "[", 
                    RowBox[{"lazyLists`Private`lazyPeriodicListInternal", "[", 
                    RowBox[{
                    "lazyLists`Private`list_", ",", "lazyLists`Private`ind_", 
                    ",", "lazyLists`Private`max_", ",", 
                    RowBox[{"lazyLists`Private`p0_Integer", ":", "1"}]}], 
                    "]"}], "]"}]}], "]"}], ",", 
                    RowBox[{
                    "lazyLists`Private`newPart_Integer", "?", "Positive"}]}], 
                    "]"}], ":=", 
                    RowBox[{"lazyLists`Private`lazyPeriodicListInternal", "[", 
                    RowBox[{"lazyLists`Private`list", ",", 
                    RowBox[{
                    "lazyLists`Private`ind", "-", "lazyLists`Private`p0"}], 
                    ",", "lazyLists`Private`max", ",", 
                    "lazyLists`Private`newPart"}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"lazyPartition", "[", 
                    RowBox[{
                    RowBox[{"partitionedLazyList", "[", 
                    RowBox[{"lazyLists`Private`list_", ",", 
                    RowBox[{"lazyPartition", "[", 
                    RowBox[{"lazyLists`Private`tail_", ",", "_"}], "]"}]}], 
                    "]"}], ",", 
                    RowBox[{
                    "lazyLists`Private`partition_Integer", "?", 
                    "Positive"}]}], "]"}], ":=", 
                    RowBox[{"Take", "[", 
                    RowBox[{
                    RowBox[{"partitionedLazyList", "[", 
                    RowBox[{"lazyLists`Private`list", ",", 
                    RowBox[{"lazyPartition", "[", 
                    RowBox[{
                    "lazyLists`Private`tail", ",", 
                    "lazyLists`Private`partition"}], "]"}]}], "]"}], ",", 
                    "lazyLists`Private`partition"}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"lazyPartition", "[", 
                    RowBox[{
                    RowBox[{"lazyLists`Private`lz", ":", 
                    RowBox[{"_lazyList", "|", "_partitionedLazyList"}]}], ",", 
                    RowBox[{
                    "lazyLists`Private`partition_Integer", "?", 
                    "Positive"}]}], "]"}], ":=", 
                    RowBox[{"Replace", "[", 
                    RowBox[{
                    RowBox[{"Take", "[", 
                    RowBox[{
                    "lazyLists`Private`lz", ",", 
                    "lazyLists`Private`partition"}], "]"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"lazyList", "[", 
                    RowBox[{"lazyLists`Private`list_List", ",", 
                    RowBox[{"lazyList", "[", "]"}]}], "]"}], "\[RuleDelayed]", 
                    RowBox[{"partitionedLazyList", "[", 
                    RowBox[{"lazyLists`Private`list", ",", 
                    RowBox[{"lazyList", "[", "]"}]}], "]"}]}], ",", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{"lazyList", "|", "partitionedLazyList"}], ")"}], 
                    "[", 
                    RowBox[{"lazyLists`Private`list_List", ",", 
                    RowBox[{"lazyLists`Private`tail", ":", 
                    RowBox[{"Except", "[", 
                    RowBox[{"lazyList", "[", "]"}], "]"}]}]}], "]"}], 
                    "\[RuleDelayed]", 
                    RowBox[{"partitionedLazyList", "[", 
                    RowBox[{"lazyLists`Private`list", ",", 
                    RowBox[{"lazyPartition", "[", 
                    RowBox[{
                    "lazyLists`Private`tail", ",", 
                    "lazyLists`Private`partition"}], "]"}]}], "]"}]}]}], 
                    "}"}]}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"lazyPartition", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Hold", "[", 
                    RowBox[{"lazyLists`Private`list_Symbol", "?", "ListQ"}], 
                    "]"}], "|", "lazyLists`Private`list_List"}], ",", 
                    RowBox[{
                    "lazyLists`Private`n_Integer", "?", "Positive"}]}], "]"}],
                     ":=", 
                    RowBox[{"lazyLists`Private`lazyFiniteList", "[", 
                    RowBox[{
                    "lazyLists`Private`list", ",", "1", ",", 
                    "lazyLists`Private`n"}], "]"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"lazyLists`lazyPartition\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"lazyPartition[l, n] turns an ordinary list or \
lazyList into a partitioned lazyList with chunks of length n.\"\>", 
             "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{13., {4., 9.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{13., {4., 9.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "lazyPartition[l, n] turns an ordinary list or lazyList into a \
partitioned lazyList with chunks of length n.", "Documentation" -> None, 
    "OwnValues" -> None, "UpValues" -> None, "DownValues" -> 
    Information`InformationValueForm[
     DownValues, lazyLists`lazyPartition, {lazyLists`lazyPartition[
         Alternatives[
          lazyLists`lazyList[], {}], 
         BlankNullSequence[]] :> lazyLists`lazyList[], lazyLists`lazyPartition[
         lazyLists`lazyList[
          Pattern[lazyLists`Private`fst, 
           Blank[]], 
          lazyLists`lazyList[
           Pattern[lazyLists`Private`rest, 
            Blank[List]]]], 
         PatternTest[
          Pattern[lazyLists`Private`newPart, 
           Blank[Integer]], Positive]] :> 
       With[{lazyLists`Private`newRest = Drop[lazyLists`Private`rest, 
            UpTo[lazyLists`Private`newPart - 1]]}, 
         lazyLists`partitionedLazyList[
          Prepend[
           Take[lazyLists`Private`rest, 
            UpTo[lazyLists`Private`newPart - 1]], lazyLists`Private`fst], 
          lazyLists`lazyPartition[
          lazyLists`Private`newRest, lazyLists`Private`newPart]]], 
       lazyLists`lazyPartition[
         Alternatives[lazyLists`lazyList, lazyLists`partitionedLazyList][
          Blank[], 
          HoldPattern[
           lazyLists`Private`lazyFiniteList[
            Pattern[lazyLists`Private`list, 
             Blank[]], 
            Pattern[lazyLists`Private`ind, 
             Blank[]], 
            Optional[
             Pattern[lazyLists`Private`p0, 
              Blank[Integer]], 1]]]], 
         PatternTest[
          Pattern[lazyLists`Private`newPart, 
           Blank[Integer]], Positive]] :> 
       lazyLists`Private`lazyFiniteList[
        lazyLists`Private`list, lazyLists`Private`ind - lazyLists`Private`p0, 
         lazyLists`Private`newPart], lazyLists`lazyPartition[
         Alternatives[lazyLists`lazyList, lazyLists`partitionedLazyList][
          Blank[], 
          HoldPattern[
           lazyLists`Private`lazyPeriodicListInternal[
            Pattern[lazyLists`Private`list, 
             Blank[]], 
            Pattern[lazyLists`Private`ind, 
             Blank[]], 
            Pattern[lazyLists`Private`max, 
             Blank[]], 
            Optional[
             Pattern[lazyLists`Private`p0, 
              Blank[Integer]], 1]]]], 
         PatternTest[
          Pattern[lazyLists`Private`newPart, 
           Blank[Integer]], Positive]] :> 
       lazyLists`Private`lazyPeriodicListInternal[
        lazyLists`Private`list, lazyLists`Private`ind - lazyLists`Private`p0, 
         lazyLists`Private`max, lazyLists`Private`newPart], 
       lazyLists`lazyPartition[
         lazyLists`partitionedLazyList[
          Pattern[lazyLists`Private`list, 
           Blank[]], 
          lazyLists`lazyPartition[
           Pattern[lazyLists`Private`tail, 
            Blank[]], 
           Blank[]]], 
         PatternTest[
          Pattern[lazyLists`Private`partition, 
           Blank[Integer]], Positive]] :> Take[
         lazyLists`partitionedLazyList[lazyLists`Private`list, 
          lazyLists`lazyPartition[
          lazyLists`Private`tail, lazyLists`Private`partition]], 
         lazyLists`Private`partition], lazyLists`lazyPartition[
         Pattern[lazyLists`Private`lz, 
          Alternatives[
           Blank[lazyLists`lazyList], 
           Blank[lazyLists`partitionedLazyList]]], 
         PatternTest[
          Pattern[lazyLists`Private`partition, 
           Blank[Integer]], Positive]] :> Replace[
         Take[lazyLists`Private`lz, lazyLists`Private`partition], {
         lazyLists`lazyList[
            Pattern[lazyLists`Private`list, 
             Blank[List]], 
            lazyLists`lazyList[]] :> 
          lazyLists`partitionedLazyList[lazyLists`Private`list, 
            lazyLists`lazyList[]], 
          Alternatives[lazyLists`lazyList, lazyLists`partitionedLazyList][
            Pattern[lazyLists`Private`list, 
             Blank[List]], 
            Pattern[lazyLists`Private`tail, 
             Except[
              lazyLists`lazyList[]]]] :> 
          lazyLists`partitionedLazyList[lazyLists`Private`list, 
            lazyLists`lazyPartition[
            lazyLists`Private`tail, lazyLists`Private`partition]]}], 
       lazyLists`lazyPartition[
         Alternatives[
          Hold[
           PatternTest[
            Pattern[lazyLists`Private`list, 
             Blank[Symbol]], ListQ]], 
          Pattern[lazyLists`Private`list, 
           Blank[List]]], 
         PatternTest[
          Pattern[lazyLists`Private`n, 
           Blank[Integer]], Positive]] :> 
       lazyLists`Private`lazyFiniteList[
        lazyLists`Private`list, 1, lazyLists`Private`n]}], "SubValues" -> 
    None, "DefaultValues" -> None, "NValues" -> None, "FormatValues" -> None, 
    "Options" -> None, "Attributes" -> {}, "FullName" -> 
    "lazyLists`lazyPartition"], False]]], "Output",
 CellLabel->
  "Out[361]=",ExpressionUUID->"d1d37e8e-fec8-4dbc-b62b-eace46734614"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"repartitionAll[{lz1, lz2, ...}] returns the list of \
lazy lists, but with all partitioned lazylists restructured to be of the same \
partition length. Ordinary lazyLists will be converted to \
partitionedLazyLists.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"repartitionAll", "[", 
                    RowBox[{
                    RowBox[{"lazyLists`Private`exprs", ":", 
                    RowBox[{"{", 
                    RowBox[{"___", ",", 
                    RowBox[{"lazyList", "[", "]"}], ",", "___"}], "}"}]}], 
                    ",", "___"}], "]"}], ":=", 
                    RowBox[{"Replace", "[", 
                    RowBox[{"lazyLists`Private`exprs", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    "lazyLists`Private`lz", ":", 
                    "lazyLists`Private`lzPattern"}], "\[Rule]", 
                    RowBox[{"lazyList", "[", "]"}]}], "}"}], ",", 
                    RowBox[{"{", "1", "}"}]}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"repartitionAll", "[", 
                    RowBox[{"lazyLists`Private`exprs_List", ",", 
                    RowBox[{"lazyLists`Private`opts", ":", 
                    RowBox[{"OptionsPattern", "[", "]"}]}]}], "]"}], ":=", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"lazyLists`Private`lengths", "=", 
                    RowBox[{"Cases", "[", 
                    RowBox[{"lazyLists`Private`exprs", ",", 
                    RowBox[{
                    RowBox[{"partitionedLazyList", "[", 
                    RowBox[{"lazyLists`Private`lst_List", ",", "___"}], "]"}],
                     "\[RuleDelayed]", 
                    RowBox[{"Length", "[", "lazyLists`Private`lst", "]"}]}]}],
                     "]"}]}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"SameQ", "@@", "lazyLists`Private`lengths"}], "&&", 
                    RowBox[{"FreeQ", "[", 
                    RowBox[{"lazyLists`Private`exprs", ",", "_lazyList", ",", 
                    RowBox[{"{", "1", "}"}], ",", 
                    RowBox[{"Heads", "\[Rule]", "False"}]}], "]"}]}], ",", 
                    "lazyLists`Private`exprs", ",", 
                    RowBox[{"repartitionAll", "[", 
                    RowBox[{"lazyLists`Private`exprs", ",", 
                    RowBox[{
                    RowBox[{
                    "OptionValue", "[", "\<\"RepartitionFunction\"\>", "]"}], 
                    "[", "lazyLists`Private`lengths", "]"}]}], "]"}]}], "]"}],
                     "/;", 
                    RowBox[{"MatchQ", "[", 
                    RowBox[{"lazyLists`Private`lengths", ",", 
                    RowBox[{"{", "__Integer", "}"}]}], "]"}]}]}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"repartitionAll", "[", 
                    RowBox[{"lazyLists`Private`exprs_List", ",", 
                    RowBox[{
                    "lazyLists`Private`newLength_Integer", "?", 
                    "Positive"}]}], "]"}], ":=", 
                    RowBox[{"repartitionAll", "[", 
                    RowBox[{
                    RowBox[{"Replace", "[", 
                    RowBox[{"lazyLists`Private`exprs", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"lazyLists`Private`lz", ":", 
                    RowBox[{
                    RowBox[{"partitionedLazyList", "[", 
                    RowBox[{"_", ",", "_lazyPartition"}], "]"}], "|", 
                    "_lazyList"}]}], "\[RuleDelayed]", 
                    RowBox[{"lazyPartition", "[", 
                    RowBox[{
                    "lazyLists`Private`lz", ",", 
                    "lazyLists`Private`newLength"}], "]"}]}], ",", 
                    RowBox[{
                    "lazyLists`Private`partLz_partitionedLazyList", 
                    "\[RuleDelayed]", 
                    RowBox[{"Take", "[", 
                    RowBox[{
                    "lazyLists`Private`partLz", ",", 
                    "lazyLists`Private`newLength"}], "]"}]}]}], "}"}], ",", 
                    RowBox[{"{", "1", "}"}]}], "]"}], ",", 
                    
                    RowBox[{"\<\"RepartitionFunction\"\>", "\[Rule]", 
                    "Min"}]}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"repartitionAll", "[", 
                    RowBox[{"lazyLists`Private`other_", ",", "___"}], "]"}], ":=",
                     "lazyLists`Private`other"}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Options\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Options\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Options", "Tooltip"]& ], 
                   RowBox[{"\<\"RepartitionFunction\"\>", "\[Rule]", "Max"}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"lazyLists`repartitionAll\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"repartitionAll[{lz1, lz2, ...}] returns the list of \
lazy lists, but with all partitioned lazylists restructured to be of the same \
partition length. Ordinary lazyLists will be converted to \
partitionedLazyLists.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{13., {4., 9.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{13., {4., 9.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "repartitionAll[{lz1, lz2, ...}] returns the list of lazy lists, but with \
all partitioned lazylists restructured to be of the same partition length. \
Ordinary lazyLists will be converted to partitionedLazyLists.", 
    "Documentation" -> None, "OwnValues" -> None, "UpValues" -> None, 
    "DownValues" -> 
    Information`InformationValueForm[
     DownValues, lazyLists`repartitionAll, {lazyLists`repartitionAll[
         Pattern[lazyLists`Private`exprs, {
           BlankNullSequence[], 
           lazyLists`lazyList[], 
           BlankNullSequence[]}], 
         BlankNullSequence[]] :> 
       Replace[lazyLists`Private`exprs, {
         Pattern[lazyLists`Private`lz, lazyLists`Private`lzPattern] -> 
          lazyLists`lazyList[]}, {1}], lazyLists`repartitionAll[
         Pattern[lazyLists`Private`exprs, 
          Blank[List]], 
         Pattern[lazyLists`Private`opts, 
          OptionsPattern[]]] :> 
       With[{lazyLists`Private`lengths = 
          Cases[lazyLists`Private`exprs, lazyLists`partitionedLazyList[
              Pattern[lazyLists`Private`lst, 
               Blank[List]], 
              BlankNullSequence[]] :> Length[lazyLists`Private`lst]]}, 
         Condition[
          If[
           And[
            Apply[SameQ, lazyLists`Private`lengths], 
            FreeQ[lazyLists`Private`exprs, 
             Blank[lazyLists`lazyList], {1}, Heads -> False]], 
           lazyLists`Private`exprs, 
           lazyLists`repartitionAll[lazyLists`Private`exprs, 
            OptionValue["RepartitionFunction"][lazyLists`Private`lengths]]], 
          MatchQ[lazyLists`Private`lengths, {
            BlankSequence[Integer]}]]], lazyLists`repartitionAll[
         Pattern[lazyLists`Private`exprs, 
          Blank[List]], 
         PatternTest[
          Pattern[lazyLists`Private`newLength, 
           Blank[Integer]], Positive]] :> lazyLists`repartitionAll[
         Replace[lazyLists`Private`exprs, {Pattern[lazyLists`Private`lz, 
             Alternatives[
              lazyLists`partitionedLazyList[
               Blank[], 
               Blank[lazyLists`lazyPartition]], 
              Blank[lazyLists`lazyList]]] :> 
           lazyLists`lazyPartition[
            lazyLists`Private`lz, lazyLists`Private`newLength], 
           Pattern[lazyLists`Private`partLz, 
             Blank[lazyLists`partitionedLazyList]] :> 
           Take[lazyLists`Private`partLz, lazyLists`Private`newLength]}, {1}],
          "RepartitionFunction" -> Min], lazyLists`repartitionAll[
         Pattern[lazyLists`Private`other, 
          Blank[]], 
         BlankNullSequence[]] :> lazyLists`Private`other}], "SubValues" -> 
    None, "DefaultValues" -> None, "NValues" -> None, "FormatValues" -> None, 
    "Options" -> {"RepartitionFunction" -> Max}, "Attributes" -> {}, 
    "FullName" -> "lazyLists`repartitionAll"], False]]], "Output",
 CellLabel->"Out[362]=",ExpressionUUID->"a8fb981f-201b-40e2-8fd2-c67bcf1e82dd"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Implementation details and other functions", \
"Subsection",ExpressionUUID->"2afa4dd0-09a8-4f37-b66b-767769b7a1f0"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"?", 
  "$lazyIterationLimit"}], "\[IndentingNewLine]", "$lazyIterationLimit"}], \
"Input",
 CellLabel->
  "In[363]:=",ExpressionUUID->"d8833260-c2e5-4791-808b-7f6f92e54cfe"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"Iteration limit used for finding successive \
elements in a lazy list.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Assignment\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"OwnValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "OwnValues", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{"$lazyIterationLimit", "=", "\[Infinity]"}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"lazyLists`$lazyIterationLimit\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"Iteration limit used for finding successive \
elements in a lazy list.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{13., {4., 9.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{13., {4., 9.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "Iteration limit used for finding successive elements in a lazy list.", 
    "Documentation" -> None, "OwnValues" -> 
    Information`InformationValueForm[
     OwnValues, lazyLists`$lazyIterationLimit, {
      lazyLists`$lazyIterationLimit -> DirectedInfinity[1]}], "UpValues" -> 
    None, "DownValues" -> None, "SubValues" -> None, "DefaultValues" -> None, 
    "NValues" -> None, "FormatValues" -> None, "Options" -> None, 
    "Attributes" -> {}, "FullName" -> "lazyLists`$lazyIterationLimit"], 
   False]]], "Output",
 CellLabel->
  "Out[363]=",ExpressionUUID->"f4ae0bd7-099a-4bfb-a120-68e1152308fe"],

Cell[BoxData["\[Infinity]"], "Output",
 CellLabel->"Out[364]=",ExpressionUUID->"452cb611-bfe5-4b5a-a5c2-1737a18c9d5b"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"?", "bulkExtractElementsUsingIndexList"}], "\[IndentingNewLine]", 
 RowBox[{"?", "rangeTuplesAtPositions"}], "\[IndentingNewLine]", 
 RowBox[{"?", "nextIntegerTuple"}]}], "Input",
 CellLabel->
  "In[365]:=",ExpressionUUID->"cb70b7ac-11e0-4c24-9c10-811140f4999d"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"bulkExtractElementsUsingIndexList[lists, indices] \
converts elements from Tuples[Range /@ Length /@ lists] into elements from \
Tuples[lists]\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"bulkExtractElementsUsingIndexList", "[", 
                    RowBox[{
                    "lazyLists`Private`elementLists_List", "|", 
                    "lazyLists`Private`elementLists_Symbol", "|", 
                    RowBox[{
                    "Hold", "[", "lazyLists`Private`elementLists_Symbol", 
                    "]"}]}], "]"}], ":=", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"lazyLists`Private`lengths", "=", 
                    RowBox[{
                    "Length", "/@", "lazyLists`Private`elementLists"}]}], 
                    "}"}], ",", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Min", "[", 
                    RowBox[{"lazyLists`Private`lengths", "-", 
                    RowBox[{"Max", "/@", "#1"}]}], "]"}], "<", "0"}], ",", 
                    RowBox[{
                    RowBox[{"Append", "[", "endOfLazyList", "]"}], "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Quiet", "[", 
                    RowBox[{"Check", "[", 
                    RowBox[{
                    RowBox[{"MapThread", "[", 
                    RowBox[{"Part", ",", 
                    RowBox[{"{", 
                    RowBox[{"lazyLists`Private`elementLists", ",", "#1"}], 
                    "}"}]}], "]"}], ",", "Nothing"}], "]"}], "]"}], "&"}], 
                    ")"}], "/@", 
                    RowBox[{"Transpose", "[", "#1", "]"}]}], "]"}], ",", 
                    RowBox[{"Transpose", "[", 
                    RowBox[{"Developer`ToPackedArray", "[", 
                    RowBox[{"MapThread", "[", 
                    RowBox[{"Part", ",", 
                    RowBox[{"{", 
                    RowBox[{"lazyLists`Private`elementLists", ",", "#1"}], 
                    "}"}]}], "]"}], "]"}], "]"}]}], "]"}], "&"}]}], "]"}]}]},
                    {
                    RowBox[{
                    RowBox[{"bulkExtractElementsUsingIndexList", "[", 
                    RowBox[{
                    RowBox[{
                    "lazyLists`Private`elementList_List", "|", 
                    "lazyLists`Private`elementList_Symbol", "|", 
                    RowBox[{
                    "Hold", "[", "lazyLists`Private`elementList_Symbol", 
                    "]"}]}], ",", "lazyLists`Private`tupLength_Integer"}], 
                    "]"}], ":=", 
                    RowBox[{"With", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"lazyLists`Private`maxLenght", "=", 
                    RowBox[{
                    "Length", "[", "lazyLists`Private`elementList", "]"}]}], 
                    "}"}], ",", 
                    RowBox[{
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"Max", "[", "#1", "]"}], ">", 
                    "lazyLists`Private`maxLenght"}], ",", 
                    RowBox[{
                    RowBox[{"Append", "[", "endOfLazyList", "]"}], "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Quiet", "[", 
                    RowBox[{"Check", "[", 
                    RowBox[{
                    RowBox[{
                    "lazyLists`Private`elementList", "\[LeftDoubleBracket]", 
                    "#1", "\[RightDoubleBracket]"}], ",", "Nothing"}], "]"}], 
                    "]"}], "&"}], ")"}], "/@", 
                    RowBox[{"Transpose", "[", "#1", "]"}]}], "]"}], ",", 
                    RowBox[{"Transpose", "[", 
                    RowBox[{
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{
                    "lazyLists`Private`elementList", "\[LeftDoubleBracket]", 
                    "#1", "\[RightDoubleBracket]"}], "&"}], ")"}], "/@", 
                    "#1"}], "]"}]}], "]"}], "&"}]}], "]"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], \
"\<\"lazyLists`bulkExtractElementsUsingIndexList\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"bulkExtractElementsUsingIndexList[lists, indices] \
converts elements from Tuples[Range /@ Length /@ lists] into elements from \
Tuples[lists]\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{13., {4., 9.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{13., {4., 9.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "bulkExtractElementsUsingIndexList[lists, indices] converts elements from \
Tuples[Range /@ Length /@ lists] into elements from Tuples[lists]", 
    "Documentation" -> None, "OwnValues" -> None, "UpValues" -> None, 
    "DownValues" -> 
    Information`InformationValueForm[
     DownValues, lazyLists`bulkExtractElementsUsingIndexList, {
      lazyLists`bulkExtractElementsUsingIndexList[
         Alternatives[
          Pattern[lazyLists`Private`elementLists, 
           Blank[List]], 
          Pattern[lazyLists`Private`elementLists, 
           Blank[Symbol]], 
          Hold[
           Pattern[lazyLists`Private`elementLists, 
            Blank[Symbol]]]]] :> 
       With[{lazyLists`Private`lengths = 
          Map[Length, lazyLists`Private`elementLists]}, If[Min[
            Subtract[lazyLists`Private`lengths, 
             Map[Max, #]]] < 0, 
          Append[lazyLists`endOfLazyList][
           Map[Quiet[
             Check[
              MapThread[Part, {lazyLists`Private`elementLists, #}], 
              Nothing]]& , 
            Transpose[#]]], 
          Transpose[
           Developer`ToPackedArray[
            MapThread[Part, {lazyLists`Private`elementLists, #}]]]]& ], 
       lazyLists`bulkExtractElementsUsingIndexList[
         Alternatives[
          Pattern[lazyLists`Private`elementList, 
           Blank[List]], 
          Pattern[lazyLists`Private`elementList, 
           Blank[Symbol]], 
          Hold[
           Pattern[lazyLists`Private`elementList, 
            Blank[Symbol]]]], 
         Pattern[lazyLists`Private`tupLength, 
          Blank[Integer]]] :> 
       With[{lazyLists`Private`maxLenght = 
          Length[lazyLists`Private`elementList]}, If[
         Max[#] > lazyLists`Private`maxLenght, 
          Append[lazyLists`endOfLazyList][
           Map[Quiet[
             Check[
              Part[lazyLists`Private`elementList, #], Nothing]]& , 
            Transpose[#]]], 
          Transpose[
           Map[Part[lazyLists`Private`elementList, #]& , #]]]& ]}], 
    "SubValues" -> None, "DefaultValues" -> None, "NValues" -> None, 
    "FormatValues" -> None, "Options" -> None, "Attributes" -> {}, "FullName" -> 
    "lazyLists`bulkExtractElementsUsingIndexList"], False]]], "Output",
 CellLabel->
  "Out[365]=",ExpressionUUID->"937856d8-b987-4862-b901-31a2c1685be5"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"rangeTuplesAtPositions[Length /@ lists] is a \
CompiledFunction that directly generates elements of Tuples[Range /@ Length \
/@ lists]\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Definitions\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"Definitions\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "Definitions", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{
                    RowBox[{"rangeTuplesAtPositions", "[", 
                    RowBox[{"lazyLists`Private`lengths", ":", 
                    RowBox[{"{", "__Integer", "}"}]}], "]"}], ":=", 
                    RowBox[{"lazyLists`Private`decompose", "[", 
                    RowBox[{
                    "lazyLists`Private`basis", "[", 
                    "lazyLists`Private`lengths", "]"}], "]"}]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"lazyLists`rangeTuplesAtPositions\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"rangeTuplesAtPositions[Length /@ lists] is a \
CompiledFunction that directly generates elements of Tuples[Range /@ Length \
/@ lists]\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{13., {4., 9.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{13., {4., 9.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "rangeTuplesAtPositions[Length /@ lists] is a CompiledFunction that \
directly generates elements of Tuples[Range /@ Length /@ lists]", 
    "Documentation" -> None, "OwnValues" -> None, "UpValues" -> None, 
    "DownValues" -> 
    Information`InformationValueForm[
     DownValues, lazyLists`rangeTuplesAtPositions, {
      lazyLists`rangeTuplesAtPositions[
         Pattern[lazyLists`Private`lengths, {
           BlankSequence[Integer]}]] :> lazyLists`Private`decompose[
         lazyLists`Private`basis[lazyLists`Private`lengths]]}], "SubValues" -> 
    None, "DefaultValues" -> None, "NValues" -> None, "FormatValues" -> None, 
    "Options" -> None, "Attributes" -> {}, "FullName" -> 
    "lazyLists`rangeTuplesAtPositions"], False]]], "Output",
 CellLabel->
  "Out[366]=",ExpressionUUID->"a7a67361-c074-4ece-9881-74cd4c93c0a6"],

Cell[BoxData[
 InterpretationBox[
  StyleBox[
   FrameBox[
    DynamicModuleBox[{System`InformationDump`open$$ = False, 
     System`InformationDump`mouseOver$$ = False}, 
     PaneSelectorBox[{True->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False,
             BaseStyle -> None],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"nextIntegerTuple[{int1, int2, ...}] generates the \
next integer tuple in a canonical order.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          PaneBox[GridBox[{
             {
              
              DynamicModuleBox[{System`InformationDump`open$$ = {
               False, False, False, False, False, False, False, False, False, 
                False, False, False}}, 
               StyleBox[GridBox[{
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Assignment\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"OwnValues\"",
                    TooltipStyle->"TextStyling"],
                    Annotation[#, "OwnValues", "Tooltip"]& ], GridBox[{
                    {
                    RowBox[{"nextIntegerTuple", "=", 
                    TagBox[
                    RowBox[{"CompiledFunction", "[", 
                    RowBox[{
                    RowBox[{"{", "lazyLists`Private`tuple", "}"}], ",", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"lazyLists`Private`list", "=", 
                    RowBox[{"lazyLists`Private`tuple", "-", "1"}]}], ",", 
                    "lazyLists`Private`first"}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"lazyLists`Private`first", "=", 
                    RowBox[{"First", "[", "lazyLists`Private`list", "]"}]}], 
                    ";", 
                    RowBox[{"If", "[", 
                    RowBox[{
                    RowBox[{"lazyLists`Private`first", "\[Equal]", 
                    RowBox[{"Total", "[", "lazyLists`Private`list", "]"}]}], 
                    ",", 
                    RowBox[{"Append", "[", 
                    RowBox[{
                    RowBox[{"Table", "[", 
                    RowBox[{"1", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Length", "[", "lazyLists`Private`list", "]"}], 
                    "-", "1"}], "}"}]}], "]"}], ",", 
                    RowBox[{"lazyLists`Private`first", "+", "2"}]}], "]"}], 
                    ",", 
                    RowBox[{"1", "+", 
                    RowBox[{
                    TagBox[
                    RowBox[{"CompiledFunction", "[", 
                    RowBox[{
                    RowBox[{"{", "Combinatorica`Private`l", "}"}], ",", 
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"Combinatorica`Private`n", "=", 
                    RowBox[{"Plus", "@@", "Combinatorica`Private`l"}]}], ",", 
                    RowBox[{
                    "Combinatorica`Private`nl", "=", 
                    "Combinatorica`Private`l"}], ",", 
                    RowBox[{"Combinatorica`Private`t", "=", 
                    RowBox[{"Length", "[", "Combinatorica`Private`l", "]"}]}],
                     ",", "Combinatorica`Private`i"}], "}"}], ",", 
                    RowBox[{
                    RowBox[{"While", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    "Combinatorica`Private`l", "\[LeftDoubleBracket]", 
                    "Combinatorica`Private`t", "\[RightDoubleBracket]"}], 
                    "\[Equal]", "0"}], ",", 
                    RowBox[{"Combinatorica`Private`t", "--"}]}], "]"}], ";", 
                    RowBox[{
                    RowBox[{
                    "Combinatorica`Private`nl", "\[LeftDoubleBracket]", 
                    RowBox[{"Combinatorica`Private`t", "-", "1"}], 
                    "\[RightDoubleBracket]"}], "++"}], ";", 
                    RowBox[{"Do", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{
                    "Combinatorica`Private`nl", "\[LeftDoubleBracket]", 
                    "Combinatorica`Private`i", "\[RightDoubleBracket]"}], "=",
                     "0"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "Combinatorica`Private`i", ",", "Combinatorica`Private`t",
                     ",", 
                    RowBox[{"Length", "[", "Combinatorica`Private`l", "]"}]}],
                     "}"}]}], "]"}], ";", 
                    RowBox[{
                    RowBox[{
                    "Combinatorica`Private`nl", "\[LeftDoubleBracket]", 
                    RowBox[{"Length", "[", "Combinatorica`Private`l", "]"}], 
                    "\[RightDoubleBracket]"}], "=", 
                    RowBox[{
                    RowBox[{"Plus", "@@", 
                    RowBox[{"Take", "[", 
                    RowBox[{"Combinatorica`Private`l", ",", 
                    RowBox[{"-", 
                    RowBox[{"(", 
                    RowBox[{
                    RowBox[{"Length", "[", "Combinatorica`Private`l", "]"}], 
                    "-", "Combinatorica`Private`t", "+", "1"}], ")"}]}]}], 
                    "]"}]}], "-", "1"}]}], ";", 
                    "Combinatorica`Private`nl"}]}], "]"}], 
                    ",", "\<\"-CompiledCode-\"\>"}], "]"}],
                    False,
                    Editable->False,
                    SelectWithContents->True], "[", "lazyLists`Private`list", 
                    "]"}]}]}], "]"}]}]}], "]"}], 
                    ",", "\<\"-CompiledCode-\"\>"}], "]"}],
                    False,
                    Editable->False,
                    SelectWithContents->True]}]}
                    },
                    DefaultBaseStyle->"Column",
                    GridBoxAlignment->{"Columns" -> {{Left}}},
                    
                    GridBoxItemSize->{
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}]},
                  {
                   TagBox[
                    TooltipBox[
                    StyleBox["\<\" Full Name\"\>", "InformationRowLabel",
                    StripOnInput->False],
                    "\"FullName\"",
                    TooltipStyle->"TextStyling"],
                    
                    Annotation[#, "FullName", 
                    "Tooltip"]& ], "\<\"lazyLists`nextIntegerTuple\"\>"}
                 },
                 AutoDelete->False,
                 GridBoxAlignment->{"Columns" -> {Right, Left}},
                 GridBoxDividers->None,
                 GridBoxItemSize->{"Columns" -> {Automatic, Automatic}},
                 GridBoxSpacings->{"Columns" -> {
                    Offset[0.27999999999999997`], {
                    Offset[0.5599999999999999]}, 
                    Offset[0.27999999999999997`]}, "Rows" -> {
                    Offset[0.2], {
                    Offset[0.8]}, 
                    Offset[0.2]}}], "DialogStyle",
                StripOnInput->False],
               DynamicModuleValues:>{}]}
            },
            DefaultBaseStyle->"Column",
            GridBoxAlignment->{"Columns" -> {{Left}}},
            GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
            
            GridBoxItemSize->{
             "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
            GridBoxSpacings->{"Columns" -> {
                Offset[0.27999999999999997`], {
                 Offset[0.5599999999999999]}, 
                Offset[0.27999999999999997`]}, "Rows" -> {
                Offset[0.2], {
                 Offset[3.6]}, 
                Offset[0.2]}}],
           FrameMargins->6], ""},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpener"]], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "UpPointerOpenerHot"]]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, False],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"], False->
      TagBox[GridBox[{
         {
          ItemBox[
           PaneBox[
            StyleBox["\<\" Symbol\"\>", "InformationTitleText",
             StripOnInput->False],
            FrameMargins->{{4, 0}, {-1, 1}}],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           PaneBox[
            
            StyleBox["\<\"nextIntegerTuple[{int1, int2, ...}] generates the \
next integer tuple in a canonical order.\"\>", "InformationUsageText",
             StripOnInput->False,
             LineSpacing->{1.5, 1.5, 3.}],
            FrameMargins->{{10, 10}, {8, 10}}],
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False], 
          ItemBox["\<\"\"\>",
           BaseStyle->"InformationUsageSubtitleBackground",
           StripOnInput->False]},
         {
          ItemBox[
           TagBox[
            ButtonBox[
             PaneSelectorBox[{False->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpener"],
               ImageSizeCache->{13., {4., 9.}}], True->
              
              DynamicBox[FEPrivate`FrontEndResource[
               "FEBitmaps", "DownPointerOpenerHot"],
               ImageSizeCache->{13., {4., 9.}}]}, Dynamic[
              System`InformationDump`mouseOver$$]],
             Alignment->Left,
             Appearance->{"Default" -> None},
             
             ButtonFunction:>FEPrivate`Set[
              System`InformationDump`open$$, True],
             Evaluator->Automatic,
             FrameMargins->{{9, 0}, {0, 0}},
             ImageMargins->0,
             ImageSize->Full,
             Method->"Preemptive"],
            
            EventHandlerTag[{
             "MouseEntered" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, True], 
              "MouseExited" :> 
              FEPrivate`Set[System`InformationDump`mouseOver$$, False], 
              Method -> "Preemptive", PassEventsDown -> Automatic, 
              PassEventsUp -> True}]],
           BaseStyle->"InformationTitleBackground",
           StripOnInput->False], "\[SpanFromLeft]"}
        },
        AutoDelete->False,
        FrameStyle->Directive[
          GrayLevel[0.8], 
          Thickness[Tiny]],
        GridBoxAlignment->{"Columns" -> {Left, Right}, "Rows" -> {{Center}}},
        GridBoxDividers->{
         "Columns" -> {{None}}, "Rows" -> {False, {True}, False}},
        GridBoxItemSize->{
         "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}],
       "Grid"]}, Dynamic[System`InformationDump`open$$],
      BaselinePosition->Baseline,
      FrameMargins->0,
      ImageSize->Automatic],
     DynamicModuleValues:>{}],
    BaseStyle->"InformationGridFrame",
    StripOnInput->False], "InformationGridPlain",
   StripOnInput->False],
  InformationData[
   Association[
   "ObjectType" -> "Symbol", "Usage" -> 
    "nextIntegerTuple[{int1, int2, ...}] generates the next integer tuple in \
a canonical order.", "Documentation" -> None, "OwnValues" -> 
    Information`InformationValueForm[
     OwnValues, lazyLists`nextIntegerTuple, {
      lazyLists`nextIntegerTuple -> CompiledFunction[{11, 12., 7516}, {{
           Blank[Integer], 1}}, {{2, 1, 0}, {2, 1, 
         4}}, {{0, {2, 0, 8}}, {4, {2, 0, 3}}, {
          2, {2, 0, 10}}, {-1, {2, 0, 0}}, {1, {2, 0, 1}}}, {2, 17, 0, 0, 
         8}, {{41, 257, 2, 0, 0, 2, 1, 0, 2, 1, 1}, {38, 1, 0, 1, 0, 2}, {
          42, "TotalAll", 2, 1, 1, 2, 0, 3, 2, 0, 4}, {24, 2, 4, 0}, {2, 0, 
          15}, {33, 1, 6}, {12, 6, 0, 6}, {6, 8, 9}, {35, 6, 2, 2}, {6, 8, 
          7}, {3, 2}, {36, 9, 1, 2, 2}, {4, 7, 6, -1}, {12, 2, 10, 5}, {34, 1,
           1, 0, 2, 3}, {34, 1, 1, 3, 0, 4}, {
          42, "Insert", 2, 1, 2, -2, 0, 5, 2, 2, 4, 2, 1, 5}, {
          42, "CopyTensor", 2, 1, 5, 2, 1, 4}, {3, 50}, {
          42, "CopyTensor", 2, 1, 1, 2, 1, 2}, {
          42, "CopyTensor", 2, 1, 2, 2, 1, 4}, {6, 8, 12}, {33, 4, 9}, {6, 8, 
          15}, {3, 4}, {37, 4, 15, 2, 7}, {12, 12, 7, 13}, {6, 13, 12}, {4, 
          15, 9, -3}, {42, "CopyTensor", 2, 1, 2, 2, 1, 4}, {33, 2, 15}, {38, 
          2, 0, 15, 0, 11}, {24, 11, 8, 1}, {2, 1, 5}, {6, 15, 11}, {41, 258, 
          2, 0, 11, 2, 0, 1, 2, 0, 6}, {6, 6, 15}, {3, -6}, {12, 15, 0, 11}, {
          38, 4, 0, 11, 0, 6}, {12, 15, 0, 11}, {12, 6, 1, 9}, {39, 4, 0, 11, 
          0, 9}, {33, 2, 11}, {
          42, "IteratorCountI", 2, 0, 15, 2, 0, 11, 2, 0, 13}, {6, 0, 11}, {3,
           3}, {12, 15, 11, 7}, {39, 4, 0, 7, 0, 8}, {4, 11, 13, -2}, {33, 2, 
          9}, {33, 2, 5}, {18, 15, 13}, {12, 5, 13, 1, 5}, {18, 5, 13}, {
          42, "Take", 2, 1, 2, 2, 0, 8, 2, 0, 13, 2, 1, 7}, {6, 8, 13}, {33, 
          7, 7}, {6, 8, 16}, {3, 4}, {37, 7, 16, 2, 4}, {12, 13, 4, 14}, {6, 
          14, 13}, {4, 16, 7, -3}, {12, 13, 0, 13}, {39, 4, 0, 9, 0, 13}, {41,
           257, 2, 0, 1, 2, 1, 4, 2, 1, 3}, {
          42, "CopyTensor", 2, 1, 3, 2, 1, 4}, {1}}, 
         Function[{lazyLists`Private`tuple}, 
          
          Module[{lazyLists`Private`list = lazyLists`Private`tuple - 1, 
            lazyLists`Private`first}, 
           lazyLists`Private`first = First[lazyLists`Private`list]; 
           If[lazyLists`Private`first == Total[lazyLists`Private`list], 
             Append[
              Table[1, {Length[lazyLists`Private`list] - 1}], 
              lazyLists`Private`first + 2], 1 + 
             CompiledFunction[{11, 12., 5468}, {{
                 Blank[Integer], 1}}, {{2, 1, 0}, {2, 1, 
               2}}, {{0, {2, 0, 0}}, {-1, {2, 0, 9}}, {1, {2, 0, 8}}}, {1, 14,
                0, 0, 5}, {{42, "CopyTensor", 2, 1, 0, 2, 1, 2}, {6, 0, 2}, {
                33, 2, 7}, {6, 0, 12}, {3, 4}, {37, 2, 12, 2, 5}, {12, 2, 5, 
                10}, {6, 10, 2}, {4, 12, 7, -3}, {
                42, "CopyTensor", 2, 1, 0, 2, 1, 2}, {33, 0, 12}, {38, 0, 0, 
                12, 0, 6}, {24, 6, 0, 0}, {2, 0, 5}, {6, 12, 6}, {41, 258, 2, 
                0, 6, 2, 0, 8, 2, 0, 4}, {6, 4, 12}, {3, -6}, {12, 12, 9, 
                6}, {38, 2, 0, 6, 0, 4}, {12, 12, 9, 6}, {12, 4, 8, 7}, {39, 
                2, 0, 6, 0, 7}, {33, 0, 6}, {
                42, "IteratorCountI", 2, 0, 12, 2, 0, 6, 2, 0, 10}, {6, 9, 
                6}, {3, 3}, {12, 12, 6, 5}, {39, 2, 0, 5, 0, 0}, {4, 6, 
                10, -2}, {33, 0, 7}, {33, 0, 3}, {18, 12, 10}, {12, 3, 10, 8, 
                3}, {18, 3, 10}, {
                42, "Take", 2, 1, 0, 2, 0, 0, 2, 0, 10, 2, 1, 4}, {6, 0, 
                10}, {33, 4, 5}, {6, 0, 13}, {3, 4}, {37, 4, 13, 2, 1}, {12, 
                10, 1, 11}, {6, 11, 10}, {4, 13, 5, -3}, {12, 10, 9, 10}, {39,
                 2, 0, 7, 0, 10}, {1}}, 
               Function[{Combinatorica`Private`l}, 
                
                Module[{
                 Combinatorica`Private`n = 
                  Apply[Plus, Combinatorica`Private`l], 
                  Combinatorica`Private`nl = Combinatorica`Private`l, 
                  Combinatorica`Private`t = Length[Combinatorica`Private`l], 
                  Combinatorica`Private`i}, 
                 While[Part[Combinatorica`Private`l, Combinatorica`Private`t] == 
                   0, 
                   Decrement[Combinatorica`Private`t]]; Increment[
                   Part[
                   Combinatorica`Private`nl, Combinatorica`Private`t - 1]]; 
                 Do[Part[Combinatorica`Private`nl, Combinatorica`Private`i] = 
                   0, {Combinatorica`Private`i, Combinatorica`Private`t, 
                    Length[Combinatorica`Private`l]}]; 
                 Part[Combinatorica`Private`nl, 
                    Length[Combinatorica`Private`l]] = Apply[Plus, 
                    Take[
                    Combinatorica`Private`l, -(
                    Length[Combinatorica`Private`l] - Combinatorica`Private`t + 
                    1)]] - 1; Combinatorica`Private`nl]], Evaluate][
              lazyLists`Private`list]]]], Evaluate]}], "UpValues" -> None, 
    "DownValues" -> None, "SubValues" -> None, "DefaultValues" -> None, 
    "NValues" -> None, "FormatValues" -> None, "Options" -> None, 
    "Attributes" -> {}, "FullName" -> "lazyLists`nextIntegerTuple"], 
   False]]], "Output",
 CellLabel->"Out[367]=",ExpressionUUID->"b822b97e-9e75-4708-9de1-1f34bcff2a9e"]
}, Open  ]]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Usage examples", \
"Section",ExpressionUUID->"79b459a2-40b2-4d85-ad2a-91269059057f"],

Cell[CellGroupData[{

Cell["Creating lazyLists and extracting elements from them", \
"Subsection",ExpressionUUID->"9cdf5a73-58b8-496b-a090-8a5dfff3450d"],

Cell[CellGroupData[{

Cell["Basic examples", \
"Subsubsection",ExpressionUUID->"6f1662cc-282e-4277-a496-67b639785c4d"],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{"lazyRange", "[", 
     RowBox[{"start", ",", " ", "step"}], "]"}],
    FontWeight->"Bold"], TraditionalForm]],ExpressionUUID->
  "995a7677-cbcb-4c20-957f-a733d117f3e4"],
 " are the basic constructor for equally-spaced infinite lazyLists. Both \
arguments of lazyRange default to 1 when omitted. Thus,",
 Cell[BoxData[
  FormBox[
   RowBox[{" ", 
    RowBox[{"lazyRange", "[", "]"}]}], TraditionalForm]],ExpressionUUID->
  "a8408cdc-c5a0-4bfa-8e2e-8c21d5eb651f"],
 " represents the positive integers. Successive integers can be extracted by \
repeatedly applying ",
 StyleBox["Last",
  FontWeight->"Bold"],
 " or ",
 StyleBox["Rest",
  FontWeight->"Bold"],
 ":"
}], "Text",ExpressionUUID->"1a112eb4-0971-4789-9386-f0b04d8aa1e0"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"lazyRange", "[", "]"}], "\[IndentingNewLine]", 
 RowBox[{"Last", "@", "%"}], "\[IndentingNewLine]", 
 RowBox[{"Rest", "@", "%"}]}], "Input",
 CellLabel->
  "In[368]:=",ExpressionUUID->"dab87c82-c933-47c1-b843-edd59f2e403c"],

Cell[BoxData[
 RowBox[{"lazyList", "[", 
  RowBox[{"1", ",", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"lazyList", "[", 
       RowBox[{"#1", ",", 
        RowBox[{"#0", "[", 
         RowBox[{
          RowBox[{"#2", "+", "#1"}], ",", "#2"}], "]"}]}], "]"}], "&"}], 
     ")"}], "[", 
    RowBox[{
     RowBox[{"1", "+", "1"}], ",", "1"}], "]"}]}], "]"}]], "Output",
 CellLabel->
  "Out[368]=",ExpressionUUID->"73c6ef26-343b-4351-9176-19c96ba4fbd2"],

Cell[BoxData[
 RowBox[{"lazyList", "[", 
  RowBox[{"2", ",", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"lazyList", "[", 
       RowBox[{"#1", ",", 
        RowBox[{"#0", "[", 
         RowBox[{
          RowBox[{"#2", "+", "#1"}], ",", "#2"}], "]"}]}], "]"}], "&"}], 
     ")"}], "[", 
    RowBox[{
     RowBox[{"1", "+", "2"}], ",", "1"}], "]"}]}], "]"}]], "Output",
 CellLabel->
  "Out[369]=",ExpressionUUID->"ebd7d87d-2fa5-4abf-8fac-e986978a3327"],

Cell[BoxData[
 RowBox[{"lazyList", "[", 
  RowBox[{"3", ",", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"lazyList", "[", 
       RowBox[{"#1", ",", 
        RowBox[{"#0", "[", 
         RowBox[{
          RowBox[{"#2", "+", "#1"}], ",", "#2"}], "]"}]}], "]"}], "&"}], 
     ")"}], "[", 
    RowBox[{
     RowBox[{"1", "+", "3"}], ",", "1"}], "]"}]}], "]"}]], "Output",
 CellLabel->"Out[370]=",ExpressionUUID->"2a84189d-183e-4fde-8472-c637bcbb647a"]
}, Open  ]],

Cell[TextData[{
 StyleBox["lazyPowerRange[start, r]",
  FontWeight->"Bold"],
 " similarly creates a range of powers. Both lazyRange and lazyPowerRange can \
be symbolic:"
}], "Text",ExpressionUUID->"d47e9905-2b75-4b30-8f46-e31f3b1be6a7"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"lazyRange", "[", 
  RowBox[{"start", ",", "step"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Last", "@", "%"}], "\[IndentingNewLine]", 
 RowBox[{"lazyPowerRange", "[", 
  RowBox[{"start", ",", "r"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Last", "@", "%"}]}], "Input",
 CellLabel->
  "In[371]:=",ExpressionUUID->"430bd9f9-0ffd-4088-bed6-c2b3221739b1"],

Cell[BoxData[
 RowBox[{"lazyList", "[", 
  RowBox[{"start", ",", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"lazyList", "[", 
       RowBox[{"#1", ",", 
        RowBox[{"#0", "[", 
         RowBox[{
          RowBox[{"#2", "+", "#1"}], ",", "#2"}], "]"}]}], "]"}], "&"}], 
     ")"}], "[", 
    RowBox[{
     RowBox[{"step", "+", "start"}], ",", "step"}], "]"}]}], "]"}]], "Output",
 CellLabel->
  "Out[371]=",ExpressionUUID->"f89662c6-c901-4e7f-876d-379cb495abe2"],

Cell[BoxData[
 RowBox[{"lazyList", "[", 
  RowBox[{
   RowBox[{"start", "+", "step"}], ",", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"lazyList", "[", 
       RowBox[{"#1", ",", 
        RowBox[{"#0", "[", 
         RowBox[{
          RowBox[{"#2", "+", "#1"}], ",", "#2"}], "]"}]}], "]"}], "&"}], 
     ")"}], "[", 
    RowBox[{
     RowBox[{"step", "+", 
      RowBox[{"(", 
       RowBox[{"start", "+", "step"}], ")"}]}], ",", "step"}], "]"}]}], 
  "]"}]], "Output",
 CellLabel->
  "Out[372]=",ExpressionUUID->"2f10df69-913c-415d-8158-5d04fefb787d"],

Cell[BoxData[
 RowBox[{"lazyList", "[", 
  RowBox[{"start", ",", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"lazyList", "[", 
       RowBox[{"#1", ",", 
        RowBox[{"#0", "[", 
         RowBox[{
          RowBox[{"#2", " ", "#1"}], ",", "#2"}], "]"}]}], "]"}], "&"}], 
     ")"}], "[", 
    RowBox[{
     RowBox[{"r", " ", "start"}], ",", "r"}], "]"}]}], "]"}]], "Output",
 CellLabel->
  "Out[373]=",ExpressionUUID->"ada88213-5646-4c43-b771-ef38a2507601"],

Cell[BoxData[
 RowBox[{"lazyList", "[", 
  RowBox[{
   RowBox[{"r", " ", "start"}], ",", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"lazyList", "[", 
       RowBox[{"#1", ",", 
        RowBox[{"#0", "[", 
         RowBox[{
          RowBox[{"#2", " ", "#1"}], ",", "#2"}], "]"}]}], "]"}], "&"}], 
     ")"}], "[", 
    RowBox[{
     RowBox[{"r", " ", 
      RowBox[{"(", 
       RowBox[{"r", " ", "start"}], ")"}]}], ",", "r"}], "]"}]}], 
  "]"}]], "Output",
 CellLabel->"Out[374]=",ExpressionUUID->"d31b89b1-ff7e-4b00-9ce2-dc3b18107b02"]
}, Open  ]],

Cell[TextData[{
 "Nesting Last is not very efficient. Instead, use special functionalities of \
",
 StyleBox["Take",
  FontWeight->"Bold"],
 " and ",
 StyleBox["Part",
  FontWeight->"Bold"],
 " to continuously evaluate the tail of lazy list until the required elements \
have been found. "
}], "Text",ExpressionUUID->"c60618e2-1470-4fc2-98cd-8097bfc68e7d"],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{"Part", "[", 
     RowBox[{"lz", ",", " ", "n"}], "]"}],
    FontWeight->"Bold"], TraditionalForm]],ExpressionUUID->
  "530b8710-c51f-4480-95ea-a1943c15abd7"],
 " of a lazyList returns the ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["n", "th"], TraditionalForm]],ExpressionUUID->
  "a2ee4c5a-3790-4c4f-b079-8c24b67948cc"],
 " element, whereas",
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{" ", 
     RowBox[{"Part", "[", 
      RowBox[{"lz", ",", " ", 
       RowBox[{"{", "n", "}"}]}], "]"}]}],
    FontWeight->"Bold"], TraditionalForm]],ExpressionUUID->
  "621ebb6e-42a3-498a-992e-31a2370d61bf"],
 " returns a lazyList containing the ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["n", "th"], TraditionalForm]],ExpressionUUID->
  "9e85a72e-cd2e-472d-b039-32d152c5d678"],
 " element and the tail of the lazyList. This allows you to keep extracting \
further elements from the returned lazyList without losing progress. The \
lazyList does not keep track of position for efficiency reasons. This is up \
to the user."
}], "Text",ExpressionUUID->"7f5f6d4d-7f2f-4fb4-958f-2fabd9c6b849"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Part", "[", 
  RowBox[{
   RowBox[{"lazyRange", "[", "]"}], ",", "4"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Part", "[", 
  RowBox[{
   RowBox[{"lazyRange", "[", "]"}], ",", 
   RowBox[{"{", "4", "}"}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Last", "[", "%", "]"}], "\[IndentingNewLine]", 
 RowBox[{"Rest", "[", "%%", "]"}]}], "Input",
 CellLabel->
  "In[375]:=",ExpressionUUID->"62f4563c-892f-4239-8057-70dc5511ffaf"],

Cell[BoxData["4"], "Output",
 CellLabel->
  "Out[375]=",ExpressionUUID->"42a92af0-d00c-4db7-928a-e1b2c68e735e"],

Cell[BoxData[
 RowBox[{"lazyList", "[", 
  RowBox[{"4", ",", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"lazyList", "[", 
       RowBox[{"#1", ",", 
        RowBox[{"#0", "[", 
         RowBox[{
          RowBox[{"#2", "+", "#1"}], ",", "#2"}], "]"}]}], "]"}], "&"}], 
     ")"}], "[", 
    RowBox[{
     RowBox[{"1", "+", "4"}], ",", "1"}], "]"}]}], "]"}]], "Output",
 CellLabel->
  "Out[376]=",ExpressionUUID->"012b0194-ac32-4138-8a13-219eab9652f7"],

Cell[BoxData[
 RowBox[{"lazyList", "[", 
  RowBox[{"5", ",", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"lazyList", "[", 
       RowBox[{"#1", ",", 
        RowBox[{"#0", "[", 
         RowBox[{
          RowBox[{"#2", "+", "#1"}], ",", "#2"}], "]"}]}], "]"}], "&"}], 
     ")"}], "[", 
    RowBox[{
     RowBox[{"1", "+", "5"}], ",", "1"}], "]"}]}], "]"}]], "Output",
 CellLabel->
  "Out[377]=",ExpressionUUID->"8f0de936-a487-4b9e-82df-5cfced0bb989"],

Cell[BoxData[
 RowBox[{"lazyList", "[", 
  RowBox[{"5", ",", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"lazyList", "[", 
       RowBox[{"#1", ",", 
        RowBox[{"#0", "[", 
         RowBox[{
          RowBox[{"#2", "+", "#1"}], ",", "#2"}], "]"}]}], "]"}], "&"}], 
     ")"}], "[", 
    RowBox[{
     RowBox[{"1", "+", "5"}], ",", "1"}], "]"}]}], "]"}]], "Output",
 CellLabel->"Out[378]=",ExpressionUUID->"4a5ae6f6-7f2e-461f-9cda-d4102487fd86"]
}, Open  ]],

Cell[TextData[{
 "Multiple indices can be extracted in one go. In this case, the extracted \
elements will go in the first element of the returned lazyList while the tail \
will be left in the state of the highest visited index. ",
 StyleBox["Span",
  FontWeight->"Bold"],
 " is also supported for integers:"
}], "Text",ExpressionUUID->"b80e232f-0514-4341-9156-760672a0e40a"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Part", "[", 
  RowBox[{
   RowBox[{"lazyRange", "[", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "4", ",", " ", "10", ",", " ", "5"}], "}"}]}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"Part", "[", 
  RowBox[{
   RowBox[{"lazyRange", "[", "]"}], ",", 
   RowBox[{"10", ";;", "2", ";;", 
    RowBox[{"-", "2"}]}]}], "]"}]}], "Input",
 CellLabel->
  "In[379]:=",ExpressionUUID->"34dac2ad-2f9f-4764-b2c2-1e8b2142915d"],

Cell[BoxData[
 RowBox[{"lazyList", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "4", ",", "10", ",", "5"}], "}"}], ",", 
   RowBox[{"lazyList", "[", 
    RowBox[{"10", ",", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"lazyList", "[", 
         RowBox[{"#1", ",", 
          RowBox[{"#0", "[", 
           RowBox[{
            RowBox[{"#2", "+", "#1"}], ",", "#2"}], "]"}]}], "]"}], "&"}], 
       ")"}], "[", 
      RowBox[{
       RowBox[{"1", "+", "10"}], ",", "1"}], "]"}]}], "]"}]}], 
  "]"}]], "Output",
 CellLabel->
  "Out[379]=",ExpressionUUID->"52c6c8ac-b3c5-4fb3-a03d-85e7fc27ed5e"],

Cell[BoxData[
 RowBox[{"lazyList", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"10", ",", "8", ",", "6", ",", "4", ",", "2"}], "}"}], ",", 
   RowBox[{"lazyList", "[", 
    RowBox[{"10", ",", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"lazyList", "[", 
         RowBox[{"#1", ",", 
          RowBox[{"#0", "[", 
           RowBox[{
            RowBox[{"#2", "+", "#1"}], ",", "#2"}], "]"}]}], "]"}], "&"}], 
       ")"}], "[", 
      RowBox[{
       RowBox[{"1", "+", "10"}], ",", "1"}], "]"}]}], "]"}]}], 
  "]"}]], "Output",
 CellLabel->"Out[380]=",ExpressionUUID->"77395fcf-50d4-4f13-a371-112a35476692"]
}, Open  ]],

Cell[TextData[{
 StyleBox["lazyPartMap",
  FontWeight->"Bold"],
 " extracts values at particular indices while also retaining the tails at \
those positions:"
}], "Text",ExpressionUUID->"e9468ffe-b246-46a6-82e3-cce5359f2e50"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"lazyPartMap", "[", 
  RowBox[{
   RowBox[{"lazyRange", "[", "]"}], ",", 
   RowBox[{"Range", "[", 
    RowBox[{"2", ",", "22", ",", "4"}], "]"}]}], "]"}]], "Input",
 CellLabel->
  "In[381]:=",ExpressionUUID->"f1a4df16-3571-403e-9fa6-237293e18a55"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"lazyList", "[", 
    RowBox[{"2", ",", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"lazyList", "[", 
         RowBox[{"#1", ",", 
          RowBox[{"#0", "[", 
           RowBox[{
            RowBox[{"#2", "+", "#1"}], ",", "#2"}], "]"}]}], "]"}], "&"}], 
       ")"}], "[", 
      RowBox[{
       RowBox[{"1", "+", "2"}], ",", "1"}], "]"}]}], "]"}], ",", 
   RowBox[{"lazyList", "[", 
    RowBox[{"6", ",", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"lazyList", "[", 
         RowBox[{"#1", ",", 
          RowBox[{"#0", "[", 
           RowBox[{
            RowBox[{"#2", "+", "#1"}], ",", "#2"}], "]"}]}], "]"}], "&"}], 
       ")"}], "[", 
      RowBox[{
       RowBox[{"1", "+", "6"}], ",", "1"}], "]"}]}], "]"}], ",", 
   RowBox[{"lazyList", "[", 
    RowBox[{"10", ",", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"lazyList", "[", 
         RowBox[{"#1", ",", 
          RowBox[{"#0", "[", 
           RowBox[{
            RowBox[{"#2", "+", "#1"}], ",", "#2"}], "]"}]}], "]"}], "&"}], 
       ")"}], "[", 
      RowBox[{
       RowBox[{"1", "+", "10"}], ",", "1"}], "]"}]}], "]"}], ",", 
   RowBox[{"lazyList", "[", 
    RowBox[{"14", ",", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"lazyList", "[", 
         RowBox[{"#1", ",", 
          RowBox[{"#0", "[", 
           RowBox[{
            RowBox[{"#2", "+", "#1"}], ",", "#2"}], "]"}]}], "]"}], "&"}], 
       ")"}], "[", 
      RowBox[{
       RowBox[{"1", "+", "14"}], ",", "1"}], "]"}]}], "]"}], ",", 
   RowBox[{"lazyList", "[", 
    RowBox[{"18", ",", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"lazyList", "[", 
         RowBox[{"#1", ",", 
          RowBox[{"#0", "[", 
           RowBox[{
            RowBox[{"#2", "+", "#1"}], ",", "#2"}], "]"}]}], "]"}], "&"}], 
       ")"}], "[", 
      RowBox[{
       RowBox[{"1", "+", "18"}], ",", "1"}], "]"}]}], "]"}], ",", 
   RowBox[{"lazyList", "[", 
    RowBox[{"22", ",", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"lazyList", "[", 
         RowBox[{"#1", ",", 
          RowBox[{"#0", "[", 
           RowBox[{
            RowBox[{"#2", "+", "#1"}], ",", "#2"}], "]"}]}], "]"}], "&"}], 
       ")"}], "[", 
      RowBox[{
       RowBox[{"1", "+", "22"}], ",", "1"}], "]"}]}], "]"}]}], 
  "}"}]], "Output",
 CellLabel->"Out[381]=",ExpressionUUID->"caab65cc-a3f1-4589-9f10-7bdbaaffba47"]
}, Open  ]],

Cell["\<\
Attempting to extract a part that doesn\[CloseCurlyQuote]t exist from a \
finite lazyList will yield a message and return $Failed:\
\>", "Text",ExpressionUUID->"3989a517-8b84-4212-9e72-43c697532a27"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"lz", " ", "=", " ", 
   RowBox[{"lazyList", "[", 
    RowBox[{"Range", "[", "4", "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"lz", "[", 
  RowBox[{"[", "5", "]"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"lz", "[", 
  RowBox[{"[", 
   RowBox[{"{", "5", "}"}], "]"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"lz", "[", 
  RowBox[{"[", 
   RowBox[{"{", 
    RowBox[{"2", ",", "5"}], "}"}], "]"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"lz", "[", 
  RowBox[{"[", 
   RowBox[{"2", ";;", "5"}], "]"}], "]"}]}], "Input",
 CellLabel->
  "In[382]:=",ExpressionUUID->"32163113-6f5c-4fd9-8bf8-56f7acf65b56"],

Cell[BoxData["$Failed"], "Output",
 CellLabel->
  "Out[383]=",ExpressionUUID->"de4f2869-0bd0-4237-bf3b-c5e9aa48c9c6"],

Cell[BoxData["$Failed"], "Output",
 CellLabel->
  "Out[384]=",ExpressionUUID->"057e4f87-69b9-46cc-9206-bdd2b81218d7"],

Cell[BoxData["$Failed"], "Output",
 CellLabel->
  "Out[385]=",ExpressionUUID->"53ab1178-7158-474f-a316-5d0091cd33ba"],

Cell[BoxData["$Failed"], "Output",
 CellLabel->"Out[386]=",ExpressionUUID->"19d1230b-f0db-45ca-9621-5a3974db75a4"]
}, Open  ]],

Cell[TextData[{
 StyleBox["Take",
  FontWeight->"Bold"],
 " of lazyList returns lazyList. The first element is a list of the extracted \
elements. The tail is a lazyList at the point where ",
 StyleBox["Take",
  FontWeight->"Bold"],
 " stopped:"
}], "Text",ExpressionUUID->"66aa0271-c1d7-444e-bd61-b1bc2b426edf"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"list", "=", 
   RowBox[{"Take", "[", 
    RowBox[{
     RowBox[{"lazyRange", "[", "]"}], ",", "4"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"First", "[", "list", "]"}], "\[IndentingNewLine]", 
 RowBox[{"Last", "[", "list", "]"}], "\[IndentingNewLine]", 
 RowBox[{"Take", "[", 
  RowBox[{
   RowBox[{"Last", "[", "list", "]"}], ",", "5"}], "]"}]}], "Input",
 CellLabel->
  "In[387]:=",ExpressionUUID->"0deb31ae-48a0-4c10-b1c5-60e740712aa2"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}]], "Output",
 CellLabel->
  "Out[388]=",ExpressionUUID->"3786b847-4ed3-498e-a12a-216383ca2b4d"],

Cell[BoxData[
 RowBox[{"lazyList", "[", 
  RowBox[{"5", ",", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"lazyList", "[", 
       RowBox[{"#1", ",", 
        RowBox[{"#0", "[", 
         RowBox[{
          RowBox[{"#2", "+", "#1"}], ",", "#2"}], "]"}]}], "]"}], "&"}], 
     ")"}], "[", 
    RowBox[{
     RowBox[{"1", "+", "5"}], ",", "1"}], "]"}]}], "]"}]], "Output",
 CellLabel->
  "Out[389]=",ExpressionUUID->"7d995ab8-ed29-4cdd-a5df-62e2faae6aa5"],

Cell[BoxData[
 RowBox[{"lazyList", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"5", ",", "6", ",", "7", ",", "8", ",", "9"}], "}"}], ",", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"lazyList", "[", 
       RowBox[{"#1", ",", 
        RowBox[{"#0", "[", 
         RowBox[{
          RowBox[{"#2", "+", "#1"}], ",", "#2"}], "]"}]}], "]"}], "&"}], 
     ")"}], "[", 
    RowBox[{
     RowBox[{"1", "+", "9"}], ",", "1"}], "]"}]}], "]"}]], "Output",
 CellLabel->"Out[390]=",ExpressionUUID->"0d885307-0726-4d5d-b083-14e8e411d0bb"]
}, Open  ]],

Cell[TextData[{
 "It is possible to specify a lower and upper index for ",
 StyleBox["Take",
  FontWeight->"Bold"],
 ":"
}], "Text",ExpressionUUID->"8a0ddc07-8ca8-415e-9861-4912dc4f0514"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Take", "[", 
  RowBox[{
   RowBox[{"lazyRange", "[", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "10"}], "}"}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Take", "[", 
  RowBox[{
   RowBox[{"lazyRange", "[", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"10", ",", "5"}], "}"}]}], "]"}]}], "Input",
 CellLabel->
  "In[391]:=",ExpressionUUID->"65961842-2921-4b5c-bbac-e02cfc7d40ba"],

Cell[BoxData[
 RowBox[{"lazyList", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"5", ",", "6", ",", "7", ",", "8", ",", "9", ",", "10"}], "}"}], 
   ",", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"lazyList", "[", 
       RowBox[{"#1", ",", 
        RowBox[{"#0", "[", 
         RowBox[{
          RowBox[{"#2", "+", "#1"}], ",", "#2"}], "]"}]}], "]"}], "&"}], 
     ")"}], "[", 
    RowBox[{
     RowBox[{"1", "+", "10"}], ",", "1"}], "]"}]}], "]"}]], "Output",
 CellLabel->
  "Out[391]=",ExpressionUUID->"264633bd-5f03-42d4-b3b2-377a4f566f4d"],

Cell[BoxData[
 RowBox[{"lazyList", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"10", ",", "9", ",", "8", ",", "7", ",", "6", ",", "5"}], "}"}], 
   ",", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"lazyList", "[", 
       RowBox[{"#1", ",", 
        RowBox[{"#0", "[", 
         RowBox[{
          RowBox[{"#2", "+", "#1"}], ",", "#2"}], "]"}]}], "]"}], "&"}], 
     ")"}], "[", 
    RowBox[{
     RowBox[{"1", "+", "10"}], ",", "1"}], "]"}]}], "]"}]], "Output",
 CellLabel->"Out[392]=",ExpressionUUID->"17578025-4ff2-4dd7-8eca-9497a221c034"]
}, Open  ]],

Cell[TextData[{
 "Take will not issue a message if indices are requested beyond the length of \
the lazyList. Note that the end of a lazyList is signalled with the empty \
lazy list ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{"lazyList", "[", "]"}],
    FontWeight->"Bold"], TraditionalForm]],ExpressionUUID->
  "92cd0f22-3f11-43dd-9643-215da42cf7f2"],
 ":"
}], "Text",ExpressionUUID->"54f32590-2da2-49e5-b01e-8657a6c320f2"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Take", "[", 
  RowBox[{"lz", ",", "5"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Take", "[", 
  RowBox[{"lz", ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "5"}], "}"}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Take", "[", 
  RowBox[{"lz", ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "10"}], "}"}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Take", "[", 
  RowBox[{"lz", ",", 
   RowBox[{"{", 
    RowBox[{"10", ",", "3"}], "}"}]}], "]"}]}], "Input",
 CellLabel->
  "In[393]:=",ExpressionUUID->"ab6d13e6-fbcc-488f-9ed1-1029e38d203f"],

Cell[BoxData[
 RowBox[{"lazyList", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], ",", 
   RowBox[{"lazyList", "[", "]"}]}], "]"}]], "Output",
 CellLabel->
  "Out[393]=",ExpressionUUID->"816ab436-e5d1-4654-9b16-6201e44fa2ee"],

Cell[BoxData[
 RowBox[{"lazyList", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"3", ",", "4"}], "}"}], ",", 
   RowBox[{"lazyList", "[", "]"}]}], "]"}]], "Output",
 CellLabel->
  "Out[394]=",ExpressionUUID->"fdf651af-93b5-4b6c-9a95-07dd3d7ea31d"],

Cell[BoxData[
 RowBox[{"lazyList", "[", "]"}]], "Output",
 CellLabel->
  "Out[395]=",ExpressionUUID->"225f03bb-0d91-41ef-a7a4-2bb9c63704cf"],

Cell[BoxData[
 RowBox[{"lazyList", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"4", ",", "3"}], "}"}], ",", 
   RowBox[{"lazyList", "[", "]"}]}], "]"}]], "Output",
 CellLabel->"Out[396]=",ExpressionUUID->"dd5956af-4bee-48b0-95c3-70ad96ec5961"]
}, Open  ]],

Cell[TextData[{
 "The special token ",
 StyleBox["endOfLazyList",
  FontWeight->"Bold"],
 " signifies the end of a lazy list. Whenever it is encountered, the list is \
terminated immediately:"
}], "Text",ExpressionUUID->"c8e51ff5-c650-45b4-986d-9cad889bfe49"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"lazyList", "[", 
  RowBox[{"1", ",", 
   RowBox[{"lazyRange", "[", "]"}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"lazyList", "[", 
  RowBox[{"endOfLazyList", ",", 
   RowBox[{"lazyRange", "[", "]"}]}], "]"}]}], "Input",
 CellLabel->
  "In[397]:=",ExpressionUUID->"57afecf0-39c5-4c33-b4e8-87956def680e"],

Cell[BoxData[
 RowBox[{"lazyList", "[", 
  RowBox[{"1", ",", 
   RowBox[{"lazyRange", "[", "]"}]}], "]"}]], "Output",
 CellLabel->
  "Out[397]=",ExpressionUUID->"d5d02920-93eb-450b-bdab-7747f19331a7"],

Cell[BoxData[
 RowBox[{"lazyList", "[", "]"}]], "Output",
 CellLabel->"Out[398]=",ExpressionUUID->"869426ea-7d33-42a0-838d-af38f4bacfc6"]
}, Open  ]],

Cell[TextData[{
 StyleBox["TakeWhile",
  FontWeight->"Bold"],
 " also works with lazyLists. Note that the tail of the returned lazyList \
contains the first element that didn\[CloseCurlyQuote]t pass the test:"
}], "Text",ExpressionUUID->"d9a560d3-261a-4f9c-bb6c-955eabdcb76c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TakeWhile", "[", 
  RowBox[{
   RowBox[{"lazyPowerRange", "[", 
    RowBox[{"2", ",", "2"}], "]"}], ",", 
   RowBox[{
    RowBox[{"#", "<", "100"}], "&"}]}], "]"}]], "Input",
 CellLabel->
  "In[399]:=",ExpressionUUID->"81c528c1-fbff-4d04-adb4-9a8335001936"],

Cell[BoxData[
 RowBox[{"lazyList", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"2", ",", "4", ",", "8", ",", "16", ",", "32", ",", "64"}], "}"}],
    ",", 
   RowBox[{"lazyList", "[", 
    RowBox[{"128", ",", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"lazyList", "[", 
         RowBox[{"#1", ",", 
          RowBox[{"#0", "[", 
           RowBox[{
            RowBox[{"#2", " ", "#1"}], ",", "#2"}], "]"}]}], "]"}], "&"}], 
       ")"}], "[", 
      RowBox[{
       RowBox[{"2", " ", "128"}], ",", "2"}], "]"}]}], "]"}]}], 
  "]"}]], "Output",
 CellLabel->"Out[399]=",ExpressionUUID->"e5750b5a-bbe9-43a0-8900-a89ab956abee"]
}, Open  ]],

Cell[TextData[{
 "If only the last element that passed the test is required, use ",
 StyleBox["LengthWhile",
  FontWeight->"Bold"],
 ". Unlike the standard version of this function, it returns the index of the \
last element that passes the test as well as as a lazyList starting from that \
element:"
}], "Text",ExpressionUUID->"b92f4fa2-8bae-4df7-87ce-7995b2782773"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"LengthWhile", "[", 
  RowBox[{
   RowBox[{"lazyPowerRange", "[", 
    RowBox[{"2", ",", "2"}], "]"}], ",", 
   RowBox[{
    RowBox[{"#", "<", "100"}], "&"}]}], "]"}]], "Input",
 CellLabel->
  "In[400]:=",ExpressionUUID->"5edbdbc1-387e-4e11-9422-ece4121c89e4"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"Index\"\>", "\[Rule]", "6"}], ",", 
   RowBox[{"\<\"Element\"\>", "\[Rule]", 
    RowBox[{"lazyList", "[", 
     RowBox[{"64", ",", 
      RowBox[{"lazyList", "[", 
       RowBox[{"128", ",", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"lazyList", "[", 
            RowBox[{"#1", ",", 
             RowBox[{"#0", "[", 
              RowBox[{
               RowBox[{"#2", " ", "#1"}], ",", "#2"}], "]"}]}], "]"}], "&"}], 
          ")"}], "[", 
         RowBox[{
          RowBox[{"2", " ", "128"}], ",", "2"}], "]"}]}], "]"}]}], "]"}]}]}], 
  "\[RightAssociation]"}]], "Output",
 CellLabel->"Out[400]=",ExpressionUUID->"1f26c048-713d-4ae1-9046-b844aa8cc113"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Converting normal lists into lazyLists", \
"Subsubsection",ExpressionUUID->"e9acfd96-1276-4453-b2ce-ffbd20c0719e"],

Cell["\<\
Normal lists can be converted into lazyLists by wrapping lazyList around \
them. The list is stored in the tail and is streamed element-by-element:\
\>", "Text",ExpressionUUID->"115e41b9-6140-442b-806c-1dc1bda77a77"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"lazyList", "[", 
  RowBox[{"Fibonacci", "[", 
   RowBox[{"Range", "[", "10", "]"}], "]"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"First", "@", 
  RowBox[{"Take", "[", 
   RowBox[{"%", ",", "5"}], "]"}]}]}], "Input",
 CellLabel->
  "In[401]:=",ExpressionUUID->"a71ae506-2558-4576-96a7-cd81d08eff10"],

Cell[BoxData[
 RowBox[{"lazyList", "[", 
  RowBox[{"1", ",", 
   RowBox[{"lazyList", "[", 
    RowBox[{"{", 
     RowBox[{
     "1", ",", "2", ",", "3", ",", "5", ",", "8", ",", "13", ",", "21", ",", 
      "34", ",", "55"}], "}"}], "]"}]}], "]"}]], "Output",
 CellLabel->
  "Out[401]=",ExpressionUUID->"8cd44c37-b29a-4610-b72f-28ef53b1d17b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "1", ",", "2", ",", "3", ",", "5"}], "}"}]], "Output",
 CellLabel->"Out[402]=",ExpressionUUID->"ce7c8b7a-98ab-4388-a1d3-63d1e36f5b1d"]
}, Open  ]],

Cell[TextData[{
 "You can also use ",
 StyleBox["lazyPartition",
  FontWeight->"Bold"],
 " (see below) with finite lists:"
}], "Text",ExpressionUUID->"ff9fe05b-1e8f-4473-8bc3-1dc52da0d6be"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Take", "[", 
  RowBox[{
   RowBox[{"lazyPartition", "[", 
    RowBox[{
     RowBox[{"lazyList", "[", 
      RowBox[{"Fibonacci", "[", 
       RowBox[{"Range", "[", "10", "]"}], "]"}], "]"}], ",", " ", "5"}], 
    "]"}], ",", "All"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Take", "[", 
  RowBox[{
   RowBox[{"lazyPartition", "[", 
    RowBox[{
     RowBox[{"Fibonacci", "[", 
      RowBox[{"Range", "[", "10", "]"}], "]"}], ",", " ", "5"}], "]"}], ",", 
   "All"}], "]"}]}], "Input",
 CellLabel->
  "In[403]:=",ExpressionUUID->"1a3769da-224e-4f56-826e-7b6fc85bdd79"],

Cell[BoxData[
 RowBox[{"partitionedLazyList", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "1", ",", "1", ",", "2", ",", "3", ",", "5", ",", "8", ",", "13", ",", 
     "21", ",", "34", ",", "55"}], "}"}], ",", 
   RowBox[{"lazyList", "[", "]"}]}], "]"}]], "Output",
 CellLabel->
  "Out[403]=",ExpressionUUID->"6964e39a-62d6-43e9-9f78-b815a34252cf"],

Cell[BoxData[
 RowBox[{"partitionedLazyList", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "1", ",", "1", ",", "2", ",", "3", ",", "5", ",", "8", ",", "13", ",", 
     "21", ",", "34", ",", "55"}], "}"}], ",", 
   RowBox[{"lazyList", "[", "]"}]}], "]"}]], "Output",
 CellLabel->"Out[404]=",ExpressionUUID->"d5db54c0-1cce-4daa-a7bf-3f1039dcf314"]
}, Open  ]],

Cell["\<\
It is also possible to turn a symbol that refers to a list into a lazyList by \
wrapping Hold around it. This will store a reference to that list in the \
lazyList, meaning that if you change the source list, the lazyList will \
change as well:\
\>", "Text",ExpressionUUID->"49cab4cf-9bc5-40f6-b882-1a4b1090df44"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"fibList", "=", 
  RowBox[{"Fibonacci", "[", 
   RowBox[{"Range", "[", "10", "]"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"finiteLz", "=", 
  RowBox[{"lazyList", "[", 
   RowBox[{"Hold", "[", "fibList", "]"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"First", "@", 
  RowBox[{"Take", "[", 
   RowBox[{"finiteLz", ",", "All"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"fibList", " ", "=", " ", 
  RowBox[{"Fibonacci", "[", 
   RowBox[{"Range", "[", "20", "]"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"First", "@", 
  RowBox[{"Take", "[", 
   RowBox[{"finiteLz", ",", "All"}], "]"}]}]}], "Input",
 CellLabel->
  "In[405]:=",ExpressionUUID->"ddb15fbb-3cb6-4cd4-933f-c1f27036e5d5"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "1", ",", "2", ",", "3", ",", "5", ",", "8", ",", "13", ",", "21",
    ",", "34", ",", "55"}], "}"}]], "Output",
 CellLabel->
  "Out[405]=",ExpressionUUID->"e767cc19-33f9-46c7-b583-f01fe2e143fb"],

Cell[BoxData[
 RowBox[{"lazyList", "[", 
  RowBox[{"1", ",", 
   RowBox[{"lazyLists`Private`lazyFiniteList", "[", 
    RowBox[{"fibList", ",", 
     RowBox[{"1", "+", "1"}]}], "]"}]}], "]"}]], "Output",
 CellLabel->
  "Out[406]=",ExpressionUUID->"cfa8d2e4-cb35-48d0-883f-936c77bd9ece"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "1", ",", "2", ",", "3", ",", "5", ",", "8", ",", "13", ",", "21",
    ",", "34", ",", "55"}], "}"}]], "Output",
 CellLabel->
  "Out[407]=",ExpressionUUID->"230948d8-71f7-478d-bae5-600d35d07a4e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "1", ",", "2", ",", "3", ",", "5", ",", "8", ",", "13", ",", "21",
    ",", "34", ",", "55", ",", "89", ",", "144", ",", "233", ",", "377", ",", 
   "610", ",", "987", ",", "1597", ",", "2584", ",", "4181", ",", "6765"}], 
  "}"}]], "Output",
 CellLabel->
  "Out[408]=",ExpressionUUID->"6e505825-9e7c-4cb7-87fb-2714253769dd"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "1", ",", "2", ",", "3", ",", "5", ",", "8", ",", "13", ",", "21",
    ",", "34", ",", "55", ",", "89", ",", "144", ",", "233", ",", "377", ",", 
   "610", ",", "987", ",", "1597", ",", "2584", ",", "4181", ",", "6765"}], 
  "}"}]], "Output",
 CellLabel->"Out[409]=",ExpressionUUID->"92cd28cd-4990-4fec-9164-9b715c438dff"]
}, Open  ]],

Cell["\<\
The advantage of this approach is that the lazyList will have a smaller \
memory footprint and can be passed into other functions without the need to \
copy over large amounts of data:\
\>", "Text",ExpressionUUID->"65a024ec-b95f-4db8-9335-42474bfd2ace"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"fibList", "=", 
   RowBox[{"Fibonacci", "[", 
    RowBox[{"Range", "[", "1000", "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"lazyList", "[", "fibList", "]"}], "//", 
  "ByteCount"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"lazyList", "[", 
   RowBox[{"Hold", "[", "fibList", "]"}], "]"}], "//", 
  "ByteCount"}]}], "Input",
 CellLabel->
  "In[410]:=",ExpressionUUID->"6dc85e7e-3e1f-4218-913b-93b68a69ee2c"],

Cell[BoxData["89048"], "Output",
 CellLabel->
  "Out[411]=",ExpressionUUID->"ca9ce661-949e-4620-b926-57138f753e83"],

Cell[BoxData["216"], "Output",
 CellLabel->"Out[412]=",ExpressionUUID->"8486fbec-4835-4c9c-bb73-0d9ec76d5605"]
}, Open  ]],

Cell[TextData[{
 StyleBox["lazyFinitePart",
  FontWeight->"Bold"],
 " and ",
 StyleBox["lazyFiniteTake",
  FontWeight->"Bold"],
 " can be used to extract parts from lazyLists directly from the underlying \
symbol without having to traverse the lazyList:"
}], "Text",ExpressionUUID->"faf5e77f-060d-427c-a054-f7015d144306"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"lazyFinitePart", "[", 
   RowBox[{"finiteLz", ",", "4"}], "]"}], " ", "===", " ", 
  RowBox[{"Part", "[", 
   RowBox[{"fibList", ",", "4"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"lazyFiniteTake", "[", 
   RowBox[{"finiteLz", ",", 
    RowBox[{"{", 
     RowBox[{"2", ",", "4"}], "}"}]}], "]"}], "===", 
  RowBox[{"Take", "[", 
   RowBox[{"fibList", ",", 
    RowBox[{"{", 
     RowBox[{"2", ",", "4"}], "}"}]}], "]"}]}]}], "Input",
 CellLabel->
  "In[413]:=",ExpressionUUID->"1e24ba46-7d8b-4e06-87a9-4207f4abd148"],

Cell[BoxData["True"], "Output",
 CellLabel->
  "Out[413]=",ExpressionUUID->"cc98e893-ed39-4753-9dee-e69e4fb993ec"],

Cell[BoxData["True"], "Output",
 CellLabel->"Out[414]=",ExpressionUUID->"695f6597-a00c-4716-b7af-1f0ee3c6cae7"]
}, Open  ]],

Cell[TextData[{
 StyleBox["lazySetState",
  FontWeight->"Bold"],
 " can be used to directly move a finite lazyList to a given index without \
traversing. Also supports going to the last index directly:"
}], "Text",ExpressionUUID->"804de8df-4c8c-44d9-9302-8e8e55b8935d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"lazySetState", "[", 
  RowBox[{"finiteLz", ",", 
   RowBox[{"-", "1"}]}], "]"}]], "Input",
 CellLabel->
  "In[415]:=",ExpressionUUID->"823d9361-a12a-41f0-94a7-227f8178948c"],

Cell[BoxData[
 RowBox[{"lazyList", "[", 
  RowBox[{
  "434665576869374564356885276750406258025646605173717804024817290895365554179\
490518904038798400792551692959225930803226347752096896232398733224711616429964\
40906533187938298969649928516003704476137795166849228875", ",", 
   RowBox[{"lazyLists`Private`lazyFiniteList", "[", 
    RowBox[{"fibList", ",", 
     RowBox[{"1000", "+", "1"}]}], "]"}]}], "]"}]], "Output",
 CellLabel->"Out[415]=",ExpressionUUID->"2010b701-8f6e-421d-8673-6aae0c4d545d"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Transposition", \
"Subsubsection",ExpressionUUID->"f81aa9ee-aac7-4de5-bb4e-3a6e43e71b37"],

Cell[TextData[{
 "lazyLists can be transposed with ",
 StyleBox["lazyTranspose",
  FontWeight->"Bold"],
 ":"
}], "Text",ExpressionUUID->"c76a374a-4a99-4e7e-89a6-b031331f12d0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"First", "@", 
  RowBox[{"Take", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"lazyTranspose", "[", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"lazyRange", "[", "]"}], ",", 
       RowBox[{"lazyConstantArray", "[", "0", "]"}]}], "}"}], 
     "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", "5"}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 CellLabel->
  "In[416]:=",ExpressionUUID->"01271068-9a2f-4f9f-bdc4-c0b467f0c7b9"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "0"}], "}"}]}], "}"}]], "Output",
 CellLabel->"Out[416]=",ExpressionUUID->"517d8a14-ceab-4e7a-8a74-45ef03890a67"]
}, Open  ]],

Cell["\<\
Normal lists will be cast to lazyLists and the shortest lazyList will \
determine the length of the transpose:\
\>", "Text",ExpressionUUID->"72730567-d1aa-438e-80e6-bdc843e464c6"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"First", "@", 
  RowBox[{"Take", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"lazyTranspose", "[", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"lazyRange", "[", "]"}], ",", 
       RowBox[{"Range", "[", "5", "]"}]}], "}"}], "\[IndentingNewLine]", 
     "]"}], ",", "\[IndentingNewLine]", "All"}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 CellLabel->
  "In[417]:=",ExpressionUUID->"5e806e20-4a64-41f3-aff9-29bc7a95d35e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "5"}], "}"}]}], "}"}]], "Output",
 CellLabel->"Out[417]=",ExpressionUUID->"9bc704fd-6176-417d-97a6-fef2ff2889ad"]
}, Open  ]],

Cell[TextData[{
 "When applied to partitioned lazyLists (refer to the section below) that \
generate lists of lists, lazyTranspose transforms a list that generates ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "2726863e-de12-499c-a437-9f216f874d4d"],
 "-tuples in chunks of size ",
 Cell[BoxData[
  FormBox["m", TraditionalForm]],ExpressionUUID->
  "4e7d6770-ce58-42f3-a926-d2f0ae7fcf5f"],
 " into a list that generates ",
 Cell[BoxData[
  FormBox["m", TraditionalForm]],ExpressionUUID->
  "8d927eb5-5697-4fe3-88f1-6a427091bfb4"],
 "-tuples in chunks of size ",
 Cell[BoxData[
  FormBox["n", TraditionalForm]],ExpressionUUID->
  "68623f8d-3d92-41f7-a021-e26a8b45dcd2"],
 ":"
}], "Text",ExpressionUUID->"fa1a57c1-965c-4d58-9d77-f4c108922e60"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"lazyPartition", "[", 
  RowBox[{
   RowBox[{"lazyGenerator", "[", 
    RowBox[{
     RowBox[{"ConstantArray", "[", 
      RowBox[{"#", ",", "5"}], "]"}], "&"}], "]"}], ",", "3"}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"lazyTranspose", "@", "%"}]}], "Input",
 CellLabel->
  "In[418]:=",ExpressionUUID->"45f91863-4a8b-4840-8290-6a6ae937febf"],

Cell[BoxData[
 RowBox[{"partitionedLazyList", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "1", ",", "1", ",", "1", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"2", ",", "2", ",", "2", ",", "2", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"3", ",", "3", ",", "3", ",", "3", ",", "3"}], "}"}]}], "}"}], 
   ",", 
   RowBox[{"lazyPartition", "[", 
    RowBox[{
     RowBox[{"lazyLists`Private`twoSidedGenerator", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"ConstantArray", "[", 
         RowBox[{"#1", ",", "5"}], "]"}], "&"}], ",", 
       RowBox[{"3", "+", "1"}], ",", "1"}], "]"}], ",", "3"}], "]"}]}], 
  "]"}]], "Output",
 CellLabel->
  "Out[418]=",ExpressionUUID->"3b85c64e-d60f-4a0b-b850-d486e04667af"],

Cell[BoxData[
 RowBox[{"partitionedLazyList", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2", ",", "3"}], "}"}]}], "}"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"Transpose", ",", "Listable"}], "}"}], "/@", 
    RowBox[{"lazyPartition", "[", 
     RowBox[{
      RowBox[{"lazyLists`Private`twoSidedGenerator", "[", 
       RowBox[{
        RowBox[{
         RowBox[{"ConstantArray", "[", 
          RowBox[{"#1", ",", "5"}], "]"}], "&"}], ",", 
        RowBox[{"3", "+", "1"}], ",", "1"}], "]"}], ",", "3"}], "]"}]}]}], 
  "]"}]], "Output",
 CellLabel->"Out[419]=",ExpressionUUID->"7e965064-1e0e-44c5-a00f-06cf78218a8d"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Lazy generator", \
"Subsubsection",ExpressionUUID->"26898ac6-d54e-450a-a936-857ee5fc5b92"],

Cell[TextData[{
 StyleBox["lazyGenerator",
  FontWeight->"Bold"],
 " is used to generate lazyLists from a generating function in much the same \
way as Table. It has 5 arguments: ",
 Cell[BoxData[
  FormBox[
   RowBox[{"lazyGenerator", "[", 
    RowBox[{
    "fun", ",", " ", "start", ",", " ", "min", ",", " ", "max", ",", " ", 
     "step"}], "]"}], TraditionalForm]],ExpressionUUID->
  "4d0fa8ac-3001-48d3-90e0-697b8ca3e5a3"]
}], "Text",ExpressionUUID->"091a7650-9a36-4c83-987b-e4b754a39857"],

Cell[CellGroupData[{

Cell[TextData[{
 Cell[BoxData[
  FormBox["fun", TraditionalForm]],ExpressionUUID->
  "0224669c-b117-4ae9-b79e-00a105d14d99"],
 " the generating function"
}], "Item",ExpressionUUID->"127b423b-e334-4122-8740-ad04296ed7c5"],

Cell[TextData[{
 Cell[BoxData[
  FormBox["start", TraditionalForm]],ExpressionUUID->
  "03d24386-0c6c-4a65-8c91-4cb9f816d482"],
 " the starting value to apply the function to. Defaults to 1"
}], "Item",ExpressionUUID->"28bd2c1a-daa5-4650-a0b8-ee46a1046a75"],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{"min", ",", " ", "max"}], TraditionalForm]],ExpressionUUID->
  "7ef99663-e50a-454e-8161-f090c09e8f65"],
 " The minimum values fun can be applied to. Default to ",
 Cell[BoxData[
  FormBox[
   RowBox[{"-", "\[Infinity]"}], TraditionalForm]],ExpressionUUID->
  "7d85d512-abf4-4551-aa9e-950b8128004d"],
 " and ",
 Cell[BoxData[
  FormBox[
   RowBox[{"+", "\[Infinity]"}], TraditionalForm]],ExpressionUUID->
  "21231119-7098-4895-b137-49b3daa5ccb4"]
}], "Item",ExpressionUUID->"507dfb61-60fe-4375-94ae-bbda9b21f2cd"],

Cell[TextData[{
 Cell[BoxData[
  FormBox["step", TraditionalForm]],ExpressionUUID->
  "dc5325ce-8947-4333-9383-014dd4cbe392"],
 " the step size with which to increase the iterator of the table after each \
step. Defaults to 1"
}], "Item",ExpressionUUID->"a64d6517-5c3f-4592-88c7-50f1c70777c8"]
}, Open  ]],

Cell["\<\
The simplest form of lazyGenerator just specifies the function:\
\>", "Text",ExpressionUUID->"bd0674b1-8f96-4da1-9da1-6a8c201faba7"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"infiniteInBothDirections", " ", "=", " ", 
  RowBox[{"lazyGenerator", "[", "f", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"First", "@", 
  RowBox[{"Take", "[", 
   RowBox[{"infiniteInBothDirections", ",", "5"}], "]"}]}]}], "Input",
 CellLabel->
  "In[420]:=",ExpressionUUID->"cdb0de3c-6d7d-45d4-b18d-c463f687a508"],

Cell[BoxData[
 RowBox[{"lazyList", "[", 
  RowBox[{
   RowBox[{"f", "[", "1", "]"}], ",", 
   RowBox[{"lazyLists`Private`twoSidedGenerator", "[", 
    RowBox[{"f", ",", 
     RowBox[{"1", "+", "1"}], ",", "1"}], "]"}]}], "]"}]], "Output",
 CellLabel->
  "Out[420]=",ExpressionUUID->"e6dc84f2-f869-46c3-b89e-737bd773bbde"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"f", "[", "1", "]"}], ",", 
   RowBox[{"f", "[", "2", "]"}], ",", 
   RowBox[{"f", "[", "3", "]"}], ",", 
   RowBox[{"f", "[", "4", "]"}], ",", 
   RowBox[{"f", "[", "5", "]"}]}], "}"}]], "Output",
 CellLabel->"Out[421]=",ExpressionUUID->"2383beba-4474-46af-8160-228ac46966cd"]
}, Open  ]],

Cell["\<\
If the min and max limits are infinite, you can do symbolic steps:\
\>", "Text",ExpressionUUID->"2ee55deb-c936-404c-9dfc-eb155afb151a"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"symbolicGenerator", " ", "=", " ", 
  RowBox[{"lazyGenerator", "[", 
   RowBox[{"f", ",", " ", "start", ",", " ", 
    RowBox[{"-", "\[Infinity]"}], ",", "\[Infinity]", ",", "step"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"First", "@", 
  RowBox[{"Take", "[", 
   RowBox[{"symbolicGenerator", ",", " ", "5"}], "]"}]}]}], "Input",
 CellLabel->
  "In[422]:=",ExpressionUUID->"1fa6793f-bf16-4356-b0a4-72b0956494dc"],

Cell[BoxData[
 RowBox[{"lazyList", "[", 
  RowBox[{
   RowBox[{"f", "[", "start", "]"}], ",", 
   RowBox[{"lazyLists`Private`twoSidedGenerator", "[", 
    RowBox[{"f", ",", 
     RowBox[{"start", "+", "step"}], ",", "step"}], "]"}]}], "]"}]], "Output",
 CellLabel->
  "Out[422]=",ExpressionUUID->"01415f00-b15e-4531-adef-052f9f524019"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"f", "[", "start", "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"start", "+", "step"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"start", "+", 
     RowBox[{"2", " ", "step"}]}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"start", "+", 
     RowBox[{"3", " ", "step"}]}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"start", "+", 
     RowBox[{"4", " ", "step"}]}], "]"}]}], "}"}]], "Output",
 CellLabel->"Out[423]=",ExpressionUUID->"1e4def31-c2e8-490a-baf2-5a633bf2122d"]
}, Open  ]],

Cell["\<\
If limits are specified, the start and step have to be numeric. Take will \
automatically stop when a limit is reached:\
\>", "Text",ExpressionUUID->"ec412910-8086-4f94-8383-07ef4488ff6c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"First", "@", 
  RowBox[{"Take", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"lazyGenerator", "[", 
     RowBox[{"f", ",", " ", "2", ",", " ", "1", ",", "10", ",", "2"}], "]"}], 
    ",", "\[IndentingNewLine]", "50"}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 CellLabel->
  "In[424]:=",ExpressionUUID->"5f275465-d56b-4871-b8e1-19eda807544d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"f", "[", "2", "]"}], ",", 
   RowBox[{"f", "[", "4", "]"}], ",", 
   RowBox[{"f", "[", "6", "]"}], ",", 
   RowBox[{"f", "[", "8", "]"}], ",", 
   RowBox[{"f", "[", "10", "]"}]}], "}"}]], "Output",
 CellLabel->"Out[424]=",ExpressionUUID->"22303b82-3c5e-4aad-bb99-d747a83d49ca"]
}, Open  ]],

Cell[TextData[{
 "Use ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{"TakeWhile", "[", "lz", "]"}],
    FontWeight->"Bold"], TraditionalForm]],ExpressionUUID->
  "5ef15816-5a91-457d-87f1-6bfc8c368bce"],
 " or ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{"Take", "[", 
     RowBox[{"lz", ",", " ", "All"}], "]"}],
    FontWeight->"Bold"], TraditionalForm]],ExpressionUUID->
  "df8b5647-ceb4-40a6-8546-b85db73f7c86"],
 " to get all elements (this is equivalent to ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{"TakeWhile", "[", 
     RowBox[{"lz", ",", " ", 
      RowBox[{"True", "&"}]}], "]"}],
    FontWeight->"Bold"], TraditionalForm]],ExpressionUUID->
  "93ec8546-4913-4b08-892f-746a3eb3fc29"],
 ":"
}], "Text",ExpressionUUID->"5ff88c39-01f2-4ab6-b749-d72d1662889e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Take", "[", 
  RowBox[{
   RowBox[{"lazyGenerator", "[", 
    RowBox[{"f", ",", " ", "2", ",", " ", "1", ",", "10", ",", "2"}], "]"}], 
   ",", "All"}], "]"}]], "Input",
 CellLabel->
  "In[425]:=",ExpressionUUID->"f95caa4d-79ed-4271-813e-a3cbaf3060e4"],

Cell[BoxData[
 RowBox[{"lazyList", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"f", "[", "2", "]"}], ",", 
     RowBox[{"f", "[", "4", "]"}], ",", 
     RowBox[{"f", "[", "6", "]"}], ",", 
     RowBox[{"f", "[", "8", "]"}], ",", 
     RowBox[{"f", "[", "10", "]"}]}], "}"}], ",", 
   RowBox[{"lazyList", "[", "]"}]}], "]"}]], "Output",
 CellLabel->"Out[425]=",ExpressionUUID->"3cd0844c-0ca6-494b-9d97-8482464a0e0d"]
}, Open  ]],

Cell[TextData[{
 "To get the last element, you can use ",
 Cell[BoxData[
  FormBox[
   RowBox[{"Part", "[", 
    RowBox[{"lz", ",", " ", 
     RowBox[{"-", "1"}]}], "]"}], TraditionalForm]],
  FontWeight->"Bold",ExpressionUUID->"42b40688-4095-4c24-b499-6195a78c4afe"],
 " syntax (other negative numbers are not supported), which uses ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{"LengthWhile", "[", 
     RowBox[{"lz", ",", " ", 
      RowBox[{"True", "&"}]}], "]"}],
    FontWeight->"Bold"], TraditionalForm]],ExpressionUUID->
  "c585d10f-f65b-4db7-bb97-246fb11e6ba8"],
 " (the function can be omitted since it defaults to ",
 Cell[BoxData[
  FormBox[
   RowBox[{"True", "&"}], TraditionalForm]],ExpressionUUID->
  "4da4a18c-ddb2-452e-bbc5-878522a59d1e"],
 ")"
}], "Text",ExpressionUUID->"bd342ce3-8dd8-4686-bfc1-ddc6bda67a4f"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"LengthWhile", "[", 
  RowBox[{"lazyGenerator", "[", 
   RowBox[{"f", ",", " ", "2", ",", " ", "1", ",", "10", ",", "2"}], "]"}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"lazyGenerator", "[", 
   RowBox[{"f", ",", " ", "2", ",", " ", "1", ",", "10", ",", "2"}], "]"}], 
  "[", 
  RowBox[{"[", 
   RowBox[{"{", 
    RowBox[{"-", "1"}], "}"}], "]"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"lazyGenerator", "[", 
   RowBox[{"f", ",", " ", "2", ",", " ", "1", ",", "10", ",", "2"}], "]"}], 
  "[", 
  RowBox[{"[", 
   RowBox[{"-", "1"}], "]"}], "]"}]}], "Input",
 CellLabel->
  "In[426]:=",ExpressionUUID->"fb320931-5a9d-4d89-91a0-5e4a8dbd0744"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"Index\"\>", "\[Rule]", "5"}], ",", 
   RowBox[{"\<\"Element\"\>", "\[Rule]", 
    RowBox[{"lazyList", "[", 
     RowBox[{
      RowBox[{"f", "[", "10", "]"}], ",", 
      RowBox[{"lazyList", "[", "]"}]}], "]"}]}]}], 
  "\[RightAssociation]"}]], "Output",
 CellLabel->
  "Out[426]=",ExpressionUUID->"208944eb-fad4-42c7-b00b-13eea33f964b"],

Cell[BoxData[
 RowBox[{"lazyList", "[", 
  RowBox[{
   RowBox[{"f", "[", "10", "]"}], ",", 
   RowBox[{"lazyList", "[", "]"}]}], "]"}]], "Output",
 CellLabel->
  "Out[427]=",ExpressionUUID->"0234d611-986c-4868-9c2a-d8474c37a788"],

Cell[BoxData[
 RowBox[{"f", "[", "10", "]"}]], "Output",
 CellLabel->"Out[428]=",ExpressionUUID->"6f3d563e-70ea-4361-ba20-6fb177fb2da8"]
}, Open  ]],

Cell[TextData[{
 StyleBox["lazySetState",
  FontWeight->"Bold"],
 " can be used with lazyGenerator lists. It override the current position of \
the generator and reset it to the given value. Notice that this means that \
this can create a completely different generator if it is set to a value the \
original would never visit. The step size and min/max values are retained:"
}], "Text",ExpressionUUID->"1e034299-8ca5-4d23-a766-3a7fb63544ce"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"l", " ", "=", " ", 
  RowBox[{"Take", "[", 
   RowBox[{
    RowBox[{"lazyGenerator", "[", 
     RowBox[{"f", ",", " ", "2", ",", " ", "1", ",", "10", ",", "2"}], "]"}], 
    ",", "3"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"Take", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"lazySetState", "[", 
    RowBox[{
     RowBox[{"Last", "[", "l", "]"}], ",", "3"}], "]"}], ",", 
   "\[IndentingNewLine]", "3"}], "\[IndentingNewLine]", "]"}]}], "Input",
 CellLabel->
  "In[429]:=",ExpressionUUID->"cd734a99-8091-4dc1-8e3e-b6f7adc74e54"],

Cell[BoxData[
 RowBox[{"lazyList", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"f", "[", "2", "]"}], ",", 
     RowBox[{"f", "[", "4", "]"}], ",", 
     RowBox[{"f", "[", "6", "]"}]}], "}"}], ",", 
   RowBox[{"lazyLists`Private`finiteGenerator", "[", 
    RowBox[{"f", ",", 
     RowBox[{"6", "+", "2"}], ",", "1", ",", "10", ",", "2"}], "]"}]}], 
  "]"}]], "Output",
 CellLabel->
  "Out[429]=",ExpressionUUID->"b1ca9d28-208a-48e0-90d3-77e88d471dd8"],

Cell[BoxData[
 RowBox[{"lazyList", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"f", "[", "3", "]"}], ",", 
     RowBox[{"f", "[", "5", "]"}], ",", 
     RowBox[{"f", "[", "7", "]"}]}], "}"}], ",", 
   RowBox[{"lazyLists`Private`finiteGenerator", "[", 
    RowBox[{"f", ",", 
     RowBox[{"7", "+", "2"}], ",", "1", ",", "10", ",", "2"}], "]"}]}], 
  "]"}]], "Output",
 CellLabel->"Out[430]=",ExpressionUUID->"8bb35a4d-9c4f-4a14-8f0d-1a66de07d08d"]
}, Open  ]],

Cell["\<\
This also works with lazyRange, lazyPowerRange, and lazyNestList. \
lazySetState effectively re-creates these lists with a new starting value:\
\>", "Text",ExpressionUUID->"75e339ce-7d36-4821-a9c4-78a0c90eccd1"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"lazySetState", "[", 
  RowBox[{
   RowBox[{"lazyRange", "[", 
    RowBox[{"start", ",", " ", "step"}], "]"}], ",", "newStart"}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"lazySetState", "[", 
  RowBox[{
   RowBox[{"lazyPowerRange", "[", 
    RowBox[{"start", ",", "r"}], "]"}], ",", "newStart"}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"lazySetState", "[", 
  RowBox[{
   RowBox[{"lazyNestList", "[", 
    RowBox[{"f", ",", "start"}], "]"}], ",", "newStart"}], "]"}]}], "Input",
 CellLabel->
  "In[431]:=",ExpressionUUID->"49d0ed21-a0e9-422e-975e-ec265be2c6ac"],

Cell[BoxData[
 RowBox[{"lazyList", "[", 
  RowBox[{"newStart", ",", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"lazyList", "[", 
       RowBox[{"#1", ",", 
        RowBox[{"#0", "[", 
         RowBox[{
          RowBox[{"#2", "+", "#1"}], ",", "#2"}], "]"}]}], "]"}], "&"}], 
     ")"}], "[", 
    RowBox[{
     RowBox[{"step", "+", "newStart"}], ",", "step"}], "]"}]}], 
  "]"}]], "Output",
 CellLabel->
  "Out[431]=",ExpressionUUID->"854c35ce-9159-4f49-9a95-00d4be3f1964"],

Cell[BoxData[
 RowBox[{"lazyList", "[", 
  RowBox[{"newStart", ",", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"lazyList", "[", 
       RowBox[{"#1", ",", 
        RowBox[{"#0", "[", 
         RowBox[{
          RowBox[{"#2", " ", "#1"}], ",", "#2"}], "]"}]}], "]"}], "&"}], 
     ")"}], "[", 
    RowBox[{
     RowBox[{"r", " ", "newStart"}], ",", "r"}], "]"}]}], "]"}]], "Output",
 CellLabel->
  "Out[432]=",ExpressionUUID->"d994e862-1734-425f-aa39-57610ea39a21"],

Cell[BoxData[
 RowBox[{"lazyList", "[", 
  RowBox[{"newStart", ",", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"lazyList", "[", 
       RowBox[{"#1", ",", 
        RowBox[{"#0", "[", 
         RowBox[{
          RowBox[{"f", "[", "#1", "]"}], ",", 
          RowBox[{"#2", "+", "1"}]}], "]"}]}], "]"}], "&"}], ")"}], "[", 
    RowBox[{
     RowBox[{"f", "[", "newStart", "]"}], ",", 
     RowBox[{"2", "+", "1"}]}], "]"}]}], "]"}]], "Output",
 CellLabel->"Out[433]=",ExpressionUUID->"763ea577-3937-472a-870c-ccd1403ae5d3"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Partitioned lazyLists", \
"Subsubsection",ExpressionUUID->"200a106f-55e4-48c1-b01a-987d1e32abb8"],

Cell[TextData[{
 StyleBox["partitionedLazyList",
  FontWeight->"Bold"],
 " is a special type of lazyList that generates ordinary lists and is meant \
as an intermediate option between lazy and eager generation of lists. Normal \
lists generate all their elements immediately while lazyLists generate them \
one-by-one. Partitioned LazyLists, by contrast, generated them in \
controllable chunks. "
}], "Text",ExpressionUUID->"e1ecebcb-5e45-4680-a1f9-9bd66ebb1b0d"],

Cell[TextData[{
 "The basic way to create partitioned lazyList is with ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{"partitionedLazyRange", "[", 
     RowBox[{"start", ",", " ", "step", ",", " ", "chunkSize"}], "]"}],
    FontWeight->"Bold"], TraditionalForm]],ExpressionUUID->
  "1dbb9f7e-ca08-429b-971a-9c94626717eb"],
 ". Note that you extract the first argument of a partitionedLazyList with ",
 StyleBox["Most",
  FontWeight->"Bold"],
 ". ",
 StyleBox["First",
  FontWeight->"Bold"],
 " will only extract the first element of the list:"
}], "Text",ExpressionUUID->"ee68415a-6907-4e87-90d4-e6e0a8c7e7b9"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"partitionedLazyRange", "[", 
  RowBox[{"start", ",", "step", ",", " ", "5"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"First", "@", 
  RowBox[{"Take", "[", 
   RowBox[{"%", ",", "20"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"Most", "@", 
  RowBox[{"Take", "[", 
   RowBox[{"%%", ",", " ", "20"}], "]"}]}]}], "Input",
 CellLabel->
  "In[434]:=",ExpressionUUID->"5b8b5bbe-e21e-46ea-acdd-7460305886dd"],

Cell[BoxData[
 RowBox[{"partitionedLazyList", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"start", ",", 
     RowBox[{"start", "+", "step"}], ",", 
     RowBox[{"start", "+", 
      RowBox[{"2", " ", "step"}]}], ",", 
     RowBox[{"start", "+", 
      RowBox[{"3", " ", "step"}]}], ",", 
     RowBox[{"start", "+", 
      RowBox[{"4", " ", "step"}]}]}], "}"}], ",", 
   RowBox[{"partitionedLazyList", "[", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"lazyList", "[", 
        RowBox[{"#1", ",", 
         RowBox[{"#0", "[", 
          RowBox[{
           RowBox[{"#2", "+", "#1"}], ",", "#2"}], "]"}]}], "]"}], "&"}], 
      ")"}], "[", 
     RowBox[{
      RowBox[{
       RowBox[{"5", " ", "step"}], "+", 
       RowBox[{"{", 
        RowBox[{"start", ",", 
         RowBox[{"start", "+", "step"}], ",", 
         RowBox[{"start", "+", 
          RowBox[{"2", " ", "step"}]}], ",", 
         RowBox[{"start", "+", 
          RowBox[{"3", " ", "step"}]}], ",", 
         RowBox[{"start", "+", 
          RowBox[{"4", " ", "step"}]}]}], "}"}]}], ",", 
      RowBox[{"5", " ", "step"}]}], "]"}], "]"}]}], "]"}]], "Output",
 CellLabel->
  "Out[434]=",ExpressionUUID->"790bb44f-39c4-4242-ad4c-e595aea9463e"],

Cell[BoxData["start"], "Output",
 CellLabel->
  "Out[435]=",ExpressionUUID->"c6f67b7f-4fbc-43d7-9be1-328d48ab4797"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"start", ",", 
   RowBox[{"start", "+", "step"}], ",", 
   RowBox[{"start", "+", 
    RowBox[{"2", " ", "step"}]}], ",", 
   RowBox[{"start", "+", 
    RowBox[{"3", " ", "step"}]}], ",", 
   RowBox[{"start", "+", 
    RowBox[{"4", " ", "step"}]}], ",", 
   RowBox[{"start", "+", 
    RowBox[{"5", " ", "step"}]}], ",", 
   RowBox[{"start", "+", 
    RowBox[{"6", " ", "step"}]}], ",", 
   RowBox[{"start", "+", 
    RowBox[{"7", " ", "step"}]}], ",", 
   RowBox[{"start", "+", 
    RowBox[{"8", " ", "step"}]}], ",", 
   RowBox[{"start", "+", 
    RowBox[{"9", " ", "step"}]}], ",", 
   RowBox[{"start", "+", 
    RowBox[{"10", " ", "step"}]}], ",", 
   RowBox[{"start", "+", 
    RowBox[{"11", " ", "step"}]}], ",", 
   RowBox[{"start", "+", 
    RowBox[{"12", " ", "step"}]}], ",", 
   RowBox[{"start", "+", 
    RowBox[{"13", " ", "step"}]}], ",", 
   RowBox[{"start", "+", 
    RowBox[{"14", " ", "step"}]}], ",", 
   RowBox[{"start", "+", 
    RowBox[{"15", " ", "step"}]}], ",", 
   RowBox[{"start", "+", 
    RowBox[{"16", " ", "step"}]}], ",", 
   RowBox[{"start", "+", 
    RowBox[{"17", " ", "step"}]}], ",", 
   RowBox[{"start", "+", 
    RowBox[{"18", " ", "step"}]}], ",", 
   RowBox[{"start", "+", 
    RowBox[{"19", " ", "step"}]}]}], "}"}]], "Output",
 CellLabel->"Out[436]=",ExpressionUUID->"703c8cb7-b723-4787-bc6d-476878f4f0be"]
}, Open  ]],

Cell["\<\
Note that partitionedLazyRange above generates 5 elements at a time, which is \
useful to keep the overhead associated with evaluating the tail down. \
\>", "Text",ExpressionUUID->"23ec2f9d-9e6e-4fce-a52e-883655cb57c9"],

Cell[TextData[{
 StyleBox["endOfLazyList",
  FontWeight->"Bold"],
 " works with ",
 StyleBox["partitionedLazyList",
  FontWeight->"Bold"],
 ":"
}], "Text",ExpressionUUID->"af7ae901-1da4-4799-9e68-83f8b8f9384c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"partitionedLazyList", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "1", ",", " ", "2", ",", " ", "3", ",", " ", "endOfLazyList", ",", " ", 
     "otherStuff"}], "}"}], ",", " ", "anyTail"}], "]"}]], "Input",
 CellLabel->
  "In[437]:=",ExpressionUUID->"054ae2da-cb85-4301-8e76-72da59da568f"],

Cell[BoxData[
 RowBox[{"partitionedLazyList", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
   RowBox[{"lazyList", "[", "]"}]}], "]"}]], "Output",
 CellLabel->"Out[437]=",ExpressionUUID->"021170c2-e8c0-4c8a-8510-79e36c4dcecc"]
}, Open  ]],

Cell[TextData[{
 "You can define your own partitioned lazyList by wrapping \
partitionedLazyList around any ordinary lazyList that generates lists. The \
inner lists will be essentially flattened out. Furthermore, ",
 StyleBox["Take",
  FontWeight->"Bold"],
 " works with the ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"start", ",", " ", "stop", ",", " ", "step"}], "}"}], 
   TraditionalForm]],ExpressionUUID->"033a5952-414e-43eb-9509-54e6586baa88"],
 " spec like normal:"
}], "Text",ExpressionUUID->"1d3a9385-803c-4f2f-bc06-cc35db162cc5"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"rangeRange", " ", "=", " ", 
  RowBox[{"partitionedLazyList", "[", 
   RowBox[{"lazyGenerator", "[", 
    RowBox[{"Range", ",", "1", ",", "1", ",", "8"}], "]"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"Most", "@", 
  RowBox[{"Take", "[", 
   RowBox[{"rangeRange", ",", "20"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"Most", " ", "@", " ", 
  RowBox[{"Take", "[", 
   RowBox[{"rangeRange", ",", 
    RowBox[{"{", 
     RowBox[{"18", ",", "5", ",", 
      RowBox[{"-", "3"}]}], "}"}]}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"Most", " ", "@", " ", 
  RowBox[{"Take", "[", 
   RowBox[{"rangeRange", ",", 
    RowBox[{"{", 
     RowBox[{"5", ",", "18", ",", "3"}], "}"}]}], "]"}]}]}], "Input",
 CellLabel->
  "In[438]:=",ExpressionUUID->"d1ecc3e8-9683-4220-8ca6-74e095bcb6c8"],

Cell[BoxData[
 RowBox[{"partitionedLazyList", "[", 
  RowBox[{
   RowBox[{"{", "1", "}"}], ",", 
   RowBox[{"partitionedLazyList", "[", 
    RowBox[{"lazyLists`Private`finiteGenerator", "[", 
     RowBox[{"Range", ",", 
      RowBox[{"1", "+", "1"}], ",", "1", ",", "8", ",", "1"}], "]"}], "]"}]}],
   "]"}]], "Output",
 CellLabel->
  "Out[438]=",ExpressionUUID->"b5c121e9-3d35-41dc-a4da-1b715856fa90"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "1", ",", "2", ",", "1", ",", "2", ",", "3", ",", "1", ",", "2", 
   ",", "3", ",", "4", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", 
   "1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}]], "Output",
 CellLabel->
  "Out[439]=",ExpressionUUID->"a2210802-c5f8-468d-b4b4-692066e3144f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"3", ",", "5", ",", "2", ",", "3", ",", "3"}], "}"}]], "Output",
 CellLabel->
  "Out[440]=",ExpressionUUID->"8b258166-af6a-4590-8322-257c6f68bd97"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"2", ",", "2", ",", "1", ",", "4", ",", "2"}], "}"}]], "Output",
 CellLabel->"Out[441]=",ExpressionUUID->"e0fe0b6f-a492-4bdb-abaf-24b49a92fdc6"]
}, Open  ]],

Cell[TextData[{
 "You can also partition existing lazyList with ",
 StyleBox["lazyPartition",
  FontWeight->"Bold"],
 ". This will essentially use ",
 StyleBox["Take",
  FontWeight->"Bold"],
 " to evaluate multiple elements from  the lazyList so that subsequent \
operations like Map or Select will be more efficient:"
}], "Text",ExpressionUUID->"fde87910-3711-4621-9ede-c4fef4fc35c7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"lazyPartition", "[", 
  RowBox[{
   RowBox[{"lazyRange", "[", "]"}], ",", " ", "5"}], "]"}]], "Input",
 CellLabel->
  "In[442]:=",ExpressionUUID->"883714e7-8776-46d1-ae94-c0d809519838"],

Cell[BoxData[
 RowBox[{"partitionedLazyList", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4", ",", "5"}], "}"}], ",", 
   RowBox[{"lazyPartition", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"lazyList", "[", 
         RowBox[{"#1", ",", 
          RowBox[{"#0", "[", 
           RowBox[{
            RowBox[{"#2", "+", "#1"}], ",", "#2"}], "]"}]}], "]"}], "&"}], 
       ")"}], "[", 
      RowBox[{
       RowBox[{"1", "+", "5"}], ",", "1"}], "]"}], ",", "5"}], "]"}]}], 
  "]"}]], "Output",
 CellLabel->"Out[442]=",ExpressionUUID->"bdfbc062-db8a-442c-ac96-dd24bfa63d05"]
}, Open  ]],

Cell["\<\
Using lazyPartition on an existing partitionedLazyList will re-adjust the \
length of the chunks:\
\>", "Text",ExpressionUUID->"a79e58e7-bad3-402d-8ce9-1a71643e1828"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"lazyPartition", "[", 
  RowBox[{"rangeRange", ",", "5"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"lazyPartition", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"lazyPartition", "[", 
    RowBox[{
     RowBox[{"lazyRange", "[", "]"}], ",", " ", "5"}], "]"}], ",", 
   "\[IndentingNewLine]", "10"}], "\[IndentingNewLine]", "]"}]}], "Input",
 CellLabel->
  "In[443]:=",ExpressionUUID->"61d920dc-fa04-4e5a-a509-2135ffba00c4"],

Cell[BoxData[
 RowBox[{"partitionedLazyList", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "2", ",", "1", ",", "2"}], "}"}], ",", 
   RowBox[{"lazyPartition", "[", 
    RowBox[{
     RowBox[{"partitionedLazyList", "[", 
      RowBox[{
       RowBox[{"{", "3", "}"}], ",", 
       RowBox[{"partitionedLazyList", "[", 
        RowBox[{"lazyLists`Private`finiteGenerator", "[", 
         RowBox[{"Range", ",", 
          RowBox[{"3", "+", "1"}], ",", "1", ",", "8", ",", "1"}], "]"}], 
        "]"}]}], "]"}], ",", "5"}], "]"}]}], "]"}]], "Output",
 CellLabel->
  "Out[443]=",ExpressionUUID->"eaba9643-303d-4a93-8a77-23d3ae8e0698"],

Cell[BoxData[
 RowBox[{"partitionedLazyList", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8",
      ",", "9", ",", "10"}], "}"}], ",", 
   RowBox[{"partitionedLazyList", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"11", ",", "12", ",", "13", ",", "14", ",", "15"}], "}"}], ",", 
     RowBox[{"lazyPartition", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"lazyList", "[", 
           RowBox[{"#1", ",", 
            RowBox[{"#0", "[", 
             RowBox[{
              RowBox[{"#2", "+", "#1"}], ",", "#2"}], "]"}]}], "]"}], "&"}], 
         ")"}], "[", 
        RowBox[{
         RowBox[{"1", "+", "15"}], ",", "1"}], "]"}], ",", "10"}], "]"}]}], 
    "]"}]}], "]"}]], "Output",
 CellLabel->"Out[444]=",ExpressionUUID->"0240c24a-a75c-43d7-8c08-5ed35b4f12c0"]
}, Open  ]],

Cell[TextData[{
 "Finally, ",
 StyleBox["Map",
  FontWeight->"Bold"],
 " has a special syntax for listable functions that are mapped over \
partitionedLazyList. Normally, mapping a function over the list will result \
in a Map over the chunked list:"
}], "Text",ExpressionUUID->"7fc3941c-be3f-4eae-ab46-3d63e365e269"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Most", "@", 
  RowBox[{"Take", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{
      RowBox[{"Sqrt", "[", 
       RowBox[{"Echo", "[", "#", "]"}], "]"}], "&"}], "/@", 
     RowBox[{"partitionedLazyRange", "[", "3", "]"}]}], ",", 
    "\[IndentingNewLine]", "4"}], "\[IndentingNewLine]", "]"}]}]], "Input",
 CellLabel->
  "In[445]:=",ExpressionUUID->"9cd38938-08e1-4690-a47e-835dd63f3407"],

Cell[CellGroupData[{

Cell[BoxData["1"], \
"Echo",ExpressionUUID->"782eee5b-2592-482d-9886-0508f4306fb4"],

Cell[BoxData["2"], \
"Echo",ExpressionUUID->"2a8c3fb3-e2bc-45c0-b23c-23edccced6fb"],

Cell[BoxData["3"], \
"Echo",ExpressionUUID->"2b272d9f-daee-4af6-a71b-cc4d16cee91c"],

Cell[BoxData["4"], \
"Echo",ExpressionUUID->"16f4898b-56f9-4798-ba77-0c5fe048ccdb"],

Cell[BoxData["5"], \
"Echo",ExpressionUUID->"15494387-f4bd-4c7d-bdbe-bd693aba5949"],

Cell[BoxData["6"], \
"Echo",ExpressionUUID->"3d052fdd-e2c5-4cf4-b988-26fa4699d768"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", 
   SqrtBox["2"], ",", 
   SqrtBox["3"], ",", "2"}], "}"}]], "Output",
 CellLabel->"Out[445]=",ExpressionUUID->"015c6b34-a950-422d-a95d-a780fd488dbd"]
}, Open  ]],

Cell[TextData[{
 "However, if you specify your function as ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{"{", 
     RowBox[{
      StyleBox["fun",
       FontWeight->"Bold"], ",", " ", 
      StyleBox["Listable",
       FontWeight->"Bold"]}], "}"}],
    FontWeight->"Bold"], TraditionalForm]],ExpressionUUID->
  "e45ab11a-34a2-4a44-a24c-b119927c50ce"],
 ", the function will be applied to each list directly to allow you to take \
advantage of vectorization:"
}], "Text",ExpressionUUID->"ecd78d0c-f766-47a7-a5b4-cd48f3507233"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Most", "@", 
  RowBox[{"Take", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"Sqrt", "[", 
         RowBox[{"Echo", "[", "#", "]"}], "]"}], "&"}], ",", "Listable"}], 
      "}"}], "/@", 
     RowBox[{"partitionedLazyRange", "[", "3", "]"}]}], ",", 
    "\[IndentingNewLine]", "4"}], "\[IndentingNewLine]", "]"}]}]], "Input",
 CellLabel->
  "In[446]:=",ExpressionUUID->"0ad0eb74-d20e-4a9b-9966-d3100d4540a1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "2", ",", "3"}], 
  "}"}]], "Echo",ExpressionUUID->"4b511a4f-9311-41a3-869b-ca9b8b8925a6"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"4", ",", "5", ",", "6"}], 
  "}"}]], "Echo",ExpressionUUID->"5536ec75-7c0b-41cf-8c0a-639c1b268385"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", 
   SqrtBox["2"], ",", 
   SqrtBox["3"], ",", "2"}], "}"}]], "Output",
 CellLabel->"Out[446]=",ExpressionUUID->"c62a0879-3ea1-44c8-9c41-343e0cae60f8"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Lazy Tuples", \
"Subsubsection",ExpressionUUID->"7a197ea5-ea97-4df5-882d-2ec92934d03b"],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{"lazyTuples", "[", 
     RowBox[{"{", 
      RowBox[{"list1", ",", " ", "list2", ",", " ", "..."}], "}"}], "]"}],
    FontWeight->"Bold"], TraditionalForm]],ExpressionUUID->
  "0a9c259e-ec44-4809-aff7-cfacdf98b639"],
 " generates a lazyList form of ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{"Tuples", "[", 
     RowBox[{"{", 
      RowBox[{"list1", ",", " ", "list2", ",", " ", "..."}], "}"}], "]"}],
    FontWeight->"Bold"], TraditionalForm]],ExpressionUUID->
  "b7d74634-6d98-4401-b345-6ccbd5062c08"],
 ". It is generated as a partionedLazyList and has a ",
 Cell[BoxData[
  FormBox[
   StyleBox["\"\<PartitionSize\>\"",
    FontWeight->"Bold"], TraditionalForm]],ExpressionUUID->
  "50b8a0e5-14fe-4798-8aef-d016de27e96c"],
 " option to control the number of tuples generated at one time:"
}], "Text",ExpressionUUID->"be3b7eb7-42ab-4d0b-b67a-268bc608ec98"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"lists", " ", "=", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a", ",", "b", ",", "c"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{
      "u", ",", " ", "v", ",", "w", ",", "x", ",", " ", "y", ",", " ", "z"}], 
      "}"}]}], "}"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"lzTup", " ", "=", " ", 
  RowBox[{"lazyTuples", "[", 
   RowBox[{"lists", ",", " ", 
    RowBox[{"\"\<PartitionSize\>\"", " ", "\[Rule]", " ", "10"}]}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"Most", "@", 
  RowBox[{"Take", "[", 
   RowBox[{"lzTup", ",", "All"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"Tuples", "[", "lists", "]"}], "\[IndentingNewLine]", 
 RowBox[{"%", "===", "%%"}]}], "Input",
 CellLabel->
  "In[447]:=",ExpressionUUID->"5c822fe4-d3b7-4570-97dc-39b7f55775af"],

Cell[BoxData[
 RowBox[{"partitionedLazyList", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a", ",", "1", ",", "u"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"a", ",", "1", ",", "v"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"a", ",", "1", ",", "w"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"a", ",", "1", ",", "x"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"a", ",", "1", ",", "y"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"a", ",", "1", ",", "z"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"a", ",", "2", ",", "u"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"a", ",", "2", ",", "v"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"a", ",", "2", ",", "w"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"a", ",", "2", ",", "x"}], "}"}]}], "}"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Min", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"3", ",", "2", ",", "6"}], "}"}], "-", 
            RowBox[{"Max", "/@", "#1"}]}], "]"}], "<", "0"}], ",", 
         RowBox[{
          RowBox[{"Append", "[", "endOfLazyList", "]"}], "[", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"Quiet", "[", 
              RowBox[{"Check", "[", 
               RowBox[{
                RowBox[{"MapThread", "[", 
                 RowBox[{"Part", ",", 
                  RowBox[{"{", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{"a", ",", "b", ",", "c"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"1", ",", "2"}], "}"}], ",", 
                    RowBox[{"{", 
                    RowBox[{
                    "u", ",", "v", ",", "w", ",", "x", ",", "y", ",", "z"}], 
                    "}"}]}], "}"}], ",", "#1"}], "}"}]}], "]"}], ",", 
                "Nothing"}], "]"}], "]"}], "&"}], ")"}], "/@", 
           RowBox[{"Transpose", "[", "#1", "]"}]}], "]"}], ",", 
         RowBox[{"Transpose", "[", 
          RowBox[{"Developer`ToPackedArray", "[", 
           RowBox[{"MapThread", "[", 
            RowBox[{"Part", ",", 
             RowBox[{"{", 
              RowBox[{
               RowBox[{"{", 
                RowBox[{
                 RowBox[{"{", 
                  RowBox[{"a", ",", "b", ",", "c"}], "}"}], ",", 
                 RowBox[{"{", 
                  RowBox[{"1", ",", "2"}], "}"}], ",", 
                 RowBox[{"{", 
                  RowBox[{
                  "u", ",", "v", ",", "w", ",", "x", ",", "y", ",", "z"}], 
                  "}"}]}], "}"}], ",", "#1"}], "}"}]}], "]"}], "]"}], "]"}]}],
         "]"}], "&"}], ",", "Listable"}], "}"}], "/@", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       InterpretationBox[
        RowBox[{
         TagBox["CompiledFunction",
          "SummaryHead"], "[", 
         DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
          "Ready"}, 
          TemplateBox[{
            PaneSelectorBox[{False -> GridBox[{{
                  PaneBox[
                   ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquarePlusIconMedium"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, Evaluator -> Automatic, Method -> "Preemptive"], 
                   Alignment -> {Center, Center}, ImageSize -> 
                   Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                  GraphicsBox[{
                    Thickness[0.038461538461538464`], {
                    FaceForm[{
                    GrayLevel[0.93], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{
                    25.499999999999996`, 2.5}, {25.499999999999996`, 
                    1.3953100000000003`}, {24.604699999999998`, 
                    0.49999999999999994`}, {23.5, 0.49999999999999994`}, {2.5,
                     0.49999999999999994`}, {1.3953100000000003`, 
                    0.49999999999999994`}, {0.49999999999999994`, 
                    1.3953100000000003`}, {0.49999999999999994`, 2.5}, {
                    0.49999999999999994`, 23.5}, {0.49999999999999994`, 
                    24.604699999999998`}, {1.3953100000000003`, 
                    25.499999999999996`}, {2.5, 25.499999999999996`}, {23.5, 
                    25.499999999999996`}, {24.604699999999998`, 
                    25.499999999999996`}, {25.499999999999996`, 
                    24.604699999999998`}, {25.499999999999996`, 23.5}, {
                    25.499999999999996`, 2.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.5, 0.5, 0.5], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{20.5426, 
                    19.116799999999998`}, {16.3832, 21.876199999999997`}, {
                    16.3832, 20.021499999999996`}, {6.930469999999999, 
                    20.021499999999996`}, {6.930469999999999, 
                    18.212100000000003`}, {16.3832, 18.212100000000003`}, {
                    16.3832, 16.357399999999995`}, {20.5426, 
                    19.116799999999998`}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{5.30508, 
                    13.8391}, {9.46445, 11.079700000000003`}, {9.46445, 
                    12.933999999999997`}, {18.917199999999998`, 
                    12.933999999999997`}, {18.917199999999998`, 14.7438}, {
                    9.46445, 14.7438}, {9.46445, 16.598}, {5.30508, 
                    13.8391}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGIRIGYC4r9qIkoPPog5zJd34+ifoeBwf6HGBfU8aYe0
2dKXhaMEHT77F2xc1CQH52elHtL/aqrg0KrArnpmjpRDvTCXYEG9gsOOYKuI
/6tlHZ5WFpRfO4qQn3ww8NOrXYpw/fNmfE3SCFCG8z8EiLwQ7lSF2w82/44y
nM937b/lmXNKDnK7FuxLZZFwMDfq/3NwgpKDccaL+Q9miDok9Mnt3x6k5FDt
mbylT0ECwk9QhOuXWfO/eIajPCq/WNYh5kh50jV+CYc1eV/nfGGShZsXte2a
OGevDNy8ZqG0W/9KpeD60cMLAIwUgfU=
                    "]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{12.82453, 
                    5.289294374999999}, {11.960858124999998`, 8.29796625}, {
                    11.080858124999999`, 8.29796625}, {12.417186249999999`, 
                    4.337966249999999}, {13.193201874999998`, 
                    4.337966249999999}, {14.540701874999998`, 8.29796625}, {
                    13.688201874999999`, 8.29796625}, {12.82453, 
                    5.289294374999999}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGIpIGYC4qwFP+fsFjB0WFcz7fnBvSIOLFaTza6GGTjM
l3fj6J+h4GC9PHLBXXc9DH7abOnLwlGCDtPNZKaxndfH4Is8/uOrISAD53uI
GTRGxyP4O4KtIv6fR/BbFdhVz8TIOqj9FNyfdEbfIejt5Y8zXiL4h7TunbCJ
koPzweYvkXP4mfT+6PSlBnD7n25Z/mROiSGcr7S/rqPX1AiuHsaHmQfjw+zz
lubzZjYxgrsHxoe5F8aH+QfGn/B91VROQQQfZr/Ei1viF75j8mHh6eiSdevo
cUM4Hz0+AG0eosQ=
                    "]]}}, Background -> GrayLevel[0.93], Axes -> False, 
                   AspectRatio -> 1, ImageSize -> {Automatic, 
                    Dynamic[
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification]), ImageSizeCache -> {45., {0., 9.}}]}, 
                   Frame -> True, FrameTicks -> None, FrameStyle -> Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]]], 
                  GridBox[{{
                    RowBox[{
                    TagBox["\"Argument count: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["1", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Argument types: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    StyleBox[
                    PaneBox[
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"_Integer", ",", "1"}], "}"}], "}"}], 
                    ContentPadding -> False, FrameMargins -> 0, StripOnInput -> 
                    True, BaselinePosition -> Baseline, 
                    ImageSize -> {{1, 300}, Automatic}], LineBreakWithin -> 
                    False], "SummaryItem"]}]}}, 
                   GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                   AutoDelete -> False, 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                   GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                   BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
                GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                BaselinePosition -> {1, 1}], True -> GridBox[{{
                  PaneBox[
                   ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquareMinusIconMedium"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, Evaluator -> Automatic, Method -> "Preemptive"], 
                   Alignment -> {Center, Center}, ImageSize -> 
                   Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                  GraphicsBox[{
                    Thickness[0.038461538461538464`], {
                    FaceForm[{
                    GrayLevel[0.93], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{
                    25.499999999999996`, 2.5}, {25.499999999999996`, 
                    1.3953100000000003`}, {24.604699999999998`, 
                    0.49999999999999994`}, {23.5, 0.49999999999999994`}, {2.5,
                     0.49999999999999994`}, {1.3953100000000003`, 
                    0.49999999999999994`}, {0.49999999999999994`, 
                    1.3953100000000003`}, {0.49999999999999994`, 2.5}, {
                    0.49999999999999994`, 23.5}, {0.49999999999999994`, 
                    24.604699999999998`}, {1.3953100000000003`, 
                    25.499999999999996`}, {2.5, 25.499999999999996`}, {23.5, 
                    25.499999999999996`}, {24.604699999999998`, 
                    25.499999999999996`}, {25.499999999999996`, 
                    24.604699999999998`}, {25.499999999999996`, 23.5}, {
                    25.499999999999996`, 2.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.5, 0.5, 0.5], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{20.5426, 
                    19.116799999999998`}, {16.3832, 21.876199999999997`}, {
                    16.3832, 20.021499999999996`}, {6.930469999999999, 
                    20.021499999999996`}, {6.930469999999999, 
                    18.212100000000003`}, {16.3832, 18.212100000000003`}, {
                    16.3832, 16.357399999999995`}, {20.5426, 
                    19.116799999999998`}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{5.30508, 
                    13.8391}, {9.46445, 11.079700000000003`}, {9.46445, 
                    12.933999999999997`}, {18.917199999999998`, 
                    12.933999999999997`}, {18.917199999999998`, 14.7438}, {
                    9.46445, 14.7438}, {9.46445, 16.598}, {5.30508, 
                    13.8391}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGIRIGYC4r9qIkoPPog5zJd34+ifoeBwf6HGBfU8aYe0
2dKXhaMEHT77F2xc1CQH52elHtL/aqrg0KrArnpmjpRDvTCXYEG9gsOOYKuI
/6tlHZ5WFpRfO4qQn3ww8NOrXYpw/fNmfE3SCFCG8z8EiLwQ7lSF2w82/44y
nM937b/lmXNKDnK7FuxLZZFwMDfq/3NwgpKDccaL+Q9miDok9Mnt3x6k5FDt
mbylT0ECwk9QhOuXWfO/eIajPCq/WNYh5kh50jV+CYc1eV/nfGGShZsXte2a
OGevDNy8ZqG0W/9KpeD60cMLAIwUgfU=
                    "]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{12.82453, 
                    5.289294374999999}, {11.960858124999998`, 8.29796625}, {
                    11.080858124999999`, 8.29796625}, {12.417186249999999`, 
                    4.337966249999999}, {13.193201874999998`, 
                    4.337966249999999}, {14.540701874999998`, 8.29796625}, {
                    13.688201874999999`, 8.29796625}, {12.82453, 
                    5.289294374999999}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGIpIGYC4qwFP+fsFjB0WFcz7fnBvSIOLFaTza6GGTjM
l3fj6J+h4GC9PHLBXXc9DH7abOnLwlGCDtPNZKaxndfH4Is8/uOrISAD53uI
GTRGxyP4O4KtIv6fR/BbFdhVz8TIOqj9FNyfdEbfIejt5Y8zXiL4h7TunbCJ
koPzweYvkXP4mfT+6PSlBnD7n25Z/mROiSGcr7S/rqPX1AiuHsaHmQfjw+zz
lubzZjYxgrsHxoe5F8aH+QfGn/B91VROQQQfZr/Ei1viF75j8mHh6eiSdevo
cUM4Hz0+AG0eosQ=
                    "]]}}, Background -> GrayLevel[0.93], Axes -> False, 
                   AspectRatio -> 1, ImageSize -> {Automatic, 
                    Dynamic[
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification]), ImageSizeCache -> {45., {0., 9.}}]}, 
                   Frame -> True, FrameTicks -> None, FrameStyle -> Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]]], 
                  GridBox[{{
                    RowBox[{
                    TagBox["\"Argument count: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["1", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Argument types: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    PaneBox[
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"_Integer", ",", "1"}], "}"}], "}"}], 
                    ImageSize -> {{1, 500}, Automatic}, BaselinePosition -> 
                    Baseline, ContentPadding -> False, FrameMargins -> 0, 
                    StripOnInput -> True], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Variables: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", "lazyLists`Private`n", "}"}], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Expression: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    PaneBox[
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"lazyLists`Private`c$", "=", 
                    RowBox[{"lazyLists`Private`n", "-", "1"}]}], ",", 
                    "lazyLists`Private`q$"}], "}"}], ",", 
                    RowBox[{"1", "+", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"lazyLists`Private`q$", "=", 
                    RowBox[{"Quotient", "[", 
                    
                    RowBox[{"lazyLists`Private`c$", ",", 
                    "lazyLists`Private`i"}], "]"}]}], ";", 
                    RowBox[{"lazyLists`Private`c$", "=", 
                    RowBox[{"Mod", "[", 
                    
                    RowBox[{"lazyLists`Private`c$", ",", 
                    "lazyLists`Private`i"}], "]"}]}], ";", 
                    "lazyLists`Private`q$"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"lazyLists`Private`i", ",", 
                    RowBox[{"{", 
                    RowBox[{"12", ",", "6", ",", "1"}], "}"}]}], "}"}]}], 
                    "]"}]}]}], "]"}], ImageSize -> {{1, 500}, Automatic}, 
                    BaselinePosition -> Baseline, ContentPadding -> False, 
                    FrameMargins -> 0, StripOnInput -> True], 
                    "SummaryItem"]}]}}, 
                   GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                   AutoDelete -> False, 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                   GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                   BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
                GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                BaselinePosition -> {1, 1}]}, 
             Dynamic[Typeset`open$$], ImageSize -> Automatic]},
           "SummaryPanel"],
          DynamicModuleValues:>{}], "]"}],
        CompiledFunction[{11, 12., 5596}, {{
           Blank[Integer], 1}}, {{2, 1, 0}, {2, 2, 
         1}}, {{0, {2, 0, 4}}, {{12, 6, 1}, {2, 1, 2}}, {-1, {2, 0, 0}}, {
          1, {2, 0, 1}}}, {0, 7, 0, 0, 
         8}, {{41, 257, 2, 0, 0, 2, 1, 0, 2, 1, 5}, {
          42, "CopyTensor", 2, 1, 2, 2, 1, 1}, {33, 1, 3}, {6, 0, 2}, {35, 3, 
          2, 2, 4}, {6, 4, 5}, {3, 6}, {37, 1, 5, 2, 6}, {41, 262, 2, 1, 5, 2,
           0, 6, 2, 1, 6}, {41, 261, 2, 1, 5, 2, 0, 6, 2, 1, 7}, {
          42, "CopyTensor", 2, 1, 7, 2, 1, 5}, {36, 2, 6, 0, 4}, {4, 5, 
          3, -5}, {41, 257, 2, 0, 1, 2, 2, 4, 2, 2, 1}, {1}}, 
         Function[{lazyLists`Private`n}, 
          
          Module[{lazyLists`Private`c$ = lazyLists`Private`n - 1, 
            lazyLists`Private`q$}, 1 + 
           Table[lazyLists`Private`q$ = 
              Quotient[lazyLists`Private`c$, lazyLists`Private`i]; 
             lazyLists`Private`c$ = 
              Mod[lazyLists`Private`c$, lazyLists`Private`i]; 
             lazyLists`Private`q$, {lazyLists`Private`i, {12, 6, 1}}]], 
          Listable], Evaluate],
        Editable->False,
        SelectWithContents->True,
        Selectable->False], ",", "Listable"}], "}"}], "/@", 
     RowBox[{"partitionedLazyList", "[", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"lazyList", "[", 
          RowBox[{"#1", ",", 
           RowBox[{"#0", "[", 
            RowBox[{
             RowBox[{"#2", "+", "#1"}], ",", "#2"}], "]"}]}], "]"}], "&"}], 
        ")"}], "[", 
       RowBox[{
        RowBox[{"10", "+", 
         RowBox[{"{", 
          RowBox[{
          "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", 
           ",", "8", ",", "9", ",", "10"}], "}"}]}], ",", "10"}], "]"}], 
      "]"}]}]}]}], "]"}]], "Output",
 CellLabel->
  "Out[448]=",ExpressionUUID->"79b80198-6ce9-4262-82b1-15a5060af4cd"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"a", ",", "1", ",", "u"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "1", ",", "v"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "1", ",", "w"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "1", ",", "x"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "1", ",", "y"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "1", ",", "z"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "2", ",", "u"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "2", ",", "v"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "2", ",", "w"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "2", ",", "x"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "2", ",", "y"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "2", ",", "z"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"b", ",", "1", ",", "u"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"b", ",", "1", ",", "v"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"b", ",", "1", ",", "w"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"b", ",", "1", ",", "x"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"b", ",", "1", ",", "y"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"b", ",", "1", ",", "z"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"b", ",", "2", ",", "u"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"b", ",", "2", ",", "v"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"b", ",", "2", ",", "w"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"b", ",", "2", ",", "x"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"b", ",", "2", ",", "y"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"b", ",", "2", ",", "z"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"c", ",", "1", ",", "u"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"c", ",", "1", ",", "v"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"c", ",", "1", ",", "w"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"c", ",", "1", ",", "x"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"c", ",", "1", ",", "y"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"c", ",", "1", ",", "z"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"c", ",", "2", ",", "u"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"c", ",", "2", ",", "v"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"c", ",", "2", ",", "w"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"c", ",", "2", ",", "x"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"c", ",", "2", ",", "y"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"c", ",", "2", ",", "z"}], "}"}]}], "}"}]], "Output",
 CellLabel->
  "Out[449]=",ExpressionUUID->"7bb171e2-03f5-4fd2-b902-2d44bc98fa34"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"a", ",", "1", ",", "u"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "1", ",", "v"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "1", ",", "w"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "1", ",", "x"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "1", ",", "y"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "1", ",", "z"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "2", ",", "u"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "2", ",", "v"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "2", ",", "w"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "2", ",", "x"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "2", ",", "y"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "2", ",", "z"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"b", ",", "1", ",", "u"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"b", ",", "1", ",", "v"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"b", ",", "1", ",", "w"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"b", ",", "1", ",", "x"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"b", ",", "1", ",", "y"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"b", ",", "1", ",", "z"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"b", ",", "2", ",", "u"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"b", ",", "2", ",", "v"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"b", ",", "2", ",", "w"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"b", ",", "2", ",", "x"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"b", ",", "2", ",", "y"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"b", ",", "2", ",", "z"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"c", ",", "1", ",", "u"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"c", ",", "1", ",", "v"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"c", ",", "1", ",", "w"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"c", ",", "1", ",", "x"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"c", ",", "1", ",", "y"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"c", ",", "1", ",", "z"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"c", ",", "2", ",", "u"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"c", ",", "2", ",", "v"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"c", ",", "2", ",", "w"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"c", ",", "2", ",", "x"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"c", ",", "2", ",", "y"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"c", ",", "2", ",", "z"}], "}"}]}], "}"}]], "Output",
 CellLabel->
  "Out[450]=",ExpressionUUID->"0f24b9b0-b6ae-4f27-b124-cc07d7a1fe30"],

Cell[BoxData["True"], "Output",
 CellLabel->"Out[451]=",ExpressionUUID->"9cd0ed9d-b4fd-42c4-a8ac-ec883f684cf3"]
}, Open  ]],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{"lazyTuples", "[", 
     RowBox[{"list", " ", ",", " ", "tupleLength"}], "]"}],
    FontWeight->"Bold"], TraditionalForm]],ExpressionUUID->
  "52153906-1e36-4050-a5d1-cffa6f06212c"],
 " also works:"
}], "Text",ExpressionUUID->"c75a909d-d8f9-4086-95d5-538e82069ca1"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Take", "[", 
  RowBox[{
   RowBox[{"Tuples", "[", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"a", ",", "b", ",", "c"}], "}"}], ",", "5"}], "]"}], ",", 
   "10"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Most", "@", 
  RowBox[{"Take", "[", 
   RowBox[{
    RowBox[{"lazyTuples", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"a", ",", "b", ",", "c"}], "}"}], ",", "5"}], "]"}], ",", 
    "10"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"%", "===", "%%"}]}], "Input",
 CellLabel->
  "In[452]:=",ExpressionUUID->"857df8f9-654a-41c9-b169-fe69f6e34ad7"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"a", ",", "a", ",", "a", ",", "a", ",", "a"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "a", ",", "a", ",", "a", ",", "b"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "a", ",", "a", ",", "a", ",", "c"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "a", ",", "a", ",", "b", ",", "a"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "a", ",", "a", ",", "b", ",", "b"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "a", ",", "a", ",", "b", ",", "c"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "a", ",", "a", ",", "c", ",", "a"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "a", ",", "a", ",", "c", ",", "b"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "a", ",", "a", ",", "c", ",", "c"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "a", ",", "b", ",", "a", ",", "a"}], "}"}]}], 
  "}"}]], "Output",
 CellLabel->
  "Out[452]=",ExpressionUUID->"e07164a1-8787-4236-a4dd-a229b88f7def"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"a", ",", "a", ",", "a", ",", "a", ",", "a"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "a", ",", "a", ",", "a", ",", "b"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "a", ",", "a", ",", "a", ",", "c"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "a", ",", "a", ",", "b", ",", "a"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "a", ",", "a", ",", "b", ",", "b"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "a", ",", "a", ",", "b", ",", "c"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "a", ",", "a", ",", "c", ",", "a"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "a", ",", "a", ",", "c", ",", "b"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "a", ",", "a", ",", "c", ",", "c"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "a", ",", "b", ",", "a", ",", "a"}], "}"}]}], 
  "}"}]], "Output",
 CellLabel->
  "Out[453]=",ExpressionUUID->"d9d1d84f-1eba-4cb6-b392-8ea432de907f"],

Cell[BoxData["True"], "Output",
 CellLabel->"Out[454]=",ExpressionUUID->"78fac0a8-cfb3-498c-aa2d-e581cfa9c762"]
}, Open  ]],

Cell["\<\
lazyTuples works with held symbols, which is useful when dealing with large \
lists since this will prevent large amounts of data from being copied over \
and also prevents the full list from being displayed in the tail of the \
lazyList:\
\>", "Text",ExpressionUUID->"572d1fac-1428-4fd3-bf76-3511a3d4043c"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"largeLists", " ", "=", " ", 
   RowBox[{"Range", "/@", 
    RowBox[{"{", 
     RowBox[{"50000", ",", "40000", ",", "60000", ",", "80000"}], "}"}]}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"lazyTuples", "[", "largeLists", "]"}], "\[IndentingNewLine]", 
 RowBox[{"lazyTuples", "[", 
  RowBox[{"Hold", "[", "largeLists", "]"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Most", "@", 
  RowBox[{"Take", "[", 
   RowBox[{"%", ",", "10"}], "]"}]}]}], "Input",
 CellLabel->
  "In[455]:=",ExpressionUUID->"64d9a187-5a22-4ad8-aeb6-78eb11f9595a"],

Cell[BoxData[
 InterpretationBox[
  TagBox[
   FrameBox[GridBox[{
      {
       ItemBox[
        TagBox[
         RowBox[{"partitionedLazyList", "[", 
          RowBox[{
           RowBox[{"{", 
            RowBox[{
             RowBox[{"{", 
              RowBox[{"1", ",", "1", ",", "1", ",", "1"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"1", ",", "1", ",", "1", ",", "2"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"1", ",", "1", ",", "1", ",", "3"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"1", ",", "1", ",", "1", ",", "4"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"1", ",", "1", ",", "1", ",", "5"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"1", ",", "1", ",", "1", ",", "6"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"1", ",", "1", ",", "1", ",", "7"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"1", ",", "1", ",", "1", ",", "8"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"1", ",", "1", ",", "1", ",", "9"}], "}"}], ",", 
             RowBox[{"{", 
              RowBox[{"1", ",", "1", ",", "1", ",", "10"}], "}"}]}], "}"}], 
           ",", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{
              RowBox[{
               RowBox[{"If", "[", 
                RowBox[{
                 RowBox[{
                  RowBox[{"Min", "[", 
                   RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    "50000", ",", "40000", ",", "60000", ",", "80000"}], 
                    "}"}], "-", 
                    RowBox[{"Max", "/@", "#1"}]}], "]"}], "<", "0"}], ",", 
                 RowBox[{
                  RowBox[{"Append", "[", "endOfLazyList", "]"}], "[", 
                  TemplateBox[{"1"},
                   "OutputSizeLimit`Skeleton"], "]"}], ",", 
                 RowBox[{"Transpose", "[", 
                  RowBox[{"Developer`ToPackedArray", "[", 
                   RowBox[{"MapThread", "[", 
                    RowBox[{"Part", ",", 
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"{", 
                    TemplateBox[{"1"},
                    "OutputSizeLimit`Skeleton"], "}"}], ",", "#1"}], "}"}]}], 
                    "]"}], "]"}], "]"}]}], "]"}], "&"}], ",", "Listable"}], 
             "}"}], "/@", 
            TemplateBox[{"1"},
             "OutputSizeLimit`Skeleton"]}]}], "]"}],
         Short[#, 5]& ],
        BaseStyle->{Deployed -> False},
        StripOnInput->False]},
      {GridBox[{
         {
          PaneBox[
           TagBox[
            TooltipBox[
             StyleBox[
              StyleBox[
               DynamicBox[ToBoxes[
                 FEPrivate`FrontEndResource[
                 "FEStrings", "sizeBriefExplanation"], StandardForm],
                ImageSizeCache->{85., {4., 12.}}],
               StripOnInput->False,
               DynamicUpdating->True,
               LineSpacing->{1, 2},
               LineIndent->0,
               LinebreakAdjustments->{1., 100, 0, 0, 0}], "OSLText",
              StripOnInput->False],
             StyleBox[
              DynamicBox[
               ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"], 
                StandardForm]], DynamicUpdating -> True, LineIndent -> 0, 
              LinebreakAdjustments -> {1., 100, 0, 0, 0}, 
              LineSpacing -> {1, 2}, StripOnInput -> False]],
            Annotation[#, 
             Style[
              Dynamic[
               FEPrivate`FrontEndResource["FEStrings", "sizeExplanation"]], 
              DynamicUpdating -> True, LineIndent -> 0, 
              LinebreakAdjustments -> {1., 100, 0, 0, 0}, 
              LineSpacing -> {1, 2}], "Tooltip"]& ],
           Alignment->Center,
           BaselinePosition->Baseline,
           ImageSize->{Automatic, {25, Full}}], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm],
               ImageSizeCache->{72., {1., 12.}}],
              StripOnInput->False,
              DynamicUpdating->True,
              LineSpacing->{1, 2},
              LineIndent->0,
              LinebreakAdjustments->{1., 100, 0, 0, 0}], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowLess"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True,
              LineSpacing->{1, 2},
              LineIndent->0,
              LinebreakAdjustments->{1., 100, 0, 0, 0}], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, {25, Full}}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 456, 16665681942063881766, 5/2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm],
               ImageSizeCache->{84., {1., 12.}}],
              StripOnInput->False,
              DynamicUpdating->True,
              LineSpacing->{1, 2},
              LineIndent->0,
              LinebreakAdjustments->{1., 100, 0, 0, 0}], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowMore"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True,
              LineSpacing->{1, 2},
              LineIndent->0,
              LinebreakAdjustments->{1., 100, 0, 0, 0}], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, {25, Full}}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 456, 16665681942063881766, 5 2],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm],
               ImageSizeCache->{63., {1., 12.}}],
              StripOnInput->False,
              DynamicUpdating->True,
              LineSpacing->{1, 2},
              LineIndent->0,
              LinebreakAdjustments->{1., 100, 0, 0, 0}], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeShowAll"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True,
              LineSpacing->{1, 2},
              LineIndent->0,
              LinebreakAdjustments->{1., 100, 0, 0, 0}], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, {25, Full}}],
           Appearance->None,
           BaselinePosition->Baseline,
           
           ButtonFunction:>OutputSizeLimit`ButtonFunction[
            OutputSizeLimit`Defer, 456, 16665681942063881766, Infinity],
           Enabled->True,
           Evaluator->Automatic,
           Method->"Queued"], 
          ButtonBox[
           PaneSelectorBox[{False->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm],
               ImageSizeCache->{107., {1., 12.}}],
              StripOnInput->False,
              DynamicUpdating->True,
              LineSpacing->{1, 2},
              LineIndent->0,
              LinebreakAdjustments->{1., 100, 0, 0, 0}], "OSLControl",
             StripOnInput->False], True->
            StyleBox[
             StyleBox[
              DynamicBox[ToBoxes[
                FEPrivate`FrontEndResource["FEStrings", "sizeChangeLimit"], 
                StandardForm]],
              StripOnInput->False,
              DynamicUpdating->True,
              LineSpacing->{1, 2},
              LineIndent->0,
              LinebreakAdjustments->{1., 100, 0, 0, 0}], "OSLControlActive",
             StripOnInput->False]}, Dynamic[
             CurrentValue["MouseOver"]],
            Alignment->Center,
            FrameMargins->0,
            ImageSize->{Automatic, {25, Full}}],
           Appearance->None,
           BaselinePosition->Baseline,
           ButtonFunction:>FrontEndExecute[{
              FrontEnd`SetOptions[
              FrontEnd`$FrontEnd, 
               FrontEnd`PreferencesSettings -> {"Page" -> "Advanced"}], 
              FrontEnd`FrontEndToken["PreferencesDialog"]}],
           Evaluator->None,
           Method->"Preemptive"]}
        },
        AutoDelete->False,
        FrameStyle->GrayLevel[0.85],
        GridBoxDividers->{"Columns" -> {False, {True}}},
        GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}},
        GridBoxSpacings->{"Columns" -> {{2}}}]}
     },
     DefaultBaseStyle->"Column",
     GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
     GridBoxDividers->{"Columns" -> {{False}}, "Rows" -> {{False}}},
     GridBoxItemSize->{"Columns" -> {{Automatic}}, "Rows" -> {{1.}}},
     GridBoxSpacings->{"Columns" -> {
         Offset[0.27999999999999997`], {
          Offset[0.5599999999999999]}, 
         Offset[0.27999999999999997`]}, "Rows" -> {
         Offset[0.2], 
         Offset[1.2], {
          Offset[0.4]}, 
         Offset[0.2]}}],
    BaseStyle->"OutputSizeLimit",
    FrameMargins->{{12, 12}, {0, 15}},
    FrameStyle->GrayLevel[0.85],
    RoundingRadius->5,
    StripOnInput->False],
   Deploy,
   DefaultBaseStyle->"Deploy"],
  If[16665681942063881766 === $SessionID, 
   Out[456], Message[
     MessageName[Syntax, "noinfoker"]]; Missing["NotAvailable"]; 
   Null]]], "Output",
 CellLabel->
  "Out[456]=",ExpressionUUID->"2319f692-8fa4-4484-8e89-00dfc497208f"],

Cell[BoxData[
 RowBox[{"partitionedLazyList", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{"1", ",", "1", ",", "1", ",", "1"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "1", ",", "1", ",", "2"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "1", ",", "1", ",", "3"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "1", ",", "1", ",", "4"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "1", ",", "1", ",", "5"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "1", ",", "1", ",", "6"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "1", ",", "1", ",", "7"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "1", ",", "1", ",", "8"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "1", ",", "1", ",", "9"}], "}"}], ",", 
     RowBox[{"{", 
      RowBox[{"1", ",", "1", ",", "1", ",", "10"}], "}"}]}], "}"}], ",", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{
      RowBox[{
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{
          RowBox[{"Min", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"50000", ",", "40000", ",", "60000", ",", "80000"}], 
             "}"}], "-", 
            RowBox[{"Max", "/@", "#1"}]}], "]"}], "<", "0"}], ",", 
         RowBox[{
          RowBox[{"Append", "[", "endOfLazyList", "]"}], "[", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"Quiet", "[", 
              RowBox[{"Check", "[", 
               RowBox[{
                RowBox[{"MapThread", "[", 
                 RowBox[{"Part", ",", 
                  RowBox[{"{", 
                   RowBox[{"largeLists", ",", "#1"}], "}"}]}], "]"}], ",", 
                "Nothing"}], "]"}], "]"}], "&"}], ")"}], "/@", 
           RowBox[{"Transpose", "[", "#1", "]"}]}], "]"}], ",", 
         RowBox[{"Transpose", "[", 
          RowBox[{"Developer`ToPackedArray", "[", 
           RowBox[{"MapThread", "[", 
            RowBox[{"Part", ",", 
             RowBox[{"{", 
              RowBox[{"largeLists", ",", "#1"}], "}"}]}], "]"}], "]"}], 
          "]"}]}], "]"}], "&"}], ",", "Listable"}], "}"}], "/@", 
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       InterpretationBox[
        RowBox[{
         TagBox["CompiledFunction",
          "SummaryHead"], "[", 
         DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = 
          "Ready"}, 
          TemplateBox[{
            PaneSelectorBox[{False -> GridBox[{{
                  PaneBox[
                   ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquarePlusIconMedium"]], 
                    ButtonFunction :> (Typeset`open$$ = True), Appearance -> 
                    None, Evaluator -> Automatic, Method -> "Preemptive"], 
                   Alignment -> {Center, Center}, ImageSize -> 
                   Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                  GraphicsBox[{
                    Thickness[0.038461538461538464`], {
                    FaceForm[{
                    GrayLevel[0.93], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{
                    25.499999999999996`, 2.5}, {25.499999999999996`, 
                    1.3953100000000003`}, {24.604699999999998`, 
                    0.49999999999999994`}, {23.5, 0.49999999999999994`}, {2.5,
                     0.49999999999999994`}, {1.3953100000000003`, 
                    0.49999999999999994`}, {0.49999999999999994`, 
                    1.3953100000000003`}, {0.49999999999999994`, 2.5}, {
                    0.49999999999999994`, 23.5}, {0.49999999999999994`, 
                    24.604699999999998`}, {1.3953100000000003`, 
                    25.499999999999996`}, {2.5, 25.499999999999996`}, {23.5, 
                    25.499999999999996`}, {24.604699999999998`, 
                    25.499999999999996`}, {25.499999999999996`, 
                    24.604699999999998`}, {25.499999999999996`, 23.5}, {
                    25.499999999999996`, 2.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.5, 0.5, 0.5], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{20.5426, 
                    19.116799999999998`}, {16.3832, 21.876199999999997`}, {
                    16.3832, 20.021499999999996`}, {6.930469999999999, 
                    20.021499999999996`}, {6.930469999999999, 
                    18.212100000000003`}, {16.3832, 18.212100000000003`}, {
                    16.3832, 16.357399999999995`}, {20.5426, 
                    19.116799999999998`}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{5.30508, 
                    13.8391}, {9.46445, 11.079700000000003`}, {9.46445, 
                    12.933999999999997`}, {18.917199999999998`, 
                    12.933999999999997`}, {18.917199999999998`, 14.7438}, {
                    9.46445, 14.7438}, {9.46445, 16.598}, {5.30508, 
                    13.8391}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGIRIGYC4r9qIkoPPog5zJd34+ifoeBwf6HGBfU8aYe0
2dKXhaMEHT77F2xc1CQH52elHtL/aqrg0KrArnpmjpRDvTCXYEG9gsOOYKuI
/6tlHZ5WFpRfO4qQn3ww8NOrXYpw/fNmfE3SCFCG8z8EiLwQ7lSF2w82/44y
nM937b/lmXNKDnK7FuxLZZFwMDfq/3NwgpKDccaL+Q9miDok9Mnt3x6k5FDt
mbylT0ECwk9QhOuXWfO/eIajPCq/WNYh5kh50jV+CYc1eV/nfGGShZsXte2a
OGevDNy8ZqG0W/9KpeD60cMLAIwUgfU=
                    "]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{12.82453, 
                    5.289294374999999}, {11.960858124999998`, 8.29796625}, {
                    11.080858124999999`, 8.29796625}, {12.417186249999999`, 
                    4.337966249999999}, {13.193201874999998`, 
                    4.337966249999999}, {14.540701874999998`, 8.29796625}, {
                    13.688201874999999`, 8.29796625}, {12.82453, 
                    5.289294374999999}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGIpIGYC4qwFP+fsFjB0WFcz7fnBvSIOLFaTza6GGTjM
l3fj6J+h4GC9PHLBXXc9DH7abOnLwlGCDtPNZKaxndfH4Is8/uOrISAD53uI
GTRGxyP4O4KtIv6fR/BbFdhVz8TIOqj9FNyfdEbfIejt5Y8zXiL4h7TunbCJ
koPzweYvkXP4mfT+6PSlBnD7n25Z/mROiSGcr7S/rqPX1AiuHsaHmQfjw+zz
lubzZjYxgrsHxoe5F8aH+QfGn/B91VROQQQfZr/Ei1viF75j8mHh6eiSdevo
cUM4Hz0+AG0eosQ=
                    "]]}}, Background -> GrayLevel[0.93], Axes -> False, 
                   AspectRatio -> 1, ImageSize -> {Automatic, 
                    Dynamic[
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification]), ImageSizeCache -> {45., {0., 9.}}]}, 
                   Frame -> True, FrameTicks -> None, FrameStyle -> Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]]], 
                  GridBox[{{
                    RowBox[{
                    TagBox["\"Argument count: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["1", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Argument types: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    StyleBox[
                    PaneBox[
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"_Integer", ",", "1"}], "}"}], "}"}], 
                    ContentPadding -> False, FrameMargins -> 0, StripOnInput -> 
                    True, BaselinePosition -> Baseline, 
                    ImageSize -> {{1, 300}, Automatic}], LineBreakWithin -> 
                    False], "SummaryItem"]}]}}, 
                   GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                   AutoDelete -> False, 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                   GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                   BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
                GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                BaselinePosition -> {1, 1}], True -> GridBox[{{
                  PaneBox[
                   ButtonBox[
                    DynamicBox[
                    FEPrivate`FrontEndResource[
                    "FEBitmaps", "SquareMinusIconMedium"]], 
                    ButtonFunction :> (Typeset`open$$ = False), Appearance -> 
                    None, Evaluator -> Automatic, Method -> "Preemptive"], 
                   Alignment -> {Center, Center}, ImageSize -> 
                   Dynamic[{
                    Automatic, 
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification])}]], 
                  GraphicsBox[{
                    Thickness[0.038461538461538464`], {
                    FaceForm[{
                    GrayLevel[0.93], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 
                    0}, {1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{
                    25.499999999999996`, 2.5}, {25.499999999999996`, 
                    1.3953100000000003`}, {24.604699999999998`, 
                    0.49999999999999994`}, {23.5, 0.49999999999999994`}, {2.5,
                     0.49999999999999994`}, {1.3953100000000003`, 
                    0.49999999999999994`}, {0.49999999999999994`, 
                    1.3953100000000003`}, {0.49999999999999994`, 2.5}, {
                    0.49999999999999994`, 23.5}, {0.49999999999999994`, 
                    24.604699999999998`}, {1.3953100000000003`, 
                    25.499999999999996`}, {2.5, 25.499999999999996`}, {23.5, 
                    25.499999999999996`}, {24.604699999999998`, 
                    25.499999999999996`}, {25.499999999999996`, 
                    24.604699999999998`}, {25.499999999999996`, 23.5}, {
                    25.499999999999996`, 2.5}}}]}, {
                    FaceForm[{
                    RGBColor[0.5, 0.5, 0.5], 
                    Opacity[1.]}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{20.5426, 
                    19.116799999999998`}, {16.3832, 21.876199999999997`}, {
                    16.3832, 20.021499999999996`}, {6.930469999999999, 
                    20.021499999999996`}, {6.930469999999999, 
                    18.212100000000003`}, {16.3832, 18.212100000000003`}, {
                    16.3832, 16.357399999999995`}, {20.5426, 
                    19.116799999999998`}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{5.30508, 
                    13.8391}, {9.46445, 11.079700000000003`}, {9.46445, 
                    12.933999999999997`}, {18.917199999999998`, 
                    12.933999999999997`}, {18.917199999999998`, 14.7438}, {
                    9.46445, 14.7438}, {9.46445, 16.598}, {5.30508, 
                    13.8391}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGIRIGYC4r9qIkoPPog5zJd34+ifoeBwf6HGBfU8aYe0
2dKXhaMEHT77F2xc1CQH52elHtL/aqrg0KrArnpmjpRDvTCXYEG9gsOOYKuI
/6tlHZ5WFpRfO4qQn3ww8NOrXYpw/fNmfE3SCFCG8z8EiLwQ7lSF2w82/44y
nM937b/lmXNKDnK7FuxLZZFwMDfq/3NwgpKDccaL+Q9miDok9Mnt3x6k5FDt
mbylT0ECwk9QhOuXWfO/eIajPCq/WNYh5kh50jV+CYc1eV/nfGGShZsXte2a
OGevDNy8ZqG0W/9KpeD60cMLAIwUgfU=
                    "]], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{12.82453, 
                    5.289294374999999}, {11.960858124999998`, 8.29796625}, {
                    11.080858124999999`, 8.29796625}, {12.417186249999999`, 
                    4.337966249999999}, {13.193201874999998`, 
                    4.337966249999999}, {14.540701874999998`, 8.29796625}, {
                    13.688201874999999`, 8.29796625}, {12.82453, 
                    5.289294374999999}}}], 
                    
                    FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 
                    0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGIpIGYC4qwFP+fsFjB0WFcz7fnBvSIOLFaTza6GGTjM
l3fj6J+h4GC9PHLBXXc9DH7abOnLwlGCDtPNZKaxndfH4Is8/uOrISAD53uI
GTRGxyP4O4KtIv6fR/BbFdhVz8TIOqj9FNyfdEbfIejt5Y8zXiL4h7TunbCJ
koPzweYvkXP4mfT+6PSlBnD7n25Z/mROiSGcr7S/rqPX1AiuHsaHmQfjw+zz
lubzZjYxgrsHxoe5F8aH+QfGn/B91VROQQQfZr/Ei1viF75j8mHh6eiSdevo
cUM4Hz0+AG0eosQ=
                    "]]}}, Background -> GrayLevel[0.93], Axes -> False, 
                   AspectRatio -> 1, ImageSize -> {Automatic, 
                    Dynamic[
                    3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                    Magnification]), ImageSizeCache -> {45., {0., 9.}}]}, 
                   Frame -> True, FrameTicks -> None, FrameStyle -> Directive[
                    Thickness[Tiny], 
                    GrayLevel[0.7]]], 
                  GridBox[{{
                    RowBox[{
                    TagBox["\"Argument count: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox["1", "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Argument types: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    PaneBox[
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"_Integer", ",", "1"}], "}"}], "}"}], 
                    ImageSize -> {{1, 500}, Automatic}, BaselinePosition -> 
                    Baseline, ContentPadding -> False, FrameMargins -> 0, 
                    StripOnInput -> True], "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Variables: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    RowBox[{"{", "lazyLists`Private`n", "}"}], 
                    "SummaryItem"]}]}, {
                    RowBox[{
                    TagBox["\"Expression: \"", "SummaryItemAnnotation"], 
                    "\[InvisibleSpace]", 
                    TagBox[
                    PaneBox[
                    RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"lazyLists`Private`c$", "=", 
                    RowBox[{"lazyLists`Private`n", "-", "1"}]}], ",", 
                    "lazyLists`Private`q$"}], "}"}], ",", 
                    RowBox[{"1", "+", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"lazyLists`Private`q$", "=", 
                    RowBox[{"Quotient", "[", 
                    
                    RowBox[{"lazyLists`Private`c$", ",", 
                    "lazyLists`Private`i"}], "]"}]}], ";", 
                    RowBox[{"lazyLists`Private`c$", "=", 
                    RowBox[{"Mod", "[", 
                    
                    RowBox[{"lazyLists`Private`c$", ",", 
                    "lazyLists`Private`i"}], "]"}]}], ";", 
                    "lazyLists`Private`q$"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"lazyLists`Private`i", ",", 
                    RowBox[{"{", 
                    
                    RowBox[{"192000000000000", ",", "4800000000", ",", 
                    "80000", ",", "1"}], "}"}]}], "}"}]}], "]"}]}]}], "]"}], 
                    ImageSize -> {{1, 500}, Automatic}, BaselinePosition -> 
                    Baseline, ContentPadding -> False, FrameMargins -> 0, 
                    StripOnInput -> True], "SummaryItem"]}]}}, 
                   GridBoxAlignment -> {
                    "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, 
                   AutoDelete -> False, 
                   GridBoxItemSize -> {
                    "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                   GridBoxSpacings -> {
                    "Columns" -> {{2}}, "Rows" -> {{Automatic}}}, 
                   BaseStyle -> {
                    ShowStringCharacters -> False, NumberMarks -> False, 
                    PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
                GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
                GridBoxItemSize -> {
                 "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
                BaselinePosition -> {1, 1}]}, 
             Dynamic[Typeset`open$$], ImageSize -> Automatic]},
           "SummaryPanel"],
          DynamicModuleValues:>{}], "]"}],
        CompiledFunction[{11, 12., 5596}, {{
           Blank[Integer], 1}}, {{2, 1, 0}, {2, 2, 
         1}}, {{0, {2, 0, 4}}, {{192000000000000, 4800000000, 80000, 1}, {2, 
           1, 2}}, {-1, {2, 0, 0}}, {1, {2, 0, 1}}}, {0, 7, 0, 0, 
         8}, {{41, 257, 2, 0, 0, 2, 1, 0, 2, 1, 5}, {
          42, "CopyTensor", 2, 1, 2, 2, 1, 1}, {33, 1, 3}, {6, 0, 2}, {35, 3, 
          2, 2, 4}, {6, 4, 5}, {3, 6}, {37, 1, 5, 2, 6}, {41, 262, 2, 1, 5, 2,
           0, 6, 2, 1, 6}, {41, 261, 2, 1, 5, 2, 0, 6, 2, 1, 7}, {
          42, "CopyTensor", 2, 1, 7, 2, 1, 5}, {36, 2, 6, 0, 4}, {4, 5, 
          3, -5}, {41, 257, 2, 0, 1, 2, 2, 4, 2, 2, 1}, {1}}, 
         Function[{lazyLists`Private`n}, 
          
          Module[{lazyLists`Private`c$ = lazyLists`Private`n - 1, 
            lazyLists`Private`q$}, 1 + 
           Table[lazyLists`Private`q$ = 
              Quotient[lazyLists`Private`c$, lazyLists`Private`i]; 
             lazyLists`Private`c$ = 
              Mod[lazyLists`Private`c$, lazyLists`Private`i]; 
             lazyLists`Private`q$, {
             lazyLists`Private`i, {192000000000000, 4800000000, 80000, 1}}]], 
          Listable], Evaluate],
        Editable->False,
        SelectWithContents->True,
        Selectable->False], ",", "Listable"}], "}"}], "/@", 
     RowBox[{"partitionedLazyList", "[", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"lazyList", "[", 
          RowBox[{"#1", ",", 
           RowBox[{"#0", "[", 
            RowBox[{
             RowBox[{"#2", "+", "#1"}], ",", "#2"}], "]"}]}], "]"}], "&"}], 
        ")"}], "[", 
       RowBox[{
        RowBox[{"10", "+", 
         RowBox[{"{", 
          RowBox[{
          "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", 
           ",", "8", ",", "9", ",", "10"}], "}"}]}], ",", "10"}], "]"}], 
      "]"}]}]}]}], "]"}]], "Output",
 CellLabel->
  "Out[457]=",ExpressionUUID->"118cee9f-3833-4bc6-9e39-edf2981b8c7e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "1", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "1", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "1", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "1", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "1", ",", "6"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "1", ",", "7"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "1", ",", "8"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "1", ",", "9"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "1", ",", "10"}], "}"}]}], "}"}]], "Output",
 CellLabel->"Out[458]=",ExpressionUUID->"5ea3843e-c552-4209-81e4-25f8eaad4504"]
}, Open  ]],

Cell["Performance is roughly equal:", \
"Text",ExpressionUUID->"6ad83d6f-b3eb-4d9b-8d0a-d4803fce9d2d"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"Take", "[", 
    RowBox[{
     RowBox[{"lazyTuples", "[", 
      RowBox[{"largeLists", ",", 
       RowBox[{"\"\<PartitionSize\>\"", " ", "\[Rule]", " ", "1000"}]}], 
      "]"}], ",", "100000"}], "]"}], ";"}], "//", 
  "RepeatedTiming"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{"Take", "[", 
    RowBox[{
     RowBox[{"lazyTuples", "[", 
      RowBox[{
       RowBox[{"Hold", "[", "largeLists", "]"}], ",", " ", 
       RowBox[{"\"\<PartitionSize\>\"", " ", "\[Rule]", " ", "1000"}]}], 
      "]"}], ",", "100000"}], "]"}], ";"}], "//", 
  "RepeatedTiming"}]}], "Input",
 CellLabel->
  "In[459]:=",ExpressionUUID->"7797c505-283e-44fe-8288-25de541eb115"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.0454473445538330911`2.", ",", "Null"}], "}"}]], "Output",
 CellLabel->
  "Out[459]=",ExpressionUUID->"0eeebb26-badb-4e9e-be61-5646e7f2d121"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0.0448455934743534346`2.", ",", "Null"}], "}"}]], "Output",
 CellLabel->"Out[460]=",ExpressionUUID->"e2379998-61d4-4d1e-bf6d-62e190a23240"]
}, Open  ]],

Cell[TextData[{
 "Additionally, ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{"lazyTuples", "[", 
     RowBox[{"{", 
      RowBox[{"int1", ",", " ", "int2", ",", "int3", ",", " ", "..."}], "}"}],
      "]"}],
    FontWeight->"Bold"], TraditionalForm]],ExpressionUUID->
  "4d1a323a-e9c4-466d-8d16-e3ee7cdb203a"],
 " generates the lazy form of ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{"Tuples", "[", 
     RowBox[{"Range", "/@", 
      RowBox[{"{", 
       RowBox[{"int1", ",", " ", "int2", ",", "int3", ",", " ", "..."}], 
       "}"}]}], "]"}],
    FontWeight->"Bold"], TraditionalForm]],ExpressionUUID->
  "721929f7-8144-4e39-ace1-4d839e9d7dc0"],
 ". This form is very handy, because the general case of ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{"lazyTuples", "[", 
     RowBox[{"{", 
      RowBox[{"list1", ",", " ", "list2", ",", " ", "..."}], "}"}], "]"}],
    FontWeight->"Bold"], TraditionalForm]],ExpressionUUID->
  "cbab4707-e095-4d05-8958-ac62e99f4141"],
 " can be easily reduced to this simpler form by substituting the integers \
with elements from ",
 Cell[BoxData[
  FormBox[
   RowBox[{"{", 
    RowBox[{"list1", ",", " ", "list2", ",", " ", "..."}], "}"}], 
   TraditionalForm]],ExpressionUUID->"e479e6ed-cd36-476f-9b15-d2a2f59aa3b6"]
}], "Text",ExpressionUUID->"af0b444f-eef9-4deb-a375-a8ce20bed78a"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"integers", " ", "=", 
   RowBox[{"Length", "/@", "lists"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"integerLzTup", "=", 
   RowBox[{"lazyTuples", "[", "integers", "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"indices", " ", "=", " ", 
  RowBox[{"Most", "@", 
   RowBox[{"Take", "[", 
    RowBox[{"integerLzTup", ",", "10"}], "]"}]}]}], "\[IndentingNewLine]", 
 RowBox[{"Take", "[", 
  RowBox[{
   RowBox[{"Tuples", "[", 
    RowBox[{"Range", "/@", "integers"}], "]"}], ",", "10"}], "]"}]}], "Input",
 CellLabel->
  "In[461]:=",ExpressionUUID->"b2a2a167-b703-47ec-b403-e71deae5282a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "6"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "4"}], "}"}]}], "}"}]], "Output",
 CellLabel->
  "Out[463]=",ExpressionUUID->"1b91fb0e-9dc7-4123-9fd7-2cf52fd206ad"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "6"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "4"}], "}"}]}], "}"}]], "Output",
 CellLabel->"Out[464]=",ExpressionUUID->"2d6cd96a-4993-434e-80bb-30489e68352c"]
}, Open  ]],

Cell[TextData[{
 "Replacing the indices from ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{"lazyTuples", "[", "integers", "]"}],
    FontWeight->"Bold"], TraditionalForm]],ExpressionUUID->
  "d0c88d11-314f-421c-97d0-af85943f94e2"],
 " with elements from ",
 Cell[BoxData[
  FormBox["lists", TraditionalForm]],
  FontWeight->"Bold",ExpressionUUID->"9cbbab75-761e-4489-9d97-720899683120"],
 " can be done with ",
 StyleBox["bulkExtractElementsUsingIndexList",
  FontWeight->"Bold"],
 ", which operates on the transposed indices:"
}], "Text",ExpressionUUID->"4cff0ad7-883b-4e4a-aa83-d0bab0896d34"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"bulkExtractElementsUsingIndexList", "[", "lists", "]"}], "[", 
  RowBox[{"Transpose", "[", "indices", "]"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Take", "[", 
  RowBox[{
   RowBox[{"Tuples", "[", "lists", "]"}], ",", "10"}], "]"}]}], "Input",
 CellLabel->
  "In[465]:=",ExpressionUUID->"30ab54c6-37c9-461d-a28a-d719e2850ac6"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"a", ",", "1", ",", "u"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "1", ",", "v"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "1", ",", "w"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "1", ",", "x"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "1", ",", "y"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "1", ",", "z"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "2", ",", "u"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "2", ",", "v"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "2", ",", "w"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "2", ",", "x"}], "}"}]}], "}"}]], "Output",
 CellLabel->
  "Out[465]=",ExpressionUUID->"43ecb68d-50bd-4166-b7ee-5adff48ab9bc"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"a", ",", "1", ",", "u"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "1", ",", "v"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "1", ",", "w"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "1", ",", "x"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "1", ",", "y"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "1", ",", "z"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "2", ",", "u"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "2", ",", "v"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "2", ",", "w"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "2", ",", "x"}], "}"}]}], "}"}]], "Output",
 CellLabel->"Out[466]=",ExpressionUUID->"290bc957-cde5-4f06-ba0f-1c21643c37c6"]
}, Open  ]],

Cell["This function also works with held symbols:", \
"Text",ExpressionUUID->"603e3c3d-5264-4b1d-8348-291899842c1a"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"bulkExtractElementsUsingIndexList", "[", 
   RowBox[{"Hold", "[", "lists", "]"}], "]"}], "[", 
  RowBox[{"Transpose", "[", "indices", "]"}], "]"}]], "Input",
 CellLabel->
  "In[467]:=",ExpressionUUID->"0945acd9-b6a3-4f88-acc3-75755590d6be"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"a", ",", "1", ",", "u"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "1", ",", "v"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "1", ",", "w"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "1", ",", "x"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "1", ",", "y"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "1", ",", "z"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "2", ",", "u"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "2", ",", "v"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "2", ",", "w"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "2", ",", "x"}], "}"}]}], "}"}]], "Output",
 CellLabel->"Out[467]=",ExpressionUUID->"ad5d69d9-d85a-4716-8e48-04128ad2066c"]
}, Open  ]],

Cell[TextData[{
 StyleBox["bulkExtractElementsUsingIndexList",
  FontWeight->"Bold"],
 " also works for indices generated with ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{"lazyTuples", "[", 
     RowBox[{
      RowBox[{"Range", "[", 
       RowBox[{"Length", "[", "list", "]"}], "]"}], ",", "tupLength"}], "]"}],
    FontWeight->"Bold"], TraditionalForm]],ExpressionUUID->
  "03e05b84-f635-4e36-a0f0-03606fc1e6ea"],
 ", though you need to specify the length of the tuples generated:"
}], "Text",ExpressionUUID->"f2d4071b-8b8a-42e1-bcc1-fd60938914c5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Module", "[", 
  RowBox[{
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"list", "=", 
      RowBox[{"{", 
       RowBox[{"a", ",", "b", ",", "c", ",", "d", ",", "e"}], "}"}]}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"tupLength", "=", "3"}], ",", "\[IndentingNewLine]", "indices"}],
     "\[IndentingNewLine]", "}"}], ",", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"indices", "=", 
     RowBox[{"Most", "@", 
      RowBox[{"Take", "[", 
       RowBox[{
        RowBox[{"lazyTuples", "[", 
         RowBox[{
          RowBox[{"Range", "[", 
           RowBox[{"Length", "[", "list", "]"}], "]"}], ",", "tupLength"}], 
         "]"}], ",", "10"}], "]"}]}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"Print", "[", "indices", "]"}], ";", "\[IndentingNewLine]", 
    RowBox[{"Print", "@", 
     RowBox[{
      RowBox[{"bulkExtractElementsUsingIndexList", "[", 
       RowBox[{"list", ",", "tupLength"}], "]"}], "[", 
      RowBox[{"Transpose", "[", "indices", "]"}], "]"}]}], ";", 
    "\[IndentingNewLine]", 
    RowBox[{"Print", "@", 
     RowBox[{"Take", "[", 
      RowBox[{
       RowBox[{"Tuples", "[", 
        RowBox[{"list", ",", "tupLength"}], "]"}], ",", "10"}], "]"}]}]}]}], 
  "\[IndentingNewLine]", "]"}]], "Input",
 CellLabel->
  "In[468]:=",ExpressionUUID->"43124aa8-3a3d-4dea-957a-6fac34f0d61b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "5"}], "}"}]}], "}"}]], "Print",
 CellLabel->
  "During evaluation of \
In[468]:=",ExpressionUUID->"857db4e7-a73c-45c8-b99f-44e183fae2c7"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"a", ",", "a", ",", "a"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "a", ",", "b"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "a", ",", "c"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "a", ",", "d"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "a", ",", "e"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "b", ",", "a"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "b", ",", "b"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "b", ",", "c"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "b", ",", "d"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "b", ",", "e"}], "}"}]}], "}"}]], "Print",
 CellLabel->
  "During evaluation of \
In[468]:=",ExpressionUUID->"e922e472-928f-4436-87e0-9ba9b4b20559"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"a", ",", "a", ",", "a"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "a", ",", "b"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "a", ",", "c"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "a", ",", "d"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "a", ",", "e"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "b", ",", "a"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "b", ",", "b"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "b", ",", "c"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "b", ",", "d"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"a", ",", "b", ",", "e"}], "}"}]}], "}"}]], "Print",
 CellLabel->
  "During evaluation of \
In[468]:=",ExpressionUUID->"963b208a-05bc-40ee-8d5f-67f5f72997bf"]
}, Open  ]]
}, Open  ]],

Cell[TextData[{
 StyleBox["lazyTuples",
  FontWeight->"Bold"],
 " has options to specify the starting point in the list:"
}], "Text",ExpressionUUID->"3dfb3249-6b07-4b15-b052-1e556c742813"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Options", "[", "lazyTuples", "]"}], "\[IndentingNewLine]", 
 RowBox[{"Most", "@", 
  RowBox[{"Take", "[", 
   RowBox[{
    RowBox[{"lazyTuples", "[", 
     RowBox[{"integers", ",", " ", 
      RowBox[{"\"\<Start\>\"", "\[Rule]", " ", "10"}]}], "]"}], ",", "11"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"Take", "[", 
  RowBox[{
   RowBox[{"Tuples", "[", 
    RowBox[{"Range", "/@", "integers"}], "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"10", ",", "20"}], "}"}]}], "]"}]}], "Input",
 CellLabel->
  "In[469]:=",ExpressionUUID->"a018e5d0-7d7c-4b4d-ba6b-fda9b4773692"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"\<\"PartitionSize\"\>", "\[Rule]", "10"}], ",", 
   RowBox[{"\<\"Start\"\>", "\[Rule]", "1"}]}], "}"}]], "Output",
 CellLabel->
  "Out[469]=",ExpressionUUID->"e1e06629-62c0-45c0-9e00-1c6c480768f2"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "6"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "1", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "1", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "1", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "1", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "1", ",", "6"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "2", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "2", ",", "2"}], "}"}]}], "}"}]], "Output",
 CellLabel->
  "Out[470]=",ExpressionUUID->"bd5bd09a-8801-4193-b744-d05141a546d6"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "6"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "1", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "1", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "1", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "1", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "1", ",", "6"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "2", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "2", ",", "2"}], "}"}]}], "}"}]], "Output",
 CellLabel->"Out[471]=",ExpressionUUID->"855ec35f-67b9-4024-95ce-7da3943e0fb5"]
}, Open  ]],

Cell[TextData[{
 "The basis for lazyTuples is the function that generates the elements of ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{"lazyTuples", "[", "integers", "]"}],
    FontWeight->"Bold"], TraditionalForm]],ExpressionUUID->
  "6f88da6e-fd5e-4edf-b7e3-8dd47465147c"],
 ". You can invoke it directly with ",
 StyleBox["rangeTuplesAtPositions",
  FontWeight->"Bold"],
 ", which returns a listable compiled function (or a regular function if \
machine integers are insufficient for the problem) that generates the indices \
in transposed form:"
}], "Text",ExpressionUUID->"45dd6e62-9a31-4e4f-9b7c-c6c204e476a4"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"tuplesGenerator", " ", "=", " ", 
  RowBox[{
  "rangeTuplesAtPositions", "[", "integers", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"randomPositions", " ", "=", " ", 
  RowBox[{"RandomInteger", "[", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", 
      RowBox[{"Times", "@@", "integers"}]}], "}"}], ",", "10"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"tuplesGenerator", "[", "randomPositions", 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"Part", "[", 
  RowBox[{
   RowBox[{"Tuples", "[", 
    RowBox[{"Range", "/@", "integers"}], "]"}], ",", "randomPositions"}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Transpose", "[", "%%", "]"}], "\[Equal]", "%"}]}], "Input",
 CellLabel->
  "In[472]:=",ExpressionUUID->"2b0d041f-a811-4982-a9d5-1f40f27928db"],

Cell[BoxData[
 InterpretationBox[
  RowBox[{
   TagBox["CompiledFunction",
    "SummaryHead"], "[", 
   DynamicModuleBox[{Typeset`open$$ = False, Typeset`embedState$$ = "Ready"}, 
    TemplateBox[{
      PaneSelectorBox[{False -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquarePlusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = True), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{
              Thickness[0.038461538461538464`], {
               FaceForm[{
                 GrayLevel[0.93], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {
                1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{
                25.499999999999996`, 2.5}, {25.499999999999996`, 
                1.3953100000000003`}, {24.604699999999998`, 
                0.49999999999999994`}, {23.5, 0.49999999999999994`}, {2.5, 
                0.49999999999999994`}, {1.3953100000000003`, 
                0.49999999999999994`}, {0.49999999999999994`, 
                1.3953100000000003`}, {0.49999999999999994`, 2.5}, {
                0.49999999999999994`, 23.5}, {0.49999999999999994`, 
                24.604699999999998`}, {1.3953100000000003`, 
                25.499999999999996`}, {2.5, 25.499999999999996`}, {23.5, 
                25.499999999999996`}, {24.604699999999998`, 
                25.499999999999996`}, {25.499999999999996`, 
                24.604699999999998`}, {25.499999999999996`, 23.5}, {
                25.499999999999996`, 2.5}}}]}, {
               FaceForm[{
                 RGBColor[0.5, 0.5, 0.5], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{20.5426, 
                19.116799999999998`}, {16.3832, 21.876199999999997`}, {
                16.3832, 20.021499999999996`}, {6.930469999999999, 
                20.021499999999996`}, {6.930469999999999, 
                18.212100000000003`}, {16.3832, 18.212100000000003`}, {
                16.3832, 16.357399999999995`}, {20.5426, 
                19.116799999999998`}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{5.30508, 13.8391}, {
                9.46445, 11.079700000000003`}, {9.46445, 
                12.933999999999997`}, {18.917199999999998`, 
                12.933999999999997`}, {18.917199999999998`, 14.7438}, {
                9.46445, 14.7438}, {9.46445, 16.598}, {5.30508, 13.8391}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0,
                 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGIRIGYC4r9qIkoPPog5zJd34+ifoeBwf6HGBfU8aYe0
2dKXhaMEHT77F2xc1CQH52elHtL/aqrg0KrArnpmjpRDvTCXYEG9gsOOYKuI
/6tlHZ5WFpRfO4qQn3ww8NOrXYpw/fNmfE3SCFCG8z8EiLwQ7lSF2w82/44y
nM937b/lmXNKDnK7FuxLZZFwMDfq/3NwgpKDccaL+Q9miDok9Mnt3x6k5FDt
mbylT0ECwk9QhOuXWfO/eIajPCq/WNYh5kh50jV+CYc1eV/nfGGShZsXte2a
OGevDNy8ZqG0W/9KpeD60cMLAIwUgfU=
                "]], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{12.82453, 
                5.289294374999999}, {11.960858124999998`, 8.29796625}, {
                11.080858124999999`, 8.29796625}, {12.417186249999999`, 
                4.337966249999999}, {13.193201874999998`, 
                4.337966249999999}, {14.540701874999998`, 8.29796625}, {
                13.688201874999999`, 8.29796625}, {12.82453, 
                5.289294374999999}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0,
                 1, 0}, {0, 1, 0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGIpIGYC4qwFP+fsFjB0WFcz7fnBvSIOLFaTza6GGTjM
l3fj6J+h4GC9PHLBXXc9DH7abOnLwlGCDtPNZKaxndfH4Is8/uOrISAD53uI
GTRGxyP4O4KtIv6fR/BbFdhVz8TIOqj9FNyfdEbfIejt5Y8zXiL4h7TunbCJ
koPzweYvkXP4mfT+6PSlBnD7n25Z/mROiSGcr7S/rqPX1AiuHsaHmQfjw+zz
lubzZjYxgrsHxoe5F8aH+QfGn/B91VROQQQfZr/Ei1viF75j8mHh6eiSdevo
cUM4Hz0+AG0eosQ=
                "]]}}, Background -> GrayLevel[0.93], Axes -> False, 
             AspectRatio -> 1, ImageSize -> {Automatic, 
               Dynamic[
               3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification]), ImageSizeCache -> {45., {0., 9.}}]}, Frame -> 
             True, FrameTicks -> None, FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Argument count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["1", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Argument types: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  StyleBox[
                   PaneBox[
                    RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"_Integer", ",", "1"}], "}"}], "}"}], 
                    ContentPadding -> False, FrameMargins -> 0, StripOnInput -> 
                    True, BaselinePosition -> Baseline, 
                    ImageSize -> {{1, 300}, Automatic}], LineBreakWithin -> 
                   False], "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}], True -> GridBox[{{
            PaneBox[
             ButtonBox[
              DynamicBox[
               FEPrivate`FrontEndResource[
               "FEBitmaps", "SquareMinusIconMedium"]], 
              ButtonFunction :> (Typeset`open$$ = False), Appearance -> None, 
              Evaluator -> Automatic, Method -> "Preemptive"], 
             Alignment -> {Center, Center}, ImageSize -> 
             Dynamic[{
               Automatic, 
                3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification])}]], 
            GraphicsBox[{
              Thickness[0.038461538461538464`], {
               FaceForm[{
                 GrayLevel[0.93], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{1, 4, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}, {
                1, 3, 3}, {0, 1, 0}, {1, 3, 3}, {0, 1, 0}}}, {{{
                25.499999999999996`, 2.5}, {25.499999999999996`, 
                1.3953100000000003`}, {24.604699999999998`, 
                0.49999999999999994`}, {23.5, 0.49999999999999994`}, {2.5, 
                0.49999999999999994`}, {1.3953100000000003`, 
                0.49999999999999994`}, {0.49999999999999994`, 
                1.3953100000000003`}, {0.49999999999999994`, 2.5}, {
                0.49999999999999994`, 23.5}, {0.49999999999999994`, 
                24.604699999999998`}, {1.3953100000000003`, 
                25.499999999999996`}, {2.5, 25.499999999999996`}, {23.5, 
                25.499999999999996`}, {24.604699999999998`, 
                25.499999999999996`}, {25.499999999999996`, 
                24.604699999999998`}, {25.499999999999996`, 23.5}, {
                25.499999999999996`, 2.5}}}]}, {
               FaceForm[{
                 RGBColor[0.5, 0.5, 0.5], 
                 Opacity[1.]}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{20.5426, 
                19.116799999999998`}, {16.3832, 21.876199999999997`}, {
                16.3832, 20.021499999999996`}, {6.930469999999999, 
                20.021499999999996`}, {6.930469999999999, 
                18.212100000000003`}, {16.3832, 18.212100000000003`}, {
                16.3832, 16.357399999999995`}, {20.5426, 
                19.116799999999998`}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{5.30508, 13.8391}, {
                9.46445, 11.079700000000003`}, {9.46445, 
                12.933999999999997`}, {18.917199999999998`, 
                12.933999999999997`}, {18.917199999999998`, 14.7438}, {
                9.46445, 14.7438}, {9.46445, 16.598}, {5.30508, 13.8391}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0,
                 1, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGIRIGYC4r9qIkoPPog5zJd34+ifoeBwf6HGBfU8aYe0
2dKXhaMEHT77F2xc1CQH52elHtL/aqrg0KrArnpmjpRDvTCXYEG9gsOOYKuI
/6tlHZ5WFpRfO4qQn3ww8NOrXYpw/fNmfE3SCFCG8z8EiLwQ7lSF2w82/44y
nM937b/lmXNKDnK7FuxLZZFwMDfq/3NwgpKDccaL+Q9miDok9Mnt3x6k5FDt
mbylT0ECwk9QhOuXWfO/eIajPCq/WNYh5kh50jV+CYc1eV/nfGGShZsXte2a
OGevDNy8ZqG0W/9KpeD60cMLAIwUgfU=
                "]], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}, {0, 1, 0}, {0, 1, 0}}}, {{{12.82453, 
                5.289294374999999}, {11.960858124999998`, 8.29796625}, {
                11.080858124999999`, 8.29796625}, {12.417186249999999`, 
                4.337966249999999}, {13.193201874999998`, 
                4.337966249999999}, {14.540701874999998`, 8.29796625}, {
                13.688201874999999`, 8.29796625}, {12.82453, 
                5.289294374999999}}}], 
               
               FilledCurveBox[{{{0, 2, 0}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {
                0, 1, 0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 
                0}, {1, 3, 3}, {1, 3, 3}, {0, 1, 0}, {0, 1, 0}, {0, 1, 0}, {0,
                 1, 0}, {0, 1, 0}}}, CompressedData["
1:eJxTTMoPSmVmYGBgBGIpIGYC4qwFP+fsFjB0WFcz7fnBvSIOLFaTza6GGTjM
l3fj6J+h4GC9PHLBXXc9DH7abOnLwlGCDtPNZKaxndfH4Is8/uOrISAD53uI
GTRGxyP4O4KtIv6fR/BbFdhVz8TIOqj9FNyfdEbfIejt5Y8zXiL4h7TunbCJ
koPzweYvkXP4mfT+6PSlBnD7n25Z/mROiSGcr7S/rqPX1AiuHsaHmQfjw+zz
lubzZjYxgrsHxoe5F8aH+QfGn/B91VROQQQfZr/Ei1viF75j8mHh6eiSdevo
cUM4Hz0+AG0eosQ=
                "]]}}, Background -> GrayLevel[0.93], Axes -> False, 
             AspectRatio -> 1, ImageSize -> {Automatic, 
               Dynamic[
               3.5 (CurrentValue["FontCapHeight"]/AbsoluteCurrentValue[
                 Magnification]), ImageSizeCache -> {45., {0., 9.}}]}, Frame -> 
             True, FrameTicks -> None, FrameStyle -> Directive[
               Thickness[Tiny], 
               GrayLevel[0.7]]], 
            GridBox[{{
               RowBox[{
                 TagBox["\"Argument count: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox["1", "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Argument types: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  PaneBox[
                   RowBox[{"{", 
                    RowBox[{"{", 
                    RowBox[{"_Integer", ",", "1"}], "}"}], "}"}], 
                   ImageSize -> {{1, 500}, Automatic}, BaselinePosition -> 
                   Baseline, ContentPadding -> False, FrameMargins -> 0, 
                   StripOnInput -> True], "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Variables: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  RowBox[{"{", "lazyLists`Private`n", "}"}], 
                  "SummaryItem"]}]}, {
               RowBox[{
                 TagBox["\"Expression: \"", "SummaryItemAnnotation"], 
                 "\[InvisibleSpace]", 
                 TagBox[
                  PaneBox[
                   RowBox[{"Module", "[", 
                    RowBox[{
                    RowBox[{"{", 
                    RowBox[{
                    RowBox[{"lazyLists`Private`c$", "=", 
                    RowBox[{"lazyLists`Private`n", "-", "1"}]}], ",", 
                    "lazyLists`Private`q$"}], "}"}], ",", 
                    RowBox[{"1", "+", 
                    RowBox[{"Table", "[", 
                    RowBox[{
                    RowBox[{
                    RowBox[{"lazyLists`Private`q$", "=", 
                    RowBox[{"Quotient", "[", 
                    
                    RowBox[{"lazyLists`Private`c$", ",", 
                    "lazyLists`Private`i"}], "]"}]}], ";", 
                    RowBox[{"lazyLists`Private`c$", "=", 
                    RowBox[{"Mod", "[", 
                    
                    RowBox[{"lazyLists`Private`c$", ",", 
                    "lazyLists`Private`i"}], "]"}]}], ";", 
                    "lazyLists`Private`q$"}], ",", 
                    RowBox[{"{", 
                    RowBox[{"lazyLists`Private`i", ",", 
                    RowBox[{"{", 
                    RowBox[{"12", ",", "6", ",", "1"}], "}"}]}], "}"}]}], 
                    "]"}]}]}], "]"}], ImageSize -> {{1, 500}, Automatic}, 
                   BaselinePosition -> Baseline, ContentPadding -> False, 
                   FrameMargins -> 0, StripOnInput -> True], 
                  "SummaryItem"]}]}}, 
             GridBoxAlignment -> {
              "Columns" -> {{Left}}, "Rows" -> {{Automatic}}}, AutoDelete -> 
             False, GridBoxItemSize -> {
              "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
             GridBoxSpacings -> {"Columns" -> {{2}}, "Rows" -> {{Automatic}}},
              BaseStyle -> {
              ShowStringCharacters -> False, NumberMarks -> False, 
               PrintPrecision -> 3, ShowSyntaxStyles -> False}]}}, 
          GridBoxAlignment -> {"Rows" -> {{Top}}}, AutoDelete -> False, 
          GridBoxItemSize -> {
           "Columns" -> {{Automatic}}, "Rows" -> {{Automatic}}}, 
          BaselinePosition -> {1, 1}]}, 
       Dynamic[Typeset`open$$], ImageSize -> Automatic]},
     "SummaryPanel"],
    DynamicModuleValues:>{}], "]"}],
  CompiledFunction[{11, 12., 5596}, {{
     Blank[Integer], 1}}, {{2, 1, 0}, {2, 2, 
   1}}, {{0, {2, 0, 4}}, {{12, 6, 1}, {2, 1, 2}}, {-1, {2, 0, 0}}, {
    1, {2, 0, 1}}}, {0, 7, 0, 0, 
   8}, {{41, 257, 2, 0, 0, 2, 1, 0, 2, 1, 5}, {
    42, "CopyTensor", 2, 1, 2, 2, 1, 1}, {33, 1, 3}, {6, 0, 2}, {35, 3, 2, 2, 
    4}, {6, 4, 5}, {3, 6}, {37, 1, 5, 2, 6}, {41, 262, 2, 1, 5, 2, 0, 6, 2, 1,
     6}, {41, 261, 2, 1, 5, 2, 0, 6, 2, 1, 7}, {
    42, "CopyTensor", 2, 1, 7, 2, 1, 5}, {36, 2, 6, 0, 4}, {4, 5, 3, -5}, {41,
     257, 2, 0, 1, 2, 2, 4, 2, 2, 1}, {1}}, 
   Function[{lazyLists`Private`n}, 
    Module[{
     lazyLists`Private`c$ = lazyLists`Private`n - 1, lazyLists`Private`q$}, 1 + 
     Table[lazyLists`Private`q$ = 
        Quotient[lazyLists`Private`c$, lazyLists`Private`i]; 
       lazyLists`Private`c$ = Mod[lazyLists`Private`c$, lazyLists`Private`i]; 
       lazyLists`Private`q$, {lazyLists`Private`i, {12, 6, 1}}]], Listable], 
   Evaluate],
  Editable->False,
  SelectWithContents->True,
  Selectable->False]], "Output",
 CellLabel->
  "Out[472]=",ExpressionUUID->"dd726a4b-47b4-48dc-b7a0-3050edf9c89d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "6", ",", "2", ",", "31", ",", "16", ",", "25", ",", "29", ",", "19", ",", 
   "8", ",", "34", ",", "15"}], "}"}]], "Output",
 CellLabel->
  "Out[473]=",ExpressionUUID->"582a872f-8e96-4c9d-8b74-c5d34579d64c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "1", ",", "1", ",", "3", ",", "2", ",", "3", ",", "3", ",", "2", ",", "1",
      ",", "3", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "1", ",", "1", ",", "2", ",", "1", ",", "1", ",", "1", ",", "2", ",", "2",
      ",", "2", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "6", ",", "2", ",", "1", ",", "4", ",", "1", ",", "5", ",", "1", ",", "2",
      ",", "4", ",", "3"}], "}"}]}], "}"}]], "Output",
 CellLabel->
  "Out[474]=",ExpressionUUID->"b8f63f9e-2542-41d3-96f6-46d9b1f5e08f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "6"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "2", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "1", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "1", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "2", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "2", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "1", ",", "3"}], "}"}]}], "}"}]], "Output",
 CellLabel->
  "Out[475]=",ExpressionUUID->"f8e55e9d-11e1-489c-a9ee-3bee9711079b"],

Cell[BoxData["True"], "Output",
 CellLabel->"Out[476]=",ExpressionUUID->"0a66c329-478e-4dd0-9850-11a2a5c96ea1"]
}, Open  ]],

Cell[TextData[{
 "Finally, there is the special case ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{"lazyTuples", "[", "n", "]"}],
    FontWeight->"Bold"], TraditionalForm]],ExpressionUUID->
  "9fff24fa-5558-44f7-8ffe-905d7daedd98"],
 ", which is an infinite lazyList that generates all n-tuples of positive \
integers:"
}], "Text",ExpressionUUID->"395ef5f8-2805-4660-be78-c3dae52b8407"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"infTuples", "=", 
   RowBox[{"lazyTuples", "[", "4", "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Most", "@", 
  RowBox[{"Take", "[", 
   RowBox[{"infTuples", ",", "75"}], "]"}]}]}], "Input",
 CellLabel->
  "In[477]:=",ExpressionUUID->"563961ab-ad80-4e49-9cc7-22dda1b09952"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "1", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "2", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "1", ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "1", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "2", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "3", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "1", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "2", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "3", ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "1", ",", "1", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "1", ",", "2", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "2", ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "1", ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "1", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "2", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "3", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "4", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "1", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "2", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "3", ",", "1", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "3", ",", "2", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "4", ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "1", ",", "1", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "1", ",", "2", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "1", ",", "3", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "2", ",", "1", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "2", ",", "2", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "3", ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "1", ",", "1", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "1", ",", "2", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "2", ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "1", ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "1", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "2", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "3", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "4", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "5", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "1", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "2", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "4", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "3", ",", "1", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "3", ",", "2", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "3", ",", "3", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "4", ",", "1", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "4", ",", "2", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "5", ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "1", ",", "1", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "1", ",", "2", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "1", ",", "3", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "1", ",", "4", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "2", ",", "1", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "2", ",", "2", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "2", ",", "3", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "3", ",", "1", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "3", ",", "2", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "4", ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "1", ",", "1", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "1", ",", "2", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "1", ",", "3", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "2", ",", "1", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "2", ",", "2", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "3", ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "1", ",", "1", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "1", ",", "2", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "2", ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "1", ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "1", ",", "6"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "2", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "3", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "4", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "1", ",", "5", ",", "2"}], "}"}]}], "}"}]], "Output",
 CellLabel->"Out[478]=",ExpressionUUID->"1a9a3c99-229a-4d5c-8618-b70d2d519a6a"]
}, Open  ]],

Cell[TextData[{
 "Check that it agrees with ",
 StyleBox["Tuples",
  FontWeight->"Bold"],
 " for tuples that sum to less than 9. Note that ",
 StyleBox["Tuples",
  FontWeight->"Bold"],
 " generates elements in a different order, so we have to sort first when we \
compare:"
}], "Text",ExpressionUUID->"bb515a1d-5b56-40e1-8eb9-be80829a9e54"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Sort", "@", 
   RowBox[{"Select", "[", 
    RowBox[{"%", ",", 
     RowBox[{
      RowBox[{
       RowBox[{"Total", "[", "#", "]"}], "<", "9"}], "&"}]}], "]"}]}], "===", 
  RowBox[{"Sort", "@", 
   RowBox[{"Select", "[", 
    RowBox[{
     RowBox[{"Tuples", "[", 
      RowBox[{
       RowBox[{"Range", "[", "10", "]"}], ",", "4"}], "]"}], ",", 
     RowBox[{
      RowBox[{
       RowBox[{"Total", "[", "#", "]"}], "<", "9"}], "&"}]}], 
    "]"}]}]}]], "Input",
 CellLabel->
  "In[479]:=",ExpressionUUID->"45f4a44a-c327-4163-8fc5-6d00fc6578cf"],

Cell[BoxData["True"], "Output",
 CellLabel->"Out[479]=",ExpressionUUID->"7f80c483-6d55-4d99-a012-8fecf7a79141"]
}, Open  ]],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{"lazyTuples", "[", "n", "]"}],
    FontWeight->"Bold"], TraditionalForm]],ExpressionUUID->
  "5a330b88-90c5-469b-bdd9-0c1008b6418e"],
 " is implemented as a ",
 StyleBox["partitionedLazyNestList",
  FontWeight->"Bold"],
 ". You can set specify the tuple where you want to start with the second \
argument:"
}], "Text",ExpressionUUID->"babf8f36-be29-40fb-87b7-a4b63476bf93"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Most", "@", 
  RowBox[{"Take", "[", 
   RowBox[{
    RowBox[{"lazyTuples", "[", 
     RowBox[{"4", ",", 
      RowBox[{"{", 
       RowBox[{"1", ",", "4", ",", "10", ",", "2"}], "}"}]}], "]"}], ",", 
    "20"}], "]"}]}]], "Input",
 CellLabel->
  "In[480]:=",ExpressionUUID->"64826d1a-7bf3-40cc-82ab-9615e483ce5d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "4", ",", "10", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "4", ",", "11", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "5", ",", "1", ",", "10"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "5", ",", "2", ",", "9"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "5", ",", "3", ",", "8"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "5", ",", "4", ",", "7"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "5", ",", "5", ",", "6"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "5", ",", "6", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "5", ",", "7", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "5", ",", "8", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "5", ",", "9", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "5", ",", "10", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "6", ",", "1", ",", "9"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "6", ",", "2", ",", "8"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "6", ",", "3", ",", "7"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "6", ",", "4", ",", "6"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "6", ",", "5", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "6", ",", "6", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "6", ",", "7", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "6", ",", "8", ",", "2"}], "}"}]}], "}"}]], "Output",
 CellLabel->"Out[480]=",ExpressionUUID->"95ed3d6f-8f4c-470f-a8a3-f653e298379e"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Lazy file streams", \
"Subsubsection",ExpressionUUID->"6d9500cf-eaaf-4ac9-97d8-236f0b90d0fa"],

Cell["lazyLists can be used with InputStreams. First make a file:", \
"Text",ExpressionUUID->"f082c183-c495-4435-9420-7573f759251c"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"stmp", "=", 
   RowBox[{"OpenWrite", "[", "\"\<tmp\>\"", "]"}]}], ";"}], "\n", 
 RowBox[{"Write", "[", 
  RowBox[{"stmp", ",", "a", ",", "b", ",", "c"}], "]"}], "\n", 
 RowBox[{"Write", "[", 
  RowBox[{"stmp", ",", "x"}], "]"}], "\n", 
 RowBox[{"Write", "[", 
  RowBox[{"stmp", ",", "\"\<Hello\>\""}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Write", "[", 
  RowBox[{"stmp", ",", "\"\<Hello\>\""}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Write", "[", 
  RowBox[{"stmp", ",", "\"\<Hello\>\""}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Close", "[", "stmp", "]"}]}], "Input",
 CellLabel->"In[481]:=",
 CellID->28621,ExpressionUUID->"56e7c7ce-37ef-4877-9931-7dd9f3a12e91"],

Cell[BoxData["\<\"tmp\"\>"], "Output",
 CellLabel->"Out[487]=",ExpressionUUID->"da01d9f7-710a-4aa5-9212-f4d928bfd4bf"]
}, Open  ]],

Cell["Open a reading stream and make a lazyList out of it:", \
"Text",ExpressionUUID->"a3290700-5172-4544-bd8e-a4ce7202ecbb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Module", "[", 
  RowBox[{
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"stream", "=", 
      RowBox[{"OpenRead", "[", "\"\<tmp\>\"", "]"}]}], ",", 
     "\[IndentingNewLine]", "result"}], "\[IndentingNewLine]", "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"result", "=", 
     RowBox[{"First", "@", 
      RowBox[{"Take", "[", 
       RowBox[{
        RowBox[{"lazyStream", "[", "stream", "]"}], ",", "3"}], "]"}]}]}], 
    ";", "\[IndentingNewLine]", 
    RowBox[{"Close", "[", "stream", "]"}], ";", "\[IndentingNewLine]", 
    "result"}]}], "\[IndentingNewLine]", "]"}]], "Input",
 CellLabel->
  "In[488]:=",ExpressionUUID->"397a2c85-f736-4613-8c9b-d8a642960c89"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"abc", ",", "x", ",", "\<\"Hello\"\>"}], "}"}]], "Output",
 CellLabel->"Out[488]=",ExpressionUUID->"8601d2ee-42b9-4adf-87d9-71dc48ff1c60"]
}, Open  ]],

Cell["\<\
The stream will cut out automatically when it reaches the end of the file:\
\>", "Text",ExpressionUUID->"57ec74de-bf80-4038-9fb8-21b16a056923"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Module", "[", 
  RowBox[{
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"stream", "=", 
      RowBox[{"OpenRead", "[", "\"\<tmp\>\"", "]"}]}], ",", 
     "\[IndentingNewLine]", "result"}], "\[IndentingNewLine]", "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"result", "=", 
     RowBox[{"First", "@", 
      RowBox[{"TakeWhile", "[", 
       RowBox[{
        RowBox[{"lazyStream", "[", "stream", "]"}], ",", 
        RowBox[{"True", "&"}]}], "]"}]}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"Close", "[", "stream", "]"}], ";", "\[IndentingNewLine]", 
    "result"}]}], "\[IndentingNewLine]", "]"}]], "Input",
 CellLabel->
  "In[489]:=",ExpressionUUID->"71fdd96b-ab00-400c-a4be-632c2ee366b4"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "abc", ",", "x", ",", "\<\"Hello\"\>", ",", "\<\"Hello\"\>", 
   ",", "\<\"Hello\"\>", ",", "EndOfFile"}], "}"}]], "Output",
 CellLabel->"Out[489]=",ExpressionUUID->"bd613fd8-10a3-40dc-8914-52586149562c"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["lazyListable symbols", \
"Subsubsection",ExpressionUUID->"32ca79bc-ba74-4208-a932-2f9538a6a4fc"],

Cell[TextData[{
 StyleBox["Plus",
  FontWeight->"Bold"],
 ", ",
 StyleBox["Times",
  FontWeight->"Bold"],
 ", ",
 StyleBox["Power",
  FontWeight->"Bold"],
 ", ",
 StyleBox["Divide",
  FontWeight->"Bold"],
 ", and ",
 StyleBox["Subtract ",
  FontWeight->"Bold"],
 "thread over lazyLists, though these functionalities less efficient than for \
ordinary lists and should probably be avoided if the same can be achieved \
with FoldList or Map"
}], "Text",ExpressionUUID->"d3f5e510-6511-42f7-bf7f-18d13a7c0060"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"First", " ", "@", " ", 
  RowBox[{"Take", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"lazyRange", "[", "]"}], "+", 
     RowBox[{"lazyRange", "[", "2", "]"}]}], ",", "5"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"First", " ", "@", " ", 
  RowBox[{"Take", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"2", "*", " ", 
      RowBox[{"lazyRange", "[", "]"}]}], "+", 
     RowBox[{"3", " ", 
      RowBox[{"lazyRange", "[", 
       RowBox[{"1", ",", "2"}], "]"}]}]}], ",", "5"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"First", " ", "@", " ", 
  RowBox[{"Take", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"lazyRange", "[", "]"}], "^", 
     RowBox[{"lazyRange", "[", "]"}]}], ",", "5"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"First", " ", "@", " ", 
  RowBox[{"Take", "[", 
   RowBox[{
    RowBox[{"Divide", "[", 
     RowBox[{"1", ",", 
      RowBox[{"lazyRange", "[", 
       RowBox[{"2", ",", "2"}], "]"}]}], "]"}], ",", "5"}], "]"}]}]}], "Input",
 CellLabel->
  "In[490]:=",ExpressionUUID->"431c46dd-1989-4038-a8a6-287ac92d6e53"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"3", ",", "5", ",", "7", ",", "9", ",", "11"}], "}"}]], "Output",
 CellLabel->
  "Out[490]=",ExpressionUUID->"78056082-103d-4eca-95eb-18b415dd90b5"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"5", ",", "13", ",", "21", ",", "29", ",", "37"}], "}"}]], "Output",
 CellLabel->
  "Out[491]=",ExpressionUUID->"c67a3b7d-dc78-48ec-8ded-95f94e8ee3df"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "4", ",", "27", ",", "256", ",", "3125"}], 
  "}"}]], "Output",
 CellLabel->
  "Out[492]=",ExpressionUUID->"e50709e1-7179-47c2-8900-e0a337c4a502"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   FractionBox["1", "2"], ",", 
   FractionBox["1", "4"], ",", 
   FractionBox["1", "6"], ",", 
   FractionBox["1", "8"], ",", 
   FractionBox["1", "10"]}], "}"}]], "Output",
 CellLabel->"Out[493]=",ExpressionUUID->"a9b6ca32-36cf-4d28-b18b-6278b10f2cce"]
}, Open  ]],

Cell[TextData[{
 "Any symbol can be made lazyListable with ",
 StyleBox["setLazyListable",
  FontWeight->"Bold"],
 ":"
}], "Text",ExpressionUUID->"e56652a5-9171-4453-8da2-7cca48981030"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"setLazyListable", "[", "listableSymbol", 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Take", "[", 
   RowBox[{
    RowBox[{"listableSymbol", "[", 
     RowBox[{
      RowBox[{"lazyRange", "[", "]"}], ",", " ", 
      RowBox[{"lazyRange", "[", "2", "]"}], ",", "5"}], "]"}], ",", "5"}], 
   "]"}], "//", "First"}]}], "Input",
 CellLabel->
  "In[494]:=",ExpressionUUID->"595f695a-9a82-4d14-9adc-523c9b0bcd45"],

Cell[BoxData["listableSymbol"], "Output",
 CellLabel->
  "Out[494]=",ExpressionUUID->"d4b0dc72-9490-4676-93b1-9abadb4dec43"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"listableSymbol", "[", 
    RowBox[{"1", ",", "2", ",", "5"}], "]"}], ",", 
   RowBox[{"listableSymbol", "[", 
    RowBox[{"2", ",", "3", ",", "5"}], "]"}], ",", 
   RowBox[{"listableSymbol", "[", 
    RowBox[{"3", ",", "4", ",", "5"}], "]"}], ",", 
   RowBox[{"listableSymbol", "[", 
    RowBox[{"4", ",", "5", ",", "5"}], "]"}], ",", 
   RowBox[{"listableSymbol", "[", 
    RowBox[{"5", ",", "6", ",", "5"}], "]"}]}], "}"}]], "Output",
 CellLabel->"Out[495]=",ExpressionUUID->"07cf8939-7fc5-42b1-800d-58f6cbb9e044"]
}, Open  ]],

Cell[TextData[{
 "Note, however, that the regular ",
 StyleBox["Listable",
  FontWeight->"Bold"],
 " attribute has priority since it\[CloseCurlyQuote]s a proper attribute \
while LazyListable symbols are implemented with UpValues. Because of this, ",
 StyleBox["listableSymbol",
  FontWeight->"Bold"],
 " will evaluate to a list of lazyLists in the example below:"
}], "Text",ExpressionUUID->"47115dd6-0270-4b7b-9aaf-d0ce2488cdad"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"SetAttributes", "[", 
  RowBox[{"listableSymbol", ",", 
   RowBox[{"{", "Listable", "}"}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"listableSymbol", "[", 
  RowBox[{
   RowBox[{"lazyRange", "[", "]"}], ",", " ", 
   RowBox[{"lazyRange", "[", "2", "]"}], ",", "5", ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "2"}], "}"}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{
   RowBox[{
    RowBox[{"First", "[", 
     RowBox[{"Take", "[", 
      RowBox[{"#", ",", "3"}], "]"}], "]"}], "&"}], "/@", "%"}], "//", 
  "TableForm"}]}], "Input",
 CellLabel->
  "In[496]:=",ExpressionUUID->"06c0882c-d9cf-4d6f-b73e-8f7d4cd2efc0"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"lazyList", "[", 
    RowBox[{
     RowBox[{"listableSymbol", "[", 
      RowBox[{"1", ",", "2", ",", "5", ",", "1"}], "]"}], ",", 
     RowBox[{"listableSymbol", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"lazyList", "[", 
           RowBox[{"#1", ",", 
            RowBox[{"#0", "[", 
             RowBox[{
              RowBox[{"#2", "+", "#1"}], ",", "#2"}], "]"}]}], "]"}], "&"}], 
         ")"}], "[", 
        RowBox[{
         RowBox[{"1", "+", "1"}], ",", "1"}], "]"}], ",", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"lazyList", "[", 
           RowBox[{"#1", ",", 
            RowBox[{"#0", "[", 
             RowBox[{
              RowBox[{"#2", "+", "#1"}], ",", "#2"}], "]"}]}], "]"}], "&"}], 
         ")"}], "[", 
        RowBox[{
         RowBox[{"1", "+", "2"}], ",", "1"}], "]"}], ",", "5", ",", "1"}], 
      "]"}]}], "]"}], ",", 
   RowBox[{"lazyList", "[", 
    RowBox[{
     RowBox[{"listableSymbol", "[", 
      RowBox[{"1", ",", "2", ",", "5", ",", "2"}], "]"}], ",", 
     RowBox[{"listableSymbol", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"lazyList", "[", 
           RowBox[{"#1", ",", 
            RowBox[{"#0", "[", 
             RowBox[{
              RowBox[{"#2", "+", "#1"}], ",", "#2"}], "]"}]}], "]"}], "&"}], 
         ")"}], "[", 
        RowBox[{
         RowBox[{"1", "+", "1"}], ",", "1"}], "]"}], ",", 
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"lazyList", "[", 
           RowBox[{"#1", ",", 
            RowBox[{"#0", "[", 
             RowBox[{
              RowBox[{"#2", "+", "#1"}], ",", "#2"}], "]"}]}], "]"}], "&"}], 
         ")"}], "[", 
        RowBox[{
         RowBox[{"1", "+", "2"}], ",", "1"}], "]"}], ",", "5", ",", "2"}], 
      "]"}]}], "]"}]}], "}"}]], "Output",
 CellLabel->
  "Out[497]=",ExpressionUUID->"5c81b747-aaf1-4ef6-af9e-c77e91db171e"],

Cell[BoxData[
 TagBox[GridBox[{
    {
     RowBox[{"listableSymbol", "[", 
      RowBox[{"1", ",", "2", ",", "5", ",", "1"}], "]"}], 
     RowBox[{"listableSymbol", "[", 
      RowBox[{"2", ",", "3", ",", "5", ",", "1"}], "]"}], 
     RowBox[{"listableSymbol", "[", 
      RowBox[{"3", ",", "4", ",", "5", ",", "1"}], "]"}]},
    {
     RowBox[{"listableSymbol", "[", 
      RowBox[{"1", ",", "2", ",", "5", ",", "2"}], "]"}], 
     RowBox[{"listableSymbol", "[", 
      RowBox[{"2", ",", "3", ",", "5", ",", "2"}], "]"}], 
     RowBox[{"listableSymbol", "[", 
      RowBox[{"3", ",", "4", ",", "5", ",", "2"}], "]"}]}
   },
   GridBoxAlignment->{"Columns" -> {{Left}}, "Rows" -> {{Baseline}}},
   GridBoxSpacings->{"Columns" -> {
       Offset[0.27999999999999997`], {
        Offset[2.0999999999999996`]}, 
       Offset[0.27999999999999997`]}, "Rows" -> {
       Offset[0.2], {
        Offset[0.4]}, 
       Offset[0.2]}}],
  Function[BoxForm`e$, 
   TableForm[BoxForm`e$]]]], "Output",
 CellLabel->
  "Out[498]//TableForm=",ExpressionUUID->"04034a19-f2e0-49b8-a99a-\
bf05fd4d2bea"]
}, Open  ]],

Cell["\<\
Listability works even if the generated lists are not of equal length:\
\>", "Text",ExpressionUUID->"7399c32e-5d46-421d-b54d-792b4a69d354"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Take", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"a", " ", "*", 
      RowBox[{"partitionedLazyList", "@", 
       RowBox[{"lazyGenerator", "[", 
        RowBox[{"Range", ",", "1", ",", "1"}], "]"}]}]}], "+", 
     RowBox[{"b", "/", " ", 
      RowBox[{"partitionedLazyList", "@", 
       RowBox[{"lazyGenerator", "[", 
        RowBox[{"Range", ",", "2", ",", "2"}], "]"}]}]}]}], ",", "5"}], "]"}],
   "//", "Most"}]], "Input",
 CellLabel->
  "In[500]:=",ExpressionUUID->"686d0fcf-dfd9-46bd-8d38-0aa07ea9e9bc"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"a", "+", "b"}], ",", 
   RowBox[{"a", "+", 
    FractionBox["b", "2"]}], ",", 
   RowBox[{
    RowBox[{"2", " ", "a"}], "+", "b"}], ",", 
   RowBox[{"a", "+", 
    FractionBox["b", "2"]}], ",", 
   RowBox[{
    RowBox[{"2", " ", "a"}], "+", 
    FractionBox["b", "3"]}]}], "}"}]], "Output",
 CellLabel->"Out[500]=",ExpressionUUID->"729978c8-8a55-43ba-952f-79bcc3a9adec"]
}, Open  ]],

Cell["\<\
If different partition lengths are combined, the result will have the longest \
partition length found:\
\>", "Text",ExpressionUUID->"7766cff5-c605-4197-bc02-10a494943cd7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Most", "[", 
  RowBox[{
   RowBox[{"partitionedLazyRange", "[", "3", "]"}], "+", 
   RowBox[{"partitionedLazyRange", "[", "5", "]"}], "+", 
   RowBox[{"partitionedLazyRange", "[", "6", "]"}]}], "]"}]], "Input",
 CellLabel->
  "In[501]:=",ExpressionUUID->"e4d96ea8-3182-4475-ad0f-6acad762bd3f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"3", ",", "6", ",", "9", ",", "12", ",", "15", ",", "18"}], 
  "}"}]], "Output",
 CellLabel->"Out[501]=",ExpressionUUID->"bebe44ba-d73b-4643-9608-055d43f63b6c"]
}, Open  ]],

Cell[TextData[{
 "If an operator automatically threads over lists, you can take advantage of \
this with ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{"setLazyListable", "[", 
     RowBox[{"{", 
      RowBox[{"sym", ",", "Listable"}], "}"}], "]"}],
    FontWeight->"Bold"], TraditionalForm]],ExpressionUUID->
  "4b60e46c-f2cd-444c-975b-72fff28c222d"],
 " in the same way as with Map:"
}], "Text",ExpressionUUID->"26b464ba-ac77-4049-aead-04822d872556"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"setLazyListable", "[", 
  RowBox[{"{", 
   RowBox[{"Sin", ",", "Listable"}], "}"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Most", "@", 
  RowBox[{"Sin", "[", 
   RowBox[{"partitionedLazyRange", "[", "10", "]"}], "]"}]}]}], "Input",
 CellLabel->
  "In[502]:=",ExpressionUUID->"cc883a1c-8641-4fdc-9091-95f453366031"],

Cell[BoxData["Sin"], "Output",
 CellLabel->
  "Out[502]=",ExpressionUUID->"e7e49fa1-0160-455e-81fa-e1bb1bba88a0"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"Sin", "[", "1", "]"}], ",", 
   RowBox[{"Sin", "[", "2", "]"}], ",", 
   RowBox[{"Sin", "[", "3", "]"}], ",", 
   RowBox[{"Sin", "[", "4", "]"}], ",", 
   RowBox[{"Sin", "[", "5", "]"}], ",", 
   RowBox[{"Sin", "[", "6", "]"}], ",", 
   RowBox[{"Sin", "[", "7", "]"}], ",", 
   RowBox[{"Sin", "[", "8", "]"}], ",", 
   RowBox[{"Sin", "[", "9", "]"}], ",", 
   RowBox[{"Sin", "[", "10", "]"}]}], "}"}]], "Output",
 CellLabel->"Out[503]=",ExpressionUUID->"7853ca82-6f5c-4228-9402-754689db2448"]
}, Open  ]],

Cell["\<\
Currently, adding lazyLists and partitionedLazyLists is not supported:\
\>", "Text",ExpressionUUID->"0b14ae6b-323b-4d43-8f5e-4426dfb3128e"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{
  RowBox[{"Take", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"partitionedLazyRange", "[", "10", "]"}], "+", 
     RowBox[{"lazyRange", "[", "]"}]}], ",", "4"}], "]"}], "//", 
  "Most"}]], "Input",
 CellLabel->"In[21]:=",ExpressionUUID->"27d962e3-eaa6-43be-a306-a0de4fca27c3"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"partitionedLazyList", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", ",", 
        "9", ",", "10", ",", "11"}], "}"}], ",", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"With", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"lazyLists`Private`next$", "=", 
              RowBox[{"#1", "+", 
               RowBox[{"1", " ", "9"}]}]}], "}"}], ",", 
            RowBox[{"partitionedLazyList", "[", 
             RowBox[{
              RowBox[{"Range", "[", 
               RowBox[{"#1", ",", "lazyLists`Private`next$", ",", "1"}], 
               "]"}], ",", 
              RowBox[{"#0", "[", 
               RowBox[{"lazyLists`Private`next$", "+", "1"}], "]"}]}], 
             "]"}]}], "]"}], "&"}], ")"}], "[", 
        RowBox[{"10", "+", "1"}], "]"}], "+", "1"}]}], "]"}], ",", 
    RowBox[{"partitionedLazyList", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", ",", "9", ",", 
        "10", ",", "11", ",", "12"}], "}"}], ",", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"With", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"lazyLists`Private`next$", "=", 
              RowBox[{"#1", "+", 
               RowBox[{"1", " ", "9"}]}]}], "}"}], ",", 
            RowBox[{"partitionedLazyList", "[", 
             RowBox[{
              RowBox[{"Range", "[", 
               RowBox[{"#1", ",", "lazyLists`Private`next$", ",", "1"}], 
               "]"}], ",", 
              RowBox[{"#0", "[", 
               RowBox[{"lazyLists`Private`next$", "+", "1"}], "]"}]}], 
             "]"}]}], "]"}], "&"}], ")"}], "[", 
        RowBox[{"10", "+", "1"}], "]"}], "+", "2"}]}], "]"}], ",", 
    RowBox[{"partitionedLazyList", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "4", ",", "5", ",", "6", ",", "7", ",", "8", ",", "9", ",", "10", ",", 
        "11", ",", "12", ",", "13"}], "}"}], ",", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"With", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"lazyLists`Private`next$", "=", 
              RowBox[{"#1", "+", 
               RowBox[{"1", " ", "9"}]}]}], "}"}], ",", 
            RowBox[{"partitionedLazyList", "[", 
             RowBox[{
              RowBox[{"Range", "[", 
               RowBox[{"#1", ",", "lazyLists`Private`next$", ",", "1"}], 
               "]"}], ",", 
              RowBox[{"#0", "[", 
               RowBox[{"lazyLists`Private`next$", "+", "1"}], "]"}]}], 
             "]"}]}], "]"}], "&"}], ")"}], "[", 
        RowBox[{"10", "+", "1"}], "]"}], "+", "3"}]}], "]"}], ",", 
    RowBox[{"partitionedLazyList", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{
       "5", ",", "6", ",", "7", ",", "8", ",", "9", ",", "10", ",", "11", ",",
         "12", ",", "13", ",", "14"}], "}"}], ",", 
      RowBox[{
       RowBox[{
        RowBox[{"(", 
         RowBox[{
          RowBox[{"With", "[", 
           RowBox[{
            RowBox[{"{", 
             RowBox[{"lazyLists`Private`next$", "=", 
              RowBox[{"#1", "+", 
               RowBox[{"1", " ", "9"}]}]}], "}"}], ",", 
            RowBox[{"partitionedLazyList", "[", 
             RowBox[{
              RowBox[{"Range", "[", 
               RowBox[{"#1", ",", "lazyLists`Private`next$", ",", "1"}], 
               "]"}], ",", 
              RowBox[{"#0", "[", 
               RowBox[{"lazyLists`Private`next$", "+", "1"}], "]"}]}], 
             "]"}]}], "]"}], "&"}], ")"}], "[", 
        RowBox[{"10", "+", "1"}], "]"}], "+", "4"}]}], "]"}]}], "}"}], 
  "}"}]], "Output",
 CellLabel->"Out[21]=",ExpressionUUID->"f58428a0-1096-4102-9a46-5856c52ca2bd"]
}, Open  ]]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell["lazyList operators", \
"Subsection",ExpressionUUID->"314c8f5e-1a86-4e86-9bd1-68842761416f"],

Cell[TextData[{
 StyleBox["Map",
  FontWeight->"Bold"],
 ", ",
 StyleBox["MapIndexed",
  FontWeight->"Bold"],
 ", ",
 StyleBox["FoldList",
  FontWeight->"Bold"],
 ", ",
 StyleBox["Cases",
  FontWeight->"Bold"],
 ",",
 StyleBox[" Pick",
  FontWeight->"Bold"],
 ",",
 StyleBox[" ",
  FontWeight->"Bold"],
 "and ",
 StyleBox["Select",
  FontWeight->"Bold"],
 " work with lazyLists and return lazyLists. There is also ",
 StyleBox["lazyMapThread",
  FontWeight->"Bold"],
 ", which functions similar to MapThread. All of these functions can be \
combined together to generate more complex lazyLists."
}], "Text",ExpressionUUID->"2db4b7f0-d54f-42c4-8598-19597a08299a"],

Cell[CellGroupData[{

Cell["Map", \
"Subsubsection",ExpressionUUID->"25ea5f2b-c1e7-4656-9115-8c0a9c24f192"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Map", "[", 
  RowBox[{"Sqrt", ",", 
   RowBox[{"lazyRange", "[", 
    RowBox[{"0", ",", "2"}], "]"}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"First", "@", 
  RowBox[{"Take", "[", 
   RowBox[{"%", ",", "5"}], "]"}]}]}], "Input",
 CellLabel->
  "In[504]:=",ExpressionUUID->"db26052a-0c7d-4de0-99a3-0b0a708b07d2"],

Cell[BoxData[
 RowBox[{"lazyList", "[", 
  RowBox[{"0", ",", 
   RowBox[{"Sqrt", "/@", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"lazyList", "[", 
        RowBox[{"#1", ",", 
         RowBox[{"#0", "[", 
          RowBox[{
           RowBox[{"#2", "+", "#1"}], ",", "#2"}], "]"}]}], "]"}], "&"}], 
      ")"}], "[", 
     RowBox[{
      RowBox[{"2", "+", "0"}], ",", "2"}], "]"}]}]}], "]"}]], "Output",
 CellLabel->
  "Out[504]=",ExpressionUUID->"170ff916-0c80-4c80-a512-1f4f5c368e10"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0", ",", 
   SqrtBox["2"], ",", "2", ",", 
   SqrtBox["6"], ",", 
   RowBox[{"2", " ", 
    SqrtBox["2"]}]}], "}"}]], "Output",
 CellLabel->"Out[505]=",ExpressionUUID->"d8020dbc-6cd3-44a0-a58c-57768889db0f"]
}, Open  ]],

Cell[TextData[{
 "Use ",
 StyleBox["composeMappedFunctions",
  FontWeight->"Bold"],
 " to reduce multiple maps/generators to a single Map (or generator) of the \
composed functions:"
}], "Text",ExpressionUUID->"e52b1dec-4abe-4156-8fd4-3878659a757e"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"composeMappedFunctions", "[", 
  RowBox[{"Sqrt", "/@", 
   RowBox[{"Exp", "/@", 
    RowBox[{"Sin", "/@", 
     RowBox[{"lazyRange", "[", "]"}]}]}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"composeMappedFunctions", "[", 
  RowBox[{"Sqrt", "/@", 
   RowBox[{"Exp", "/@", 
    RowBox[{"lazyGenerator", "[", "Sin", "]"}]}]}], "]"}]}], "Input",
 CellLabel->
  "In[506]:=",ExpressionUUID->"ecb21116-e6c8-44f8-9611-594b52bd7e50"],

Cell[BoxData[
 RowBox[{"lazyList", "[", 
  RowBox[{
   SuperscriptBox["\[ExponentialE]", 
    FractionBox[
     RowBox[{"Sin", "[", "1", "]"}], "2"]], ",", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"Sqrt", "@*", "Exp", "@*", "Sin"}], ")"}], "/@", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"lazyList", "[", 
        RowBox[{"#1", ",", 
         RowBox[{"#0", "[", 
          RowBox[{
           RowBox[{"#2", "+", "#1"}], ",", "#2"}], "]"}]}], "]"}], "&"}], 
      ")"}], "[", 
     RowBox[{
      RowBox[{"1", "+", "1"}], ",", "1"}], "]"}]}]}], "]"}]], "Output",
 CellLabel->
  "Out[506]=",ExpressionUUID->"68243622-cb36-40ff-a2c4-02eb670ccfbc"],

Cell[BoxData[
 RowBox[{"lazyList", "[", 
  RowBox[{
   SuperscriptBox["\[ExponentialE]", 
    FractionBox[
     RowBox[{"Sin", "[", "1", "]"}], "2"]], ",", 
   RowBox[{"lazyLists`Private`twoSidedGenerator", "[", 
    RowBox[{
     RowBox[{"Sqrt", "@*", "Exp", "@*", "Sin"}], ",", 
     RowBox[{"1", "+", "1"}], ",", "1"}], "]"}]}], "]"}]], "Output",
 CellLabel->"Out[507]=",ExpressionUUID->"543f5d0e-994e-41de-84e8-cea615d7dbb2"]
}, Open  ]],

Cell[TextData[{
 "When you map over a partitionedLazyList, you can use the syntax ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{"Map", "[", 
     RowBox[{
      RowBox[{"{", 
       RowBox[{"fun", ",", " ", "Listable"}], "}"}], ",", " ", "list"}], "]"}],
    FontWeight->"Bold"], TraditionalForm]],ExpressionUUID->
  "567c5e58-6a26-4660-ac5c-e838b29cb95d"],
 " to signify that the function you\[CloseCurlyQuote]re using is listable and \
does not need to be mapped over the sublists but can be applied to lists \
directly:"
}], "Text",ExpressionUUID->"32067211-12a7-4aff-8a10-ce1822af3ee8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Most", "@", 
  RowBox[{"Take", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{
     RowBox[{"{", 
      RowBox[{
       RowBox[{
        RowBox[{"Sqrt", "[", 
         RowBox[{"Echo", "[", "#", "]"}], "]"}], "&"}], ",", "Listable"}], 
      "}"}], "/@", 
     RowBox[{"partitionedLazyRange", "[", "3", "]"}]}], ",", 
    "\[IndentingNewLine]", "4"}], "\[IndentingNewLine]", "]"}]}]], "Input",
 CellLabel->
  "In[508]:=",ExpressionUUID->"be3adafb-03b2-464e-ac5f-f5c6b27b4bff"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "2", ",", "3"}], 
  "}"}]], "Echo",ExpressionUUID->"283450a3-937d-46ac-a41c-8cc621e015b9"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"4", ",", "5", ",", "6"}], 
  "}"}]], "Echo",ExpressionUUID->"b6b1ab73-7873-49a3-88df-78cb0f584f8a"]
}, Open  ]],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", 
   SqrtBox["2"], ",", 
   SqrtBox["3"], ",", "2"}], "}"}]], "Output",
 CellLabel->"Out[508]=",ExpressionUUID->"3e832534-7c41-45aa-a14a-b37e75e2defb"]
}, Open  ]],

Cell["\<\
This will fail if the function is not actually Listable and does not return a \
list:\
\>", "Text",ExpressionUUID->"d76211c9-a395-4b16-8bfb-3fdd297b043f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Take", "[", 
  RowBox[{
   RowBox[{
    RowBox[{"{", 
     RowBox[{"someFunction", ",", "Listable"}], "}"}], "/@", 
    RowBox[{"partitionedLazyRange", "[", "3", "]"}]}], ",", "4"}], 
  "]"}]], "Input",
 CellLabel->
  "In[509]:=",ExpressionUUID->"0a9e9f08-9e93-4a89-bb8d-827b99eced09"],

Cell[BoxData[
 RowBox[{"lazyList", "[", "]"}]], "Output",
 CellLabel->"Out[509]=",ExpressionUUID->"bcf20fd4-7974-4422-9dca-96e818d6f7c1"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Folding", \
"Subsubsection",ExpressionUUID->"b293c8ba-17ea-40d2-9a5b-0d024f5a61e0"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"FoldList", "[", 
  RowBox[{"Plus", ",", "x0", ",", 
   RowBox[{"lazyRange", "[", 
    RowBox[{"n", ",", "m"}], "]"}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"First", "@", 
  RowBox[{"Take", "[", 
   RowBox[{"%", ",", "5"}], "]"}]}]}], "Input",
 CellLabel->
  "In[510]:=",ExpressionUUID->"88d3c946-e148-4f02-8892-b1be9959da90"],

Cell[BoxData[
 RowBox[{"lazyList", "[", 
  RowBox[{"x0", ",", 
   RowBox[{"FoldList", "[", 
    RowBox[{"Plus", ",", 
     RowBox[{"x0", "+", "n"}], ",", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"lazyList", "[", 
         RowBox[{"#1", ",", 
          RowBox[{"#0", "[", 
           RowBox[{
            RowBox[{"#2", "+", "#1"}], ",", "#2"}], "]"}]}], "]"}], "&"}], 
       ")"}], "[", 
      RowBox[{
       RowBox[{"m", "+", "n"}], ",", "m"}], "]"}]}], "]"}]}], "]"}]], "Output",
 CellLabel->
  "Out[510]=",ExpressionUUID->"820e70a0-1397-465f-9176-c5a57b5df16b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"x0", ",", 
   RowBox[{"n", "+", "x0"}], ",", 
   RowBox[{"m", "+", 
    RowBox[{"2", " ", "n"}], "+", "x0"}], ",", 
   RowBox[{
    RowBox[{"3", " ", "m"}], "+", 
    RowBox[{"3", " ", "n"}], "+", "x0"}], ",", 
   RowBox[{
    RowBox[{"6", " ", "m"}], "+", 
    RowBox[{"4", " ", "n"}], "+", "x0"}]}], "}"}]], "Output",
 CellLabel->"Out[511]=",ExpressionUUID->"31b01269-342d-426d-aa40-460a9443d870"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"FoldList", "[", 
  RowBox[{"Plus", ",", "x0", ",", 
   RowBox[{"partitionedLazyRange", "[", 
    RowBox[{"n", ",", "m", ",", "10"}], "]"}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Most", "@", 
  RowBox[{"Take", "[", 
   RowBox[{"%", ",", "5"}], "]"}]}]}], "Input",
 CellLabel->"In[58]:=",ExpressionUUID->"87e118be-0311-40ab-ab63-f60c2c7760ee"],

Cell[BoxData[
 RowBox[{"partitionedLazyList", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"x0", ",", 
     RowBox[{"n", "+", "x0"}], ",", 
     RowBox[{"m", "+", 
      RowBox[{"2", " ", "n"}], "+", "x0"}], ",", 
     RowBox[{
      RowBox[{"3", " ", "m"}], "+", 
      RowBox[{"3", " ", "n"}], "+", "x0"}], ",", 
     RowBox[{
      RowBox[{"6", " ", "m"}], "+", 
      RowBox[{"4", " ", "n"}], "+", "x0"}], ",", 
     RowBox[{
      RowBox[{"10", " ", "m"}], "+", 
      RowBox[{"5", " ", "n"}], "+", "x0"}], ",", 
     RowBox[{
      RowBox[{"15", " ", "m"}], "+", 
      RowBox[{"6", " ", "n"}], "+", "x0"}], ",", 
     RowBox[{
      RowBox[{"21", " ", "m"}], "+", 
      RowBox[{"7", " ", "n"}], "+", "x0"}], ",", 
     RowBox[{
      RowBox[{"28", " ", "m"}], "+", 
      RowBox[{"8", " ", "n"}], "+", "x0"}], ",", 
     RowBox[{
      RowBox[{"36", " ", "m"}], "+", 
      RowBox[{"9", " ", "n"}], "+", "x0"}]}], "}"}], ",", 
   RowBox[{"FoldList", "[", 
    RowBox[{"Plus", ",", 
     RowBox[{
      RowBox[{"45", " ", "m"}], "+", 
      RowBox[{"10", " ", "n"}], "+", "x0"}], ",", 
     RowBox[{"partitionedLazyList", "[", 
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{
          RowBox[{"10", " ", "m"}], "+", "n"}], ",", 
         RowBox[{
          RowBox[{"11", " ", "m"}], "+", "n"}], ",", 
         RowBox[{
          RowBox[{"12", " ", "m"}], "+", "n"}], ",", 
         RowBox[{
          RowBox[{"13", " ", "m"}], "+", "n"}], ",", 
         RowBox[{
          RowBox[{"14", " ", "m"}], "+", "n"}], ",", 
         RowBox[{
          RowBox[{"15", " ", "m"}], "+", "n"}], ",", 
         RowBox[{
          RowBox[{"16", " ", "m"}], "+", "n"}], ",", 
         RowBox[{
          RowBox[{"17", " ", "m"}], "+", "n"}], ",", 
         RowBox[{
          RowBox[{"18", " ", "m"}], "+", "n"}], ",", 
         RowBox[{
          RowBox[{"19", " ", "m"}], "+", "n"}]}], "}"}], ",", 
       RowBox[{"partitionedLazyList", "[", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"lazyList", "[", 
            RowBox[{"#1", ",", 
             RowBox[{"#0", "[", 
              RowBox[{
               RowBox[{"#2", "+", "#1"}], ",", "#2"}], "]"}]}], "]"}], "&"}], 
          ")"}], "[", 
         RowBox[{
          RowBox[{
           RowBox[{"10", " ", "m"}], "+", 
           RowBox[{"{", 
            RowBox[{
             RowBox[{
              RowBox[{"10", " ", "m"}], "+", "n"}], ",", 
             RowBox[{
              RowBox[{"11", " ", "m"}], "+", "n"}], ",", 
             RowBox[{
              RowBox[{"12", " ", "m"}], "+", "n"}], ",", 
             RowBox[{
              RowBox[{"13", " ", "m"}], "+", "n"}], ",", 
             RowBox[{
              RowBox[{"14", " ", "m"}], "+", "n"}], ",", 
             RowBox[{
              RowBox[{"15", " ", "m"}], "+", "n"}], ",", 
             RowBox[{
              RowBox[{"16", " ", "m"}], "+", "n"}], ",", 
             RowBox[{
              RowBox[{"17", " ", "m"}], "+", "n"}], ",", 
             RowBox[{
              RowBox[{"18", " ", "m"}], "+", "n"}], ",", 
             RowBox[{
              RowBox[{"19", " ", "m"}], "+", "n"}]}], "}"}]}], ",", 
          RowBox[{"10", " ", "m"}]}], "]"}], "]"}]}], "]"}]}], "]"}]}], 
  "]"}]], "Output",
 CellLabel->"Out[58]=",ExpressionUUID->"b5a0c40d-48b3-4e8f-9047-ea7f1ee2766d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"x0", ",", 
   RowBox[{"n", "+", "x0"}], ",", 
   RowBox[{"m", "+", 
    RowBox[{"2", " ", "n"}], "+", "x0"}], ",", 
   RowBox[{
    RowBox[{"3", " ", "m"}], "+", 
    RowBox[{"3", " ", "n"}], "+", "x0"}], ",", 
   RowBox[{
    RowBox[{"6", " ", "m"}], "+", 
    RowBox[{"4", " ", "n"}], "+", "x0"}]}], "}"}]], "Output",
 CellLabel->"Out[59]=",ExpressionUUID->"5643116d-7b1a-46dd-8fec-b9255d090bbe"]
}, Open  ]],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   StyleBox["FoldPairList",
    FontWeight->"Bold"], TraditionalForm]],ExpressionUUID->
  "347e3284-d20d-4515-bb8d-388313b8d2f6"],
 " has also been implemented:"
}], "Text",ExpressionUUID->"a0103168-a445-497b-849b-24cb61f70cc5"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"First", "@", 
  RowBox[{"Take", "[", 
   RowBox[{
    RowBox[{"FoldPairList", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"p", "[", 
          RowBox[{"#1", ",", "#2"}], "]"}], ",", 
         RowBox[{"q", "[", 
          RowBox[{"#1", ",", "#2"}], "]"}]}], "}"}], "&"}], ",", "u", ",", 
      RowBox[{"lazyRange", "[", "]"}]}], "]"}], ",", " ", "6"}], 
   "]"}]}]], "Input",
 CellLabel->"In[62]:=",ExpressionUUID->"2d627cff-f8a7-4a04-8c13-0bbdc00f8b6e"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"p", "[", 
    RowBox[{"u", ",", "1"}], "]"}], ",", 
   RowBox[{"p", "[", 
    RowBox[{
     RowBox[{"q", "[", 
      RowBox[{"u", ",", "1"}], "]"}], ",", "2"}], "]"}], ",", 
   RowBox[{"p", "[", 
    RowBox[{
     RowBox[{"q", "[", 
      RowBox[{
       RowBox[{"q", "[", 
        RowBox[{"u", ",", "1"}], "]"}], ",", "2"}], "]"}], ",", "3"}], "]"}], 
   ",", 
   RowBox[{"p", "[", 
    RowBox[{
     RowBox[{"q", "[", 
      RowBox[{
       RowBox[{"q", "[", 
        RowBox[{
         RowBox[{"q", "[", 
          RowBox[{"u", ",", "1"}], "]"}], ",", "2"}], "]"}], ",", "3"}], 
      "]"}], ",", "4"}], "]"}], ",", 
   RowBox[{"p", "[", 
    RowBox[{
     RowBox[{"q", "[", 
      RowBox[{
       RowBox[{"q", "[", 
        RowBox[{
         RowBox[{"q", "[", 
          RowBox[{
           RowBox[{"q", "[", 
            RowBox[{"u", ",", "1"}], "]"}], ",", "2"}], "]"}], ",", "3"}], 
        "]"}], ",", "4"}], "]"}], ",", "5"}], "]"}], ",", 
   RowBox[{"p", "[", 
    RowBox[{
     RowBox[{"q", "[", 
      RowBox[{
       RowBox[{"q", "[", 
        RowBox[{
         RowBox[{"q", "[", 
          RowBox[{
           RowBox[{"q", "[", 
            RowBox[{
             RowBox[{"q", "[", 
              RowBox[{"u", ",", "1"}], "]"}], ",", "2"}], "]"}], ",", "3"}], 
          "]"}], ",", "4"}], "]"}], ",", "5"}], "]"}], ",", "6"}], "]"}]}], 
  "}"}]], "Output",
 CellLabel->"Out[62]=",ExpressionUUID->"edfa33d8-bee0-493e-aef8-ef5869c6fca9"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Most", "@", 
  RowBox[{"Take", "[", 
   RowBox[{
    RowBox[{"FoldPairList", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{
         RowBox[{"p", "[", 
          RowBox[{"#1", ",", "#2"}], "]"}], ",", 
         RowBox[{"q", "[", 
          RowBox[{"#1", ",", "#2"}], "]"}]}], "}"}], "&"}], ",", "u", ",", 
      RowBox[{"partitionedLazyRange", "[", "3", "]"}]}], "]"}], ",", " ", 
    "6"}], "]"}]}]], "Input",
 CellLabel->"In[61]:=",ExpressionUUID->"e468b262-f576-48bb-a0e9-c32614717f97"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"p", "[", 
    RowBox[{"u", ",", "1"}], "]"}], ",", 
   RowBox[{"p", "[", 
    RowBox[{
     RowBox[{"q", "[", 
      RowBox[{"u", ",", "1"}], "]"}], ",", "2"}], "]"}], ",", 
   RowBox[{"p", "[", 
    RowBox[{
     RowBox[{"q", "[", 
      RowBox[{
       RowBox[{"q", "[", 
        RowBox[{"u", ",", "1"}], "]"}], ",", "2"}], "]"}], ",", "3"}], "]"}], 
   ",", 
   RowBox[{"p", "[", 
    RowBox[{
     RowBox[{"q", "[", 
      RowBox[{
       RowBox[{"q", "[", 
        RowBox[{
         RowBox[{"q", "[", 
          RowBox[{"u", ",", "1"}], "]"}], ",", "2"}], "]"}], ",", "3"}], 
      "]"}], ",", "4"}], "]"}], ",", 
   RowBox[{"p", "[", 
    RowBox[{
     RowBox[{"q", "[", 
      RowBox[{
       RowBox[{"q", "[", 
        RowBox[{
         RowBox[{"q", "[", 
          RowBox[{
           RowBox[{"q", "[", 
            RowBox[{"u", ",", "1"}], "]"}], ",", "2"}], "]"}], ",", "3"}], 
        "]"}], ",", "4"}], "]"}], ",", "5"}], "]"}], ",", 
   RowBox[{"p", "[", 
    RowBox[{
     RowBox[{"q", "[", 
      RowBox[{
       RowBox[{"q", "[", 
        RowBox[{
         RowBox[{"q", "[", 
          RowBox[{
           RowBox[{"q", "[", 
            RowBox[{
             RowBox[{"q", "[", 
              RowBox[{"u", ",", "1"}], "]"}], ",", "2"}], "]"}], ",", "3"}], 
          "]"}], ",", "4"}], "]"}], ",", "5"}], "]"}], ",", "6"}], "]"}]}], 
  "}"}]], "Output",
 CellLabel->"Out[61]=",ExpressionUUID->"d7488bcb-6890-47ad-8f7e-de6ab8f756e8"]
}, Open  ]],

Cell[TextData[{
 "Use ",
 Cell[BoxData[
  FormBox[
   StyleBox["TakeDrop",
    FontWeight->"Bold"], TraditionalForm]],ExpressionUUID->
  "b66ecc20-b624-4b31-93d6-6f8755600250"],
 " with FoldPairList to iteratively take parts of a lazyList:"
}], "Text",ExpressionUUID->"17b1cae2-f0b2-46a7-9a0d-dac08686a048"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FoldPairList", "[", 
  RowBox[{"TakeDrop", ",", 
   RowBox[{"lazyRange", "[", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "3", ",", "6", ",", "10"}], "}"}]}], "]"}]], "Input",
 CellLabel->"In[83]:=",ExpressionUUID->"cb1c666f-b912-49ef-9cfa-5b33b6bf3eef"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "4", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"6", ",", "7", ",", "8", ",", "9", ",", "10", ",", "11"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
    "12", ",", "13", ",", "14", ",", "15", ",", "16", ",", "17", ",", "18", 
     ",", "19", ",", "20", ",", "21"}], "}"}]}], "}"}]], "Output",
 CellLabel->"Out[83]=",ExpressionUUID->"cc25a757-2e76-4c31-83e5-0e96dc55ee98"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"FoldPairList", "[", 
  RowBox[{"TakeDrop", ",", 
   RowBox[{"partitionedLazyRange", "[", "10", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "3", ",", "6", ",", " ", "10"}], "}"}]}], 
  "]"}]], "Input",
 CellLabel->"In[84]:=",ExpressionUUID->"f76e8dcd-aa25-4f18-98f0-e763d9c13e11"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "4", ",", "5"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"6", ",", "7", ",", "8", ",", "9", ",", "10", ",", "11"}], "}"}], 
   ",", 
   RowBox[{"{", 
    RowBox[{
    "12", ",", "13", ",", "14", ",", "15", ",", "16", ",", "17", ",", "18", 
     ",", "19", ",", "20", ",", "21"}], "}"}]}], "}"}]], "Output",
 CellLabel->"Out[84]=",ExpressionUUID->"0cf989f5-03f3-417f-9fe2-bdfcb521a500"]
}, Open  ]],

Cell["Take longer and longer runs:", \
"Text",ExpressionUUID->"8b05ad98-c4a1-4a42-93f9-35c6aff15a73"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Most", "@", 
  RowBox[{"Take", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"FoldPairList", "[", 
     RowBox[{"TakeDrop", ",", 
      RowBox[{"partitionedLazyRange", "[", "10", "]"}], ",", 
      RowBox[{"partitionedLazyRange", "[", "10", "]"}]}], "]"}], ",", 
    "\[IndentingNewLine]", "10"}], "\[IndentingNewLine]", "]"}]}]], "Input",
 CellLabel->"In[94]:=",ExpressionUUID->"5b7063b6-4178-4683-804b-39d13be5561d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", "1", "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "5", ",", "6"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"7", ",", "8", ",", "9", ",", "10"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"11", ",", "12", ",", "13", ",", "14", ",", "15"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"16", ",", "17", ",", "18", ",", "19", ",", "20", ",", "21"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "22", ",", "23", ",", "24", ",", "25", ",", "26", ",", "27", ",", "28"}], 
    "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "29", ",", "30", ",", "31", ",", "32", ",", "33", ",", "34", ",", "35", 
     ",", "36"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "37", ",", "38", ",", "39", ",", "40", ",", "41", ",", "42", ",", "43", 
     ",", "44", ",", "45"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{
    "46", ",", "47", ",", "48", ",", "49", ",", "50", ",", "51", ",", "52", 
     ",", "53", ",", "54", ",", "55"}], "}"}]}], "}"}]], "Output",
 CellLabel->"Out[94]=",ExpressionUUID->"844ee04e-1f87-4433-b72f-f5c1b2cc226f"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Cases", \
"Subsubsection",ExpressionUUID->"3c7f4e74-23d1-40b0-ba20-1134f3f1a203"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Cases", "[", 
  RowBox[{
   RowBox[{"lazyRange", "[", 
    RowBox[{"0", ",", 
     RowBox[{"2", "/", "3"}]}], "]"}], ",", "_Integer"}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"First", "@", 
  RowBox[{"Take", "[", 
   RowBox[{"%", ",", "5"}], "]"}]}]}], "Input",
 CellLabel->
  "In[513]:=",ExpressionUUID->"b0b0dea7-1808-4672-a86a-d9ce4333d960"],

Cell[BoxData[
 RowBox[{"lazyList", "[", 
  RowBox[{"0", ",", 
   RowBox[{"lazyLists`Private`case$441078", "[", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"lazyList", "[", 
        RowBox[{"#1", ",", 
         RowBox[{"#0", "[", 
          RowBox[{
           RowBox[{"#2", "+", "#1"}], ",", "#2"}], "]"}]}], "]"}], "&"}], 
      ")"}], "[", 
     RowBox[{
      RowBox[{
       FractionBox["2", "3"], "+", "0"}], ",", 
      FractionBox["2", "3"]}], "]"}], "]"}]}], "]"}]], "Output",
 CellLabel->
  "Out[513]=",ExpressionUUID->"6f84bbdb-2e0f-47ef-b294-f9688a62fb46"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0", ",", "2", ",", "4", ",", "6", ",", "8"}], "}"}]], "Output",
 CellLabel->"Out[514]=",ExpressionUUID->"224c1024-2f5f-43e8-89e9-de31cb38bcf6"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Cases", "[", 
  RowBox[{
   RowBox[{"partitionedLazyRange", "[", 
    RowBox[{"0", ",", 
     RowBox[{"2", "/", "3"}], ",", "10"}], "]"}], ",", "_Integer"}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"Most", "@", 
  RowBox[{"Take", "[", 
   RowBox[{"%", ",", "20"}], "]"}]}]}], "Input",
 CellLabel->"In[54]:=",ExpressionUUID->"eab9bf3f-c3ca-4ba1-a457-b279acd2d15e"],

Cell[BoxData[
 RowBox[{"partitionedLazyList", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0", ",", "2", ",", "4", ",", "6"}], "}"}], ",", 
   RowBox[{"Cases", "[", 
    RowBox[{
     RowBox[{"partitionedLazyList", "[", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"lazyList", "[", 
          RowBox[{"#1", ",", 
           RowBox[{"#0", "[", 
            RowBox[{
             RowBox[{"#2", "+", "#1"}], ",", "#2"}], "]"}]}], "]"}], "&"}], 
        ")"}], "[", 
       RowBox[{
        RowBox[{
         FractionBox["20", "3"], "+", 
         RowBox[{"{", 
          RowBox[{"0", ",", 
           FractionBox["2", "3"], ",", 
           FractionBox["4", "3"], ",", "2", ",", 
           FractionBox["8", "3"], ",", 
           FractionBox["10", "3"], ",", "4", ",", 
           FractionBox["14", "3"], ",", 
           FractionBox["16", "3"], ",", "6"}], "}"}]}], ",", 
        FractionBox["20", "3"]}], "]"}], "]"}], ",", "_Integer"}], "]"}]}], 
  "]"}]], "Output",
 CellLabel->"Out[54]=",ExpressionUUID->"335b43c0-116e-4a21-9835-d4cb3c73eb03"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0", ",", "2", ",", "4", ",", "6", ",", "8", ",", "10", ",", "12", ",", 
   "14", ",", "16", ",", "18", ",", "20", ",", "22", ",", "24", ",", "26", 
   ",", "28", ",", "30", ",", "32", ",", "34", ",", "36", ",", "38"}], 
  "}"}]], "Output",
 CellLabel->"Out[55]=",ExpressionUUID->"c30cd8d7-7ec9-4188-b351-2d9bb7f14cd3"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Pick", \
"Subsubsection",ExpressionUUID->"f3a06a45-4dfb-4c77-a330-74be0c8e9361"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Pick", "[", 
  RowBox[{
   RowBox[{"lazyRange", "[", 
    RowBox[{"0", ",", "2"}], "]"}], ",", 
   RowBox[{"lazyRange", "[", 
    RowBox[{"0", ",", 
     RowBox[{"2", "/", "3"}]}], "]"}], ",", "_Integer"}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"First", "@", 
  RowBox[{"Take", "[", 
   RowBox[{"%", ",", "5"}], "]"}]}]}], "Input",
 CellLabel->
  "In[515]:=",ExpressionUUID->"02767e8a-5bbd-4578-a783-6b1ca449f3b0"],

Cell[BoxData[
 RowBox[{"lazyList", "[", 
  RowBox[{"0", ",", 
   RowBox[{"lazyLists`Private`pick$441079", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"lazyList", "[", 
         RowBox[{"#1", ",", 
          RowBox[{"#0", "[", 
           RowBox[{
            RowBox[{"#2", "+", "#1"}], ",", "#2"}], "]"}]}], "]"}], "&"}], 
       ")"}], "[", 
      RowBox[{
       RowBox[{"2", "+", "0"}], ",", "2"}], "]"}], ",", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"lazyList", "[", 
         RowBox[{"#1", ",", 
          RowBox[{"#0", "[", 
           RowBox[{
            RowBox[{"#2", "+", "#1"}], ",", "#2"}], "]"}]}], "]"}], "&"}], 
       ")"}], "[", 
      RowBox[{
       RowBox[{
        FractionBox["2", "3"], "+", "0"}], ",", 
       FractionBox["2", "3"]}], "]"}]}], "]"}]}], "]"}]], "Output",
 CellLabel->
  "Out[515]=",ExpressionUUID->"d03e50c0-0d64-463c-93c8-6749092f49ba"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0", ",", "6", ",", "12", ",", "18", ",", "24"}], "}"}]], "Output",
 CellLabel->"Out[516]=",ExpressionUUID->"38b99f0c-571d-4300-b30b-1e7944f03d47"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Pick", "[", 
  RowBox[{
   RowBox[{"partitionedLazyRange", "[", 
    RowBox[{"0", ",", "2", ",", "10"}], "]"}], ",", 
   RowBox[{"partitionedLazyRange", "[", 
    RowBox[{"0", ",", 
     RowBox[{"2", "/", "3"}], ",", "10"}], "]"}], ",", "_Integer"}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"Most", "@", 
  RowBox[{"Take", "[", 
   RowBox[{"%", ",", "20"}], "]"}]}]}], "Input",
 CellLabel->"In[48]:=",ExpressionUUID->"865be7ad-b11a-425e-ae4b-641ea63be02f"],

Cell[BoxData[
 RowBox[{"partitionedLazyList", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"0", ",", "6", ",", "12", ",", "18"}], "}"}], ",", 
   RowBox[{"Pick", "[", 
    RowBox[{
     RowBox[{"partitionedLazyList", "[", 
      RowBox[{
       RowBox[{"{", "}"}], ",", 
       RowBox[{"partitionedLazyList", "[", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"lazyList", "[", 
            RowBox[{"#1", ",", 
             RowBox[{"#0", "[", 
              RowBox[{
               RowBox[{"#2", "+", "#1"}], ",", "#2"}], "]"}]}], "]"}], "&"}], 
          ")"}], "[", 
         RowBox[{
          RowBox[{"20", "+", 
           RowBox[{"{", 
            RowBox[{
            "0", ",", "2", ",", "4", ",", "6", ",", "8", ",", "10", ",", "12",
              ",", "14", ",", "16", ",", "18"}], "}"}]}], ",", "20"}], "]"}], 
        "]"}]}], "]"}], ",", 
     RowBox[{"partitionedLazyList", "[", 
      RowBox[{
       RowBox[{"{", "}"}], ",", 
       RowBox[{"partitionedLazyList", "[", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"lazyList", "[", 
            RowBox[{"#1", ",", 
             RowBox[{"#0", "[", 
              RowBox[{
               RowBox[{"#2", "+", "#1"}], ",", "#2"}], "]"}]}], "]"}], "&"}], 
          ")"}], "[", 
         RowBox[{
          RowBox[{
           FractionBox["20", "3"], "+", 
           RowBox[{"{", 
            RowBox[{"0", ",", 
             FractionBox["2", "3"], ",", 
             FractionBox["4", "3"], ",", "2", ",", 
             FractionBox["8", "3"], ",", 
             FractionBox["10", "3"], ",", "4", ",", 
             FractionBox["14", "3"], ",", 
             FractionBox["16", "3"], ",", "6"}], "}"}]}], ",", 
          FractionBox["20", "3"]}], "]"}], "]"}]}], "]"}], ",", "_Integer"}], 
    "]"}]}], "]"}]], "Output",
 CellLabel->"Out[48]=",ExpressionUUID->"3f93cdcb-c5b8-450d-9dc8-03b9f54bc38d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "0", ",", "6", ",", "12", ",", "18", ",", "24", ",", "30", ",", "36", ",", 
   "42", ",", "48", ",", "54", ",", "60", ",", "66", ",", "72", ",", "78", 
   ",", "84", ",", "90", ",", "96", ",", "102", ",", "108", ",", "114"}], 
  "}"}]], "Output",
 CellLabel->"Out[49]=",ExpressionUUID->"b7b3b714-99d2-4190-a835-68aec25e1d22"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["Select", \
"Subsubsection",ExpressionUUID->"67410976-9bef-4063-994a-da7ffc8607aa"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Select", "[", 
  RowBox[{
   RowBox[{"lazyRange", "[", "]"}], ",", "OddQ"}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"First", "@", 
  RowBox[{"Take", "[", 
   RowBox[{"%", ",", "5"}], "]"}]}]}], "Input",
 CellLabel->
  "In[517]:=",ExpressionUUID->"f7cc65d1-b623-4858-860e-fb8bda6906cf"],

Cell[BoxData[
 RowBox[{"lazyList", "[", 
  RowBox[{"1", ",", 
   RowBox[{"Select", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"lazyList", "[", 
         RowBox[{"#1", ",", 
          RowBox[{"#0", "[", 
           RowBox[{
            RowBox[{"#2", "+", "#1"}], ",", "#2"}], "]"}]}], "]"}], "&"}], 
       ")"}], "[", 
      RowBox[{
       RowBox[{"1", "+", "1"}], ",", "1"}], "]"}], ",", "OddQ"}], "]"}]}], 
  "]"}]], "Output",
 CellLabel->
  "Out[517]=",ExpressionUUID->"cfce572e-12f3-4503-82b0-556d40016967"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "3", ",", "5", ",", "7", ",", "9"}], "}"}]], "Output",
 CellLabel->"Out[518]=",ExpressionUUID->"e4e9c256-c915-4f13-bcae-4c21d82e546f"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Select", "[", 
  RowBox[{
   RowBox[{"partitionedLazyRange", "[", "10", "]"}], ",", "OddQ"}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"Most", "@", 
  RowBox[{"Take", "[", 
   RowBox[{"%", ",", "25"}], "]"}]}]}], "Input",
 CellLabel->"In[44]:=",ExpressionUUID->"5c96e225-e217-43dd-9460-875d3475e33d"],

Cell[BoxData[
 RowBox[{"partitionedLazyList", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "3", ",", "5", ",", "7", ",", "9"}], "}"}], ",", 
   RowBox[{"Select", "[", 
    RowBox[{
     RowBox[{"partitionedLazyList", "[", 
      RowBox[{
       RowBox[{"(", 
        RowBox[{
         RowBox[{"lazyList", "[", 
          RowBox[{"#1", ",", 
           RowBox[{"#0", "[", 
            RowBox[{
             RowBox[{"#2", "+", "#1"}], ",", "#2"}], "]"}]}], "]"}], "&"}], 
        ")"}], "[", 
       RowBox[{
        RowBox[{"10", "+", 
         RowBox[{"{", 
          RowBox[{
          "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", 
           ",", "8", ",", "9", ",", "10"}], "}"}]}], ",", "10"}], "]"}], 
      "]"}], ",", "OddQ"}], "]"}]}], "]"}]], "Output",
 CellLabel->"Out[44]=",ExpressionUUID->"83d23fee-ccbd-478f-b161-e2021528ca9b"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "3", ",", "5", ",", "7", ",", "9", ",", "11", ",", "13", ",", 
   "15", ",", "17", ",", "19", ",", "21", ",", "23", ",", "25", ",", "27", 
   ",", "29", ",", "31", ",", "33", ",", "35", ",", "37", ",", "39", ",", 
   "41", ",", "43", ",", "45", ",", "47", ",", "49"}], "}"}]], "Output",
 CellLabel->"Out[45]=",ExpressionUUID->"d1085942-6d1f-4779-ac9c-a381aea72538"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["MapIndexed", \
"Subsubsection",ExpressionUUID->"165f8426-7fdc-4dd2-879f-7c449ccd6ae4"],

Cell[TextData[{
 StyleBox["MapIndexed",
  FontWeight->"Bold"],
 " allows you to map a function of 2 arguments over a lazyList. The 2nd \
argument is an integer that keeps track of the position in the list. Note \
that this is slightly different from the way MapIndexed works normally, which \
supplies a list containing the index to the second argument. "
}], "Text",ExpressionUUID->"46c8a02f-7fcf-4bfc-ab29-1b9988a542db"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"First", "@", 
  RowBox[{"Take", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"MapIndexed", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{"#1", ",", "#2"}], "}"}], "&"}], ",", 
      RowBox[{"lazyRange", "[", 
       RowBox[{"2", ",", "2"}], "]"}]}], "]"}], ",", "\[IndentingNewLine]", 
    "5"}], "\[IndentingNewLine]", "]"}]}]], "Input",
 CellLabel->
  "In[519]:=",ExpressionUUID->"ab76f983-28b6-43cf-9633-09f130a5a988"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"2", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"6", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"8", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10", ",", "5"}], "}"}]}], "}"}]], "Output",
 CellLabel->"Out[519]=",ExpressionUUID->"bbfe659a-d26f-49c8-8498-bfe8ba00d967"]
}, Open  ]],

Cell["\<\
MapIndexed has a third argument to specify the starting position. This is \
useful when passing a lazyList which has already been partially evaluated.\
\>", "Text",ExpressionUUID->"a1d52835-fdc6-4c94-8c49-8996fd82e507"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"First", "@", 
  RowBox[{"Take", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"MapIndexed", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{"#1", ",", "#2"}], "}"}], "&"}], ",", 
      RowBox[{"lazyRange", "[", "]"}], ",", "20"}], "]"}], ",", 
    "\[IndentingNewLine]", "5"}], "\[IndentingNewLine]", "]"}]}]], "Input",
 CellLabel->
  "In[520]:=",ExpressionUUID->"fc210aed-ccdd-4241-b891-65b6433f88ed"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "20"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "21"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "22"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "23"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "24"}], "}"}]}], "}"}]], "Output",
 CellLabel->"Out[520]=",ExpressionUUID->"4d42eb26-33a9-4132-b536-66d242bdb161"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["lazyMapThread", \
"Subsubsection",ExpressionUUID->"6527aab7-0b41-4f41-8386-669ecaa71c8b"],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   StyleBox["lazyMapThread",
    FontWeight->"Bold"], TraditionalForm]],ExpressionUUID->
  "d6b35845-946e-4b5c-aaa1-be5d411e7567"],
 " is functionally similar to MapThread:"
}], "Text",ExpressionUUID->"edc0cb50-690c-4cee-b084-17a3472acd11"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"First", "@", 
  RowBox[{"Take", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"lazyMapThread", "[", 
     RowBox[{"f", ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"lazyRange", "[", "]"}], ",", 
        RowBox[{"lazyRange", "[", 
         RowBox[{"2", ",", "2"}], "]"}]}], "}"}]}], "]"}], ",", 
    "\[IndentingNewLine]", "5"}], "\[IndentingNewLine]", "]"}]}]], "Input",
 CellLabel->"In[22]:=",ExpressionUUID->"2f643a7b-e0c1-44f8-bfc1-340a161a0d8a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"f", "[", 
    RowBox[{"1", ",", "2"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"2", ",", "4"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"3", ",", "6"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"4", ",", "8"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"5", ",", "10"}], "]"}]}], "}"}]], "Output",
 CellLabel->"Out[22]=",ExpressionUUID->"0c94396f-41d3-414a-8e89-c3952dcccfec"]
}, Open  ]],

Cell["Compare with regular MapThread:", \
"Text",ExpressionUUID->"c06c056b-c716-4d08-82f9-cdd01019726f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MapThread", "[", 
  RowBox[{"f", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Range", "[", "5", "]"}], ",", 
     RowBox[{"2", 
      RowBox[{"Range", "[", "5", "]"}]}]}], "}"}]}], "]"}]], "Input",
 CellLabel->"In[5]:=",ExpressionUUID->"3bbfeee5-cbb7-4e4d-8186-0d37f0b22777"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"f", "[", 
    RowBox[{"1", ",", "2"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"2", ",", "4"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"3", ",", "6"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"4", ",", "8"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"5", ",", "10"}], "]"}]}], "}"}]], "Output",
 CellLabel->"Out[5]=",ExpressionUUID->"43066e40-e63f-49a6-a7f8-0b9525cbb29c"]
}, Open  ]],

Cell["Normal lists are cast into lazyLists:", \
"Text",ExpressionUUID->"acc9e6ba-d672-4771-add0-558a0a3cdef0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"First", "@", 
  RowBox[{"Take", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"lazyMapThread", "[", 
     RowBox[{"f", ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"lazyRange", "[", "]"}], ",", 
        RowBox[{"Range", "[", "5", "]"}]}], "}"}]}], "]"}], ",", 
    "\[IndentingNewLine]", "All"}], "\[IndentingNewLine]", "]"}]}]], "Input",
 CellLabel->"In[6]:=",ExpressionUUID->"455fa1d3-c1b1-4389-a06c-4ccf905f7260"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"f", "[", 
    RowBox[{"1", ",", "1"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"2", ",", "2"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"3", ",", "3"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"4", ",", "4"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"5", ",", "5"}], "]"}]}], "}"}]], "Output",
 CellLabel->"Out[6]=",ExpressionUUID->"24eaa9b2-d3fe-44a1-a3d2-335aa3c776ad"]
}, Open  ]],

Cell["Held lists can be used as well:", \
"Text",ExpressionUUID->"49c4a320-211b-473d-9c0d-e6aa3e01fb5c"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"lst", "=", 
   RowBox[{"Log", "[", 
    RowBox[{"Range", "[", "10", "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"First", "@", 
  RowBox[{"Take", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"lazyMapThread", "[", 
     RowBox[{"f", ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"lazyRange", "[", "]"}], ",", 
        RowBox[{"Hold", "[", "lst", "]"}]}], "}"}]}], "]"}], ",", 
    "\[IndentingNewLine]", "All"}], "\[IndentingNewLine]", "]"}]}]}], "Input",
 CellLabel->"In[31]:=",ExpressionUUID->"10cf7768-7213-482c-a1ab-bda4df19813d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"f", "[", 
    RowBox[{"1", ",", "0"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"2", ",", 
     RowBox[{"Log", "[", "2", "]"}]}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"3", ",", 
     RowBox[{"Log", "[", "3", "]"}]}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"4", ",", 
     RowBox[{"Log", "[", "4", "]"}]}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"5", ",", 
     RowBox[{"Log", "[", "5", "]"}]}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"6", ",", 
     RowBox[{"Log", "[", "6", "]"}]}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"7", ",", 
     RowBox[{"Log", "[", "7", "]"}]}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"8", ",", 
     RowBox[{"Log", "[", "8", "]"}]}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"9", ",", 
     RowBox[{"Log", "[", "9", "]"}]}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"10", ",", 
     RowBox[{"Log", "[", "10", "]"}]}], "]"}]}], "}"}]], "Output",
 CellLabel->"Out[32]=",ExpressionUUID->"ddb5298b-0c3b-4804-b723-920fcdbdf969"]
}, Open  ]],

Cell["\<\
lazyMapThread with partitionedLazyLists works like normal MapThread. All \
lists will be converted to partitionedLazyLists, of the same partition \
lengths (note that the shorter partitions will be expanded to match the \
length of the longest one):\
\>", "Text",ExpressionUUID->"f47cc524-5926-462a-bed0-b3523e673c00"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"lst", "=", 
   RowBox[{"Log", "[", 
    RowBox[{"Range", "[", "10", "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"Most", "@", 
  RowBox[{"Take", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"lazyMapThread", "[", "\[IndentingNewLine]", 
     RowBox[{"f", ",", "\[IndentingNewLine]", " ", 
      RowBox[{"{", "\[IndentingNewLine]", 
       RowBox[{
        RowBox[{"partitionedLazyList", "[", 
         RowBox[{"Range", "/@", 
          RowBox[{"lazyRange", "[", "]"}]}], "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"partitionedLazyRange", "[", "4", "]"}], ",", 
        "\[IndentingNewLine]", 
        RowBox[{"partitionedLazyRange", "[", 
         RowBox[{"2", ",", "2", ",", "6"}], "]"}], ",", "\[IndentingNewLine]", 
        RowBox[{"lazyRange", "[", "]"}], ",", "\[IndentingNewLine]", "lst", 
        ",", "\[IndentingNewLine]", 
        RowBox[{"Hold", "[", "lst", "]"}]}], "\[IndentingNewLine]", "}"}]}], 
     "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", "10"}], 
   "\[IndentingNewLine]", "]"}]}]}], "Input",
 CellLabel->"In[38]:=",ExpressionUUID->"446ba979-f8d1-48cf-bba1-979672805b53"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"f", "[", 
    RowBox[{"1", ",", "1", ",", "2", ",", "1", ",", "0", ",", "0"}], "]"}], 
   ",", 
   RowBox[{"f", "[", 
    RowBox[{"1", ",", "2", ",", "4", ",", "2", ",", 
     RowBox[{"Log", "[", "2", "]"}], ",", 
     RowBox[{"Log", "[", "2", "]"}]}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"2", ",", "3", ",", "6", ",", "3", ",", 
     RowBox[{"Log", "[", "3", "]"}], ",", 
     RowBox[{"Log", "[", "3", "]"}]}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"1", ",", "4", ",", "8", ",", "4", ",", 
     RowBox[{"Log", "[", "4", "]"}], ",", 
     RowBox[{"Log", "[", "4", "]"}]}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"2", ",", "5", ",", "10", ",", "5", ",", 
     RowBox[{"Log", "[", "5", "]"}], ",", 
     RowBox[{"Log", "[", "5", "]"}]}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"3", ",", "6", ",", "12", ",", "6", ",", 
     RowBox[{"Log", "[", "6", "]"}], ",", 
     RowBox[{"Log", "[", "6", "]"}]}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"1", ",", "7", ",", "14", ",", "7", ",", 
     RowBox[{"Log", "[", "7", "]"}], ",", 
     RowBox[{"Log", "[", "7", "]"}]}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"2", ",", "8", ",", "16", ",", "8", ",", 
     RowBox[{"Log", "[", "8", "]"}], ",", 
     RowBox[{"Log", "[", "8", "]"}]}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"3", ",", "9", ",", "18", ",", "9", ",", 
     RowBox[{"Log", "[", "9", "]"}], ",", 
     RowBox[{"Log", "[", "9", "]"}]}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"4", ",", "10", ",", "20", ",", "10", ",", 
     RowBox[{"Log", "[", "10", "]"}], ",", 
     RowBox[{"Log", "[", "10", "]"}]}], "]"}]}], "}"}]], "Output",
 CellLabel->"Out[39]=",ExpressionUUID->"89bf9865-f6c1-4f0e-ab0d-bf81564d2277"]
}, Open  ]],

Cell["\<\
If normal lazyLists are mixed with partitionedLazyLists, the lazyLists are \
converted to with lazyPartition:\
\>", "Text",ExpressionUUID->"a285bfa3-c79e-467b-9394-0365ca44fba2"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"lazyMapThread", "[", 
  RowBox[{"f", ",", " ", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"partitionedLazyRange", "[", "3", "]"}], ",", 
     RowBox[{"lazyRange", "[", "]"}]}], "}"}]}], "]"}]], "Input",
 CellLabel->"In[28]:=",ExpressionUUID->"1384792d-be85-4112-b897-96a98ce846a6"],

Cell[BoxData[
 RowBox[{"partitionedLazyList", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"f", "[", 
      RowBox[{"1", ",", "1"}], "]"}], ",", 
     RowBox[{"f", "[", 
      RowBox[{"2", ",", "2"}], "]"}], ",", 
     RowBox[{"f", "[", 
      RowBox[{"3", ",", "3"}], "]"}]}], "}"}], ",", 
   RowBox[{"lazyMapThread", "[", 
    RowBox[{"f", ",", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"partitionedLazyList", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"4", ",", "5", ",", "6"}], "}"}], ",", 
         RowBox[{"partitionedLazyList", "[", 
          RowBox[{
           RowBox[{"(", 
            RowBox[{
             RowBox[{"lazyList", "[", 
              RowBox[{"#1", ",", 
               RowBox[{"#0", "[", 
                RowBox[{
                 RowBox[{"#2", "+", "#1"}], ",", "#2"}], "]"}]}], "]"}], 
             "&"}], ")"}], "[", 
           RowBox[{
            RowBox[{"3", "+", 
             RowBox[{"{", 
              RowBox[{"4", ",", "5", ",", "6"}], "}"}]}], ",", "3"}], "]"}], 
          "]"}]}], "]"}], ",", 
       RowBox[{"partitionedLazyList", "[", 
        RowBox[{
         RowBox[{"{", 
          RowBox[{"4", ",", "5", ",", "6"}], "}"}], ",", 
         RowBox[{"lazyPartition", "[", 
          RowBox[{
           RowBox[{
            RowBox[{"(", 
             RowBox[{
              RowBox[{"lazyList", "[", 
               RowBox[{"#1", ",", 
                RowBox[{"#0", "[", 
                 RowBox[{
                  RowBox[{"#2", "+", "#1"}], ",", "#2"}], "]"}]}], "]"}], 
              "&"}], ")"}], "[", 
            RowBox[{
             RowBox[{"1", "+", "6"}], ",", "1"}], "]"}], ",", "3"}], "]"}]}], 
        "]"}]}], "}"}]}], "]"}]}], "]"}]], "Output",
 CellLabel->"Out[28]=",ExpressionUUID->"45501061-a19e-4459-94ea-986ced5638d3"]
}, Open  ]],

Cell[TextData[{
 "Note that ",
 Cell[BoxData[
  FormBox[
   StyleBox["lazyTranspose",
    FontWeight->"Bold"], TraditionalForm]],ExpressionUUID->
  "0d0e6eef-f773-439a-b28b-6e62f2d9219a"],
 " is essentially ",
 Cell[BoxData[
  FormBox[
   StyleBox[
    RowBox[{
     RowBox[{"lazyMapThread", "[", 
      RowBox[{"List", ",", " ", "..."}], "]"}], " "}],
    FontWeight->"Bold"], TraditionalForm]],ExpressionUUID->
  "dce155cb-519c-4e39-b3c5-3fa4b0ca1fb6"],
 ":"
}], "Text",ExpressionUUID->"2529bce4-fac5-4af3-b60a-f2953a6e1f51"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Take", "[", 
   RowBox[{
    RowBox[{"lazyTranspose", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"lazyRange", "[", "]"}], ",", 
       RowBox[{"lazyRange", "[", "start", "]"}]}], "}"}], "]"}], ",", "5"}], 
   "]"}], "//", "First"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"Take", "[", 
   RowBox[{
    RowBox[{"lazyMapThread", "[", 
     RowBox[{"Identity", ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"lazyRange", "[", "]"}], ",", 
        RowBox[{"lazyRange", "[", "start", "]"}]}], "}"}]}], "]"}], ",", 
    "5"}], "]"}], "//", "First"}]}], "Input",
 CellLabel->
  "In[526]:=",ExpressionUUID->"f4547300-99a7-4775-bf0d-f0f64f5bee03"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "start"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", 
     RowBox[{"1", "+", "start"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", 
     RowBox[{"2", "+", "start"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", 
     RowBox[{"3", "+", "start"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", 
     RowBox[{"4", "+", "start"}]}], "}"}]}], "}"}]], "Output",
 CellLabel->
  "Out[526]=",ExpressionUUID->"1febd08b-d455-4c48-a273-c1e021da1c26"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "start"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", 
     RowBox[{"1", "+", "start"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", 
     RowBox[{"2", "+", "start"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", 
     RowBox[{"3", "+", "start"}]}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", 
     RowBox[{"4", "+", "start"}]}], "}"}]}], "}"}]], "Output",
 CellLabel->"Out[527]=",ExpressionUUID->"a267ede6-0409-4cf7-8dbd-89fe4f3cba30"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["lazyCatenate", \
"Subsubsection",ExpressionUUID->"15c98d8f-4fa4-44bb-92d2-870aaeeb5c77"],

Cell[TextData[{
 StyleBox["lazyCatenate",
  FontWeight->"Bold"],
 " flattens one layer of list and returns a lazyList. It flattens normal \
lists and lazyLists or a combination of the two."
}], "Text",ExpressionUUID->"de458fb0-39f6-4576-9462-640072f2004d"],

Cell["List of lists:", \
"Text",ExpressionUUID->"0a52c93f-0a2b-4168-9bff-f00120e1eaa6"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"lazyCatenate", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "2"}], "}"}], ",", 
    RowBox[{"{", 
     RowBox[{"2", ",", "3", ",", "4"}], "}"}]}], "}"}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"First", "@", 
  RowBox[{"Take", "[", 
   RowBox[{"%", ",", "All"}], "]"}]}]}], "Input",
 CellLabel->
  "In[528]:=",ExpressionUUID->"9105bad9-cd46-425e-af41-4aa8407d5ea4"],

Cell[BoxData[
 RowBox[{"lazyList", "[", 
  RowBox[{"1", ",", 
   RowBox[{"lazyList", "[", 
    RowBox[{"{", 
     RowBox[{"2", ",", "2", ",", "3", ",", "4"}], "}"}], "]"}]}], 
  "]"}]], "Output",
 CellLabel->
  "Out[528]=",ExpressionUUID->"87afd472-8af9-4892-be82-b3f6b420c7e9"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "2", ",", "2", ",", "3", ",", "4"}], "}"}]], "Output",
 CellLabel->"Out[529]=",ExpressionUUID->"605a7841-5bf4-4ff1-9e4f-51dc134e3ed0"]
}, Open  ]],

Cell["List of lazyLists:", \
"Text",ExpressionUUID->"af81ce7a-88ba-4d66-b048-3e975300c89b"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"First", " ", "@", " ", 
  RowBox[{"Take", "[", 
   RowBox[{
    RowBox[{"lazyCatenate", "@", 
     RowBox[{"{", "\[IndentingNewLine]", 
      RowBox[{
       RowBox[{"lazyGenerator", "[", 
        RowBox[{"f", ",", "1", ",", "1", ",", "5"}], "]"}], ",", 
       "\[IndentingNewLine]", 
       RowBox[{"lazyGenerator", "[", 
        RowBox[{"g", ",", "1", ",", "1", ",", "5"}], "]"}]}], 
      "\[IndentingNewLine]", "}"}]}], ",", "\[IndentingNewLine]", "All"}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 CellLabel->
  "In[530]:=",ExpressionUUID->"11a1ab93-76ad-4f4a-a663-e7c39f728213"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"f", "[", "1", "]"}], ",", 
   RowBox[{"f", "[", "2", "]"}], ",", 
   RowBox[{"f", "[", "3", "]"}], ",", 
   RowBox[{"f", "[", "4", "]"}], ",", 
   RowBox[{"f", "[", "5", "]"}], ",", 
   RowBox[{"g", "[", "1", "]"}], ",", 
   RowBox[{"g", "[", "2", "]"}], ",", 
   RowBox[{"g", "[", "3", "]"}], ",", 
   RowBox[{"g", "[", "4", "]"}], ",", 
   RowBox[{"g", "[", "5", "]"}]}], "}"}]], "Output",
 CellLabel->"Out[530]=",ExpressionUUID->"b4090c00-9010-449e-8453-99daedb13849"]
}, Open  ]],

Cell["Held lists can be used and can be mixed with lazyLists:", \
"Text",ExpressionUUID->"bfc3bb34-3958-4157-8d84-f0164f619ed0"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"lst", "=", 
   RowBox[{"Log", "@", 
    RowBox[{"Range", "[", "5", "]"}]}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"lazyCatenate", "[", 
  RowBox[{"{", 
   RowBox[{
    RowBox[{"{", 
     RowBox[{"1", ",", "2"}], "}"}], ",", 
    RowBox[{"Hold", "[", "lst", "]"}], ",", 
    RowBox[{"lazyRange", "[", "]"}]}], "}"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"First", "@", 
  RowBox[{"Take", "[", 
   RowBox[{"%", ",", "20"}], "]"}]}]}], "Input",
 CellLabel->"In[26]:=",ExpressionUUID->"79d2b676-1192-4a33-b25b-1333beb02481"],

Cell[BoxData[
 RowBox[{"lazyList", "[", 
  RowBox[{"1", ",", 
   RowBox[{"lazyCatenate", "[", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"lazyList", "[", 
       RowBox[{"{", "2", "}"}], "]"}], ",", 
      RowBox[{"lazyList", "[", 
       RowBox[{"0", ",", 
        RowBox[{"lazyLists`Private`lazyFiniteList", "[", 
         RowBox[{"lst", ",", 
          RowBox[{"1", "+", "1"}]}], "]"}]}], "]"}], ",", 
      RowBox[{"lazyList", "[", 
       RowBox[{"1", ",", 
        RowBox[{
         RowBox[{"(", 
          RowBox[{
           RowBox[{"lazyList", "[", 
            RowBox[{"#1", ",", 
             RowBox[{"#0", "[", 
              RowBox[{
               RowBox[{"#2", "+", "#1"}], ",", "#2"}], "]"}]}], "]"}], "&"}], 
          ")"}], "[", 
         RowBox[{
          RowBox[{"1", "+", "1"}], ",", "1"}], "]"}]}], "]"}]}], "}"}], 
    "]"}]}], "]"}]], "Output",
 CellLabel->"Out[27]=",ExpressionUUID->"e7d97675-57f0-401d-8065-5240a81ee83d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "2", ",", "0", ",", 
   RowBox[{"Log", "[", "2", "]"}], ",", 
   RowBox[{"Log", "[", "3", "]"}], ",", 
   RowBox[{"Log", "[", "4", "]"}], ",", 
   RowBox[{"Log", "[", "5", "]"}], ",", "1", ",", "2", ",", "3", ",", "4", 
   ",", "5", ",", "6", ",", "7", ",", "8", ",", "9", ",", "10", ",", "11", 
   ",", "12", ",", "13"}], "}"}]], "Output",
 CellLabel->"Out[28]=",ExpressionUUID->"38943568-49ec-4806-8ef6-4847e3d644ff"]
}, Open  ]],

Cell["lazyList of lists:", \
"Text",ExpressionUUID->"bbb77a42-f148-444e-bc2e-4a413a9de2a1"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"First", "@", 
  RowBox[{"Take", "[", 
   RowBox[{
    RowBox[{"lazyCatenate", "@", 
     RowBox[{"lazyGenerator", "[", 
      RowBox[{"Range", ",", "1", ",", "1", ",", "5"}], "]"}]}], ",", "All"}], 
   "]"}]}]], "Input",
 CellLabel->
  "In[531]:=",ExpressionUUID->"a45957dd-a3b6-4f04-92ea-2898edac89a4"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "1", ",", "2", ",", "1", ",", "2", ",", "3", ",", "1", ",", "2", 
   ",", "3", ",", "4", ",", "1", ",", "2", ",", "3", ",", "4", ",", "5"}], 
  "}"}]], "Output",
 CellLabel->"Out[531]=",ExpressionUUID->"8fb2543c-e316-426e-b770-c15021077569"]
}, Open  ]],

Cell["lazyList of lazyLists:", \
"Text",ExpressionUUID->"947adea4-d5e0-46ca-88b9-4c4947b51d46"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"First", "@", 
  RowBox[{"Take", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"lazyCatenate", "@", 
     RowBox[{"lazyGenerator", "[", 
      RowBox[{
       RowBox[{
        RowBox[{"lazyGenerator", "[", 
         RowBox[{
          SubscriptBox["f", "#"], ",", "#", ",", "#", ",", 
          RowBox[{"#", "+", "3"}]}], "]"}], "&"}], ",", "1", ",", "1", ",", 
       "5"}], "]"}]}], ",", "\[IndentingNewLine]", "All"}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 CellLabel->
  "In[532]:=",ExpressionUUID->"46fa24bb-403e-4fed-abfc-a7712c99c106"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{
    SubscriptBox["f", "1"], "[", "1", "]"}], ",", 
   RowBox[{
    SubscriptBox["f", "1"], "[", "2", "]"}], ",", 
   RowBox[{
    SubscriptBox["f", "1"], "[", "3", "]"}], ",", 
   RowBox[{
    SubscriptBox["f", "1"], "[", "4", "]"}], ",", 
   RowBox[{
    SubscriptBox["f", "2"], "[", "2", "]"}], ",", 
   RowBox[{
    SubscriptBox["f", "2"], "[", "3", "]"}], ",", 
   RowBox[{
    SubscriptBox["f", "2"], "[", "4", "]"}], ",", 
   RowBox[{
    SubscriptBox["f", "2"], "[", "5", "]"}], ",", 
   RowBox[{
    SubscriptBox["f", "3"], "[", "3", "]"}], ",", 
   RowBox[{
    SubscriptBox["f", "3"], "[", "4", "]"}], ",", 
   RowBox[{
    SubscriptBox["f", "3"], "[", "5", "]"}], ",", 
   RowBox[{
    SubscriptBox["f", "3"], "[", "6", "]"}], ",", 
   RowBox[{
    SubscriptBox["f", "4"], "[", "4", "]"}], ",", 
   RowBox[{
    SubscriptBox["f", "4"], "[", "5", "]"}], ",", 
   RowBox[{
    SubscriptBox["f", "4"], "[", "6", "]"}], ",", 
   RowBox[{
    SubscriptBox["f", "4"], "[", "7", "]"}], ",", 
   RowBox[{
    SubscriptBox["f", "5"], "[", "5", "]"}], ",", 
   RowBox[{
    SubscriptBox["f", "5"], "[", "6", "]"}], ",", 
   RowBox[{
    SubscriptBox["f", "5"], "[", "7", "]"}], ",", 
   RowBox[{
    SubscriptBox["f", "5"], "[", "8", "]"}]}], "}"}]], "Output",
 CellLabel->"Out[532]=",ExpressionUUID->"f36a70b0-9867-4833-9d51-1f2177e1d601"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["lazyTruncate", \
"Subsubsection",ExpressionUUID->"75a3be18-2f6d-4d20-97de-020008739361"],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   StyleBox["lazyTruncate",
    FontWeight->"Bold"], TraditionalForm]],ExpressionUUID->
  "5c39f962-1a63-439b-ba9e-0064027198b4"],
 " is used to shorten a lazyList without having to traverse it. It uses ",
 Cell[BoxData[
  FormBox["MapIndexed", TraditionalForm]],ExpressionUUID->
  "0d5c6917-a5ac-424c-8b8f-9c27e6d5d89f"],
 " to keep track of the position in the list and ",
 Cell[BoxData[
  FormBox[
   StyleBox["endOfLazyList",
    FontWeight->"Bold"], TraditionalForm]],ExpressionUUID->
  "1b27b6c0-b15c-4d48-9c43-f3afd5b570d9"],
 " to end the list:"
}], "Text",ExpressionUUID->"48a9245d-5d77-49ce-99e9-1391aac0a853"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"lz", "=", 
  RowBox[{"lazyTruncate", "[", 
   RowBox[{
    RowBox[{"lazyRange", "[", "]"}], ",", "10"}], "]"}]}]], "Input",
 CellLabel->"In[5]:=",ExpressionUUID->"562dd01b-ccd6-40d4-bf0f-7211a8054fff"],

Cell[BoxData[
 RowBox[{"lazyList", "[", 
  RowBox[{"1", ",", 
   RowBox[{"MapIndexed", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"#2", "\[LessEqual]", "10"}], ",", "#1", ",", "endOfLazyList",
         ",", "endOfLazyList"}], "]"}], "&"}], ",", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"lazyList", "[", 
         RowBox[{"#1", ",", 
          RowBox[{"#0", "[", 
           RowBox[{
            RowBox[{"#2", "+", "#1"}], ",", "#2"}], "]"}]}], "]"}], "&"}], 
       ")"}], "[", 
      RowBox[{
       RowBox[{"1", "+", "1"}], ",", "1"}], "]"}], ",", 
     RowBox[{"1", "+", "1"}]}], "]"}]}], "]"}]], "Output",
 CellLabel->"Out[5]=",ExpressionUUID->"50c26f6e-e04e-481c-b0a5-8eaeb2b5ac84"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"Take", "[", 
   RowBox[{"lz", ",", "All"}], "]"}], " ", 
  RowBox[{"(*", " ", 
   RowBox[{
   "The", " ", "list", " ", "only", " ", "has", " ", "10", " ", "elements"}], 
   " ", "*)"}]}], "\[IndentingNewLine]", 
 RowBox[{"First", "[", "%", "]"}]}], "Input",
 CellLabel->"In[13]:=",ExpressionUUID->"2be03f1d-a815-4379-a7d1-a5e2829b29f0"],

Cell[BoxData[
 RowBox[{"lazyList", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8",
      ",", "9", ",", "10"}], "}"}], ",", 
   RowBox[{"lazyList", "[", "]"}]}], "]"}]], "Output",
 CellLabel->"Out[13]=",ExpressionUUID->"cbb3c99a-6ce0-4828-b5d5-6e06070cb40c"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", 
   ",", "9", ",", "10"}], "}"}]], "Output",
 CellLabel->"Out[14]=",ExpressionUUID->"ed46e3cb-017f-40ee-aa6a-6b996f6c8205"]
}, Open  ]],

Cell["It works with partitioned lazyLists as well:", \
"Text",ExpressionUUID->"4725c404-ed6a-4ceb-a185-f24f9e225827"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Take", "[", 
  RowBox[{
   RowBox[{"lazyTruncate", "[", 
    RowBox[{
     RowBox[{"partitionedLazyRange", "[", "5", "]"}], ",", "10"}], "]"}], ",",
    "All"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Most", "[", "%", "]"}]}], "Input",
 CellLabel->"In[9]:=",ExpressionUUID->"fa12cf34-6865-4c96-abfc-00f1b488bc02"],

Cell[BoxData[
 RowBox[{"partitionedLazyList", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8",
      ",", "9", ",", "10"}], "}"}], ",", 
   RowBox[{"lazyList", "[", "]"}]}], "]"}]], "Output",
 CellLabel->"Out[9]=",ExpressionUUID->"c585650e-b75b-4588-a619-f7fe0f0838d2"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "8", 
   ",", "9", ",", "10"}], "}"}]], "Output",
 CellLabel->"Out[10]=",ExpressionUUID->"c0f3babb-4b87-4515-8b8e-c2ad06e2a27e"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["lazyAggregate", \
"Subsubsection",ExpressionUUID->"3111e5bf-1574-4311-9356-97774e0c1d41"],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   StyleBox["lazyAggregate",
    FontWeight->"Bold"], TraditionalForm]],ExpressionUUID->
  "d20f4b5f-e096-403f-8853-baf084e0a141"],
 " allows you to do running totals over large lists without having to hold \
many elements in memory. For example, suppose we want to count primes up to a \
maximum value. This can be achieved by:"
}], "Text",ExpressionUUID->"0935b042-dd2b-4681-9f7c-fe6a9d929a54"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"lazyAggregate", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"lazyTruncate", "[", 
    RowBox[{
     RowBox[{"partitionedLazyRange", "[", "10000", "]"}], ",", 
     RowBox[{"10", "^", "6"}]}], "]"}], ",", "\[IndentingNewLine]", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"CountsBy", "[", "PrimeQ", "]"}], ",", 
     RowBox[{"Merge", "[", "Total", "]"}]}], "}"}]}], "\[IndentingNewLine]", 
  "]"}]], "Input",
 CellLabel->
  "In[107]:=",ExpressionUUID->"e7faea7c-6454-4991-88bf-26d92361a484"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"\[LeftAssociation]", 
    RowBox[{
     RowBox[{"False", "\[Rule]", "921502"}], ",", 
     RowBox[{"True", "\[Rule]", "78498"}]}], "\[RightAssociation]"}], ",", 
   RowBox[{"lazyList", "[", "]"}]}], "}"}]], "Output",
 CellLabel->"Out[107]=",ExpressionUUID->"8ae44e3f-4414-4bef-85dd-a9dc72a45b25"]
}, Open  ]],

Cell[TextData[{
 "The function ",
 Cell[BoxData[
  FormBox[
   RowBox[{"CountsBy", "[", "PrimeQ", "]"}], TraditionalForm]],ExpressionUUID->
  "ebf1138b-f0c5-4edf-bcf9-68810ab74a3d"],
 " is iteratively applied to the batches of elements generated by ",
 Cell[BoxData[
  FormBox["partitionedLazyRange", TraditionalForm]],ExpressionUUID->
  "b18a8db8-9989-4bba-87c5-05350dd0ea5f"],
 " and the function ",
 Cell[BoxData[
  FormBox[
   RowBox[{"Merge", "[", "Total", "]"}], TraditionalForm]],ExpressionUUID->
  "0be5fa63-ceaf-4904-b6f3-b71e5e987ceb"],
 " is used to merge the associations generated by ",
 Cell[BoxData[
  FormBox[
   RowBox[{"CountsBy", "[", "PrimeQ", "]"}], TraditionalForm]],ExpressionUUID->
  "e63a5c3c-4761-40a3-938a-354bc1030789"],
 "."
}], "Text",ExpressionUUID->"238b9952-dd5c-4657-bdab-95bac699508c"],

Cell["\<\
If the list is infinitely long, a maximum number of items can be specified:\
\>", "Text",ExpressionUUID->"0ae532ff-985e-4f95-8f76-5aaa1aa8eae1"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{
   RowBox[{"{", 
    RowBox[{"result", ",", "tail"}], "}"}], "=", 
   RowBox[{"lazyAggregate", "[", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"partitionedLazyRange", "[", "10000", "]"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"CountsBy", "[", "PrimeQ", "]"}], ",", 
       RowBox[{"Merge", "[", "Total", "]"}]}], "}"}], ",", 
     "\[IndentingNewLine]", 
     RowBox[{"10", "^", "6"}]}], "\[IndentingNewLine]", "]"}]}], 
  ";"}], "\[IndentingNewLine]", "result"}], "Input",
 CellLabel->
  "In[129]:=",ExpressionUUID->"2e3179dc-2eac-4f72-b066-641175965f29"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"False", "\[Rule]", "921502"}], ",", 
   RowBox[{"True", "\[Rule]", "78498"}]}], "\[RightAssociation]"}]], "Output",
 CellLabel->"Out[130]=",ExpressionUUID->"2ccefdcf-d8a7-48e2-abb5-56b349bc961d"]
}, Open  ]],

Cell["\<\
In the second example, the tail of the list is retained and can be used to \
extract more elements:\
\>", "Text",ExpressionUUID->"e9c34bf9-0e6a-4544-b57b-0c0f970a3dd8"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"First", "@", 
  RowBox[{"lazyAggregate", "[", "\[IndentingNewLine]", 
   RowBox[{"tail", ",", "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"CountsBy", "[", "PrimeQ", "]"}], ",", 
      RowBox[{"Merge", "[", "Total", "]"}]}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"10", "^", "6"}]}], "\[IndentingNewLine]", "]"}]}]], "Input",
 CellLabel->
  "In[131]:=",ExpressionUUID->"295c4bdb-b0d5-4503-b09a-be80c7dfb751"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"False", "\[Rule]", "929565"}], ",", 
   RowBox[{"True", "\[Rule]", "70435"}]}], "\[RightAssociation]"}]], "Output",
 CellLabel->"Out[131]=",ExpressionUUID->"f769484c-03f7-4687-8dbf-5fd80bc9c4ea"]
}, Open  ]],

Cell[TextData[{
 Cell[BoxData[
  FormBox["lazyAggregate", TraditionalForm]],ExpressionUUID->
  "eb0b4c37-5e56-4f91-8582-143faf9b38e6"],
 " also works with normal lazyLists. You can specify the number of elements \
that get extracted before aggregation:"
}], "Text",ExpressionUUID->"02c92468-459f-44df-9f01-61ca5c598273"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"First", "@", 
  RowBox[{"lazyAggregate", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"lazyRange", "[", "]"}], ",", "\[IndentingNewLine]", 
    RowBox[{"{", 
     RowBox[{
      RowBox[{"CountsBy", "[", "PrimeQ", "]"}], ",", 
      RowBox[{"Merge", "[", "Total", "]"}]}], "}"}], ",", 
    "\[IndentingNewLine]", 
    RowBox[{"10", "^", "6"}], ",", "\[IndentingNewLine]", "1000"}], " ", 
   RowBox[{"(*", " ", 
    RowBox[{
    "pull", " ", "1000", " ", "numbers", " ", "from", " ", "the", " ", "list",
      " ", "before", " ", "counting", " ", "primes"}], " ", "*)"}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 CellLabel->
  "In[152]:=",ExpressionUUID->"8d165a16-0b68-49e7-b175-85da0f6bb146"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"False", "\[Rule]", "921502"}], ",", 
   RowBox[{"True", "\[Rule]", "78498"}]}], "\[RightAssociation]"}]], "Output",
 CellLabel->"Out[152]=",ExpressionUUID->"64edb3ed-6468-4790-b62a-43485bb54127"]
}, Open  ]]
}, Closed]],

Cell[CellGroupData[{

Cell["AllTrue, AnyTrue, NoneTrue", \
"Subsubsection",ExpressionUUID->"10bb8271-8ab5-4fed-a7d4-6ee407a77517"],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   StyleBox["AllTrue",
    FontWeight->"Bold"], TraditionalForm]],ExpressionUUID->
  "ed2d42b3-4d86-4786-bcab-21905e7ede36"],
 ", ",
 Cell[BoxData[
  FormBox[
   StyleBox["AnyTrue",
    FontWeight->"Bold"], TraditionalForm]],ExpressionUUID->
  "445bea4a-2665-47e9-8e67-fa82dc0ce4b3"],
 " and ",
 Cell[BoxData[
  FormBox[
   StyleBox["NoneTrue",
    FontWeight->"Bold"], TraditionalForm]],ExpressionUUID->
  "047f642a-7e13-47bd-bee8-42c82a484eaa"],
 " work with lazyLists and will short-circuit:"
}], "Text",ExpressionUUID->"8436ffd2-6471-4850-885f-958876a277d6"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"AllTrue", "[", 
  RowBox[{
   RowBox[{"lazyRange", "[", "]"}], ",", " ", 
   RowBox[{
    RowBox[{"#", "<", "100"}], "&"}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"AnyTrue", "[", 
  RowBox[{
   RowBox[{"lazyRange", "[", "]"}], ",", " ", 
   RowBox[{
    RowBox[{"#", "<", "100"}], "&"}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"NoneTrue", "[", 
  RowBox[{
   RowBox[{"lazyRange", "[", "]"}], ",", " ", 
   RowBox[{
    RowBox[{"#", "<", "100"}], "&"}]}], "]"}]}], "Input",
 CellLabel->"In[8]:=",ExpressionUUID->"9146f014-e40b-4150-8766-d87a9cfa14f0"],

Cell[BoxData["False"], "Output",
 CellLabel->"Out[8]=",ExpressionUUID->"84282870-ffc3-40d8-a413-3d6ee7b22538"],

Cell[BoxData["True"], "Output",
 CellLabel->"Out[9]=",ExpressionUUID->"21aa170f-6120-48c8-b0c0-aacc3f8cb114"],

Cell[BoxData["False"], "Output",
 CellLabel->"Out[10]=",ExpressionUUID->"d7409ca0-cdc5-4e65-9994-c888e6574560"]
}, Open  ]],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"AllTrue", "[", 
  RowBox[{
   RowBox[{"lazyTruncate", "[", 
    RowBox[{
     RowBox[{"lazyRange", "[", "]"}], ",", "99"}], "]"}], ",", 
   RowBox[{
    RowBox[{"#", "<", "100"}], "&"}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"AnyTrue", "[", 
  RowBox[{
   RowBox[{"lazyTruncate", "[", 
    RowBox[{
     RowBox[{"lazyRange", "[", "]"}], ",", "99"}], "]"}], ",", 
   RowBox[{
    RowBox[{"#", ">", "100"}], "&"}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"NoneTrue", "[", 
  RowBox[{
   RowBox[{"lazyTruncate", "[", 
    RowBox[{
     RowBox[{"lazyRange", "[", "]"}], ",", "99"}], "]"}], ",", 
   RowBox[{
    RowBox[{"#", ">", "100"}], "&"}]}], "]"}]}], "Input",
 CellLabel->"In[23]:=",ExpressionUUID->"85ed224d-0c3c-419a-b7db-7be38a58b714"],

Cell[BoxData["True"], "Output",
 CellLabel->"Out[23]=",ExpressionUUID->"eba63817-0287-42d6-afbf-0f67501039dc"],

Cell[BoxData["False"], "Output",
 CellLabel->"Out[24]=",ExpressionUUID->"d297942f-4621-45a6-a4f3-4c3f940c04ef"],

Cell[BoxData["True"], "Output",
 CellLabel->"Out[25]=",ExpressionUUID->"7ac5db6d-4af0-43f6-ade7-c3e8266913dc"]
}, Open  ]],

Cell["\<\
Beware that these functions may not terminate for infinite lists:\
\>", "Text",ExpressionUUID->"4c751563-508d-448b-83e0-a689fae763b7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TimeConstrained", "[", 
  RowBox[{
   RowBox[{"AllTrue", "[", 
    RowBox[{
     RowBox[{"lazyRange", "[", 
      RowBox[{"2", ",", "2"}], "]"}], ",", "EvenQ"}], "]"}], ",", "3"}], 
  "]"}]], "Input",
 CellLabel->"In[19]:=",ExpressionUUID->"190576b4-db53-4a0c-bb6d-a9acb696f166"],

Cell[BoxData["$Aborted"], "Output",
 CellLabel->"Out[19]=",ExpressionUUID->"34482b4f-0199-48c7-b6ee-807e72bba720"]
}, Open  ]]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Known issues and caveats", \
"Subsection",ExpressionUUID->"913456ae-86bc-474d-90bb-1fe719afec8e"],

Cell[TextData[StyleBox["When defining your own lazyLists, make sure the last \
part of the list does not evaluate to itself. Take etc. will not work \
correctly on such lists and stop iterating prematurely:", "Item"]], \
"Item",ExpressionUUID->"a9a3aa2a-2457-4fe3-be1a-dae91e7a5263"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"badExample", " ", "=", 
  RowBox[{
   RowBox[{"Function", "[", 
    RowBox[{"lazyList", "[", 
     RowBox[{"1", ",", 
      RowBox[{"#0", "[", "]"}]}], "]"}], "]"}], "[", 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"badExample", "===", 
  RowBox[{"Last", "[", "badExample", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"First", " ", "@", 
  RowBox[{"Take", "[", 
   RowBox[{"badExample", ",", "20"}], "]"}]}]}], "Input",
 CellLabel->
  "In[533]:=",ExpressionUUID->"16b8e012-7427-4406-b801-d4e7e34f299e"],

Cell[BoxData[
 RowBox[{"lazyList", "[", 
  RowBox[{"1", ",", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"lazyList", "[", 
       RowBox[{"1", ",", 
        RowBox[{"#0", "[", "]"}]}], "]"}], "&"}], ")"}], "[", "]"}]}], 
  "]"}]], "Output",
 CellLabel->
  "Out[533]=",ExpressionUUID->"afd78b0f-8415-477d-9ca0-da85f2326bd5"],

Cell[BoxData["True"], "Output",
 CellLabel->
  "Out[534]=",ExpressionUUID->"d63c7160-776f-4fa6-86a9-20f7323dd04d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "1"}], "}"}]], "Output",
 CellLabel->"Out[535]=",ExpressionUUID->"cdd21b26-77e2-4b76-a0af-ced05a3d9b3d"]
}, Open  ]],

Cell["\<\
Instead, you can add an iterator that increases with each evaluation. This \
iterator can also be used to keep track of the position in the lazy list:\
\>", "Text",ExpressionUUID->"24b81520-5eb3-4541-b793-4c68766f4c01"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"example", " ", "=", 
  RowBox[{
   RowBox[{"Function", "[", 
    RowBox[{"lazyList", "[", 
     RowBox[{"1", ",", 
      RowBox[{"#0", "[", 
       RowBox[{"#1", "+", "1"}], "]"}]}], "]"}], "]"}], "[", "1", 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"example", "===", 
  RowBox[{"Last", "[", "example", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"Take", "[", 
  RowBox[{"example", ",", "20"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"position", "=", 
  RowBox[{"Replace", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Last", "@", "%"}], ",", "\[IndentingNewLine]", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"lazyList", "[", 
       RowBox[{"_", ",", 
        RowBox[{
         RowBox[{"Function", "[", "__", "]"}], "[", "i_", "]"}]}], "]"}], 
      "\[RuleDelayed]", "i"}], "\[IndentingNewLine]", "}"}]}], 
   "]"}]}]}], "Input",
 CellLabel->
  "In[536]:=",ExpressionUUID->"44069107-bcb5-4d00-85bc-c9773bf4979b"],

Cell[BoxData[
 RowBox[{"lazyList", "[", 
  RowBox[{"1", ",", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"lazyList", "[", 
       RowBox[{"1", ",", 
        RowBox[{"#0", "[", 
         RowBox[{"#1", "+", "1"}], "]"}]}], "]"}], "&"}], ")"}], "[", 
    RowBox[{"1", "+", "1"}], "]"}]}], "]"}]], "Output",
 CellLabel->
  "Out[536]=",ExpressionUUID->"2f2803ef-eaef-444b-83c0-2faca544f5f9"],

Cell[BoxData["False"], "Output",
 CellLabel->
  "Out[537]=",ExpressionUUID->"95572449-b03f-485b-9a15-fa7b58ee1ed4"],

Cell[BoxData[
 RowBox[{"lazyList", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1",
      ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", 
     ",", "1", ",", "1", ",", "1", ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"lazyList", "[", 
       RowBox[{"1", ",", 
        RowBox[{"#0", "[", 
         RowBox[{"#1", "+", "1"}], "]"}]}], "]"}], "&"}], ")"}], "[", 
    RowBox[{"20", "+", "1"}], "]"}]}], "]"}]], "Output",
 CellLabel->
  "Out[538]=",ExpressionUUID->"2b5ea73d-67de-462b-8454-6a493d5cd5b1"],

Cell[BoxData["22"], "Output",
 CellLabel->"Out[539]=",ExpressionUUID->"e1ef0bac-b46d-49b7-b3c3-2a502ee84fdb"]
}, Open  ]],

Cell[TextData[{
 "If a function mapped over a lazyList returns ",
 StyleBox["endOfLazyList",
  FontWeight->"Bold"],
 ", the function ",
 StyleBox["composeMappedFunctions",
  FontWeight->"Bold"],
 " may interfere with the intended functionality:"
}], "Item",ExpressionUUID->"dd61c40d-c1b4-4831-8c39-544f28c56b5c"],

Cell[TextData[{
 "This will work correctly because the lazyList terminates during the first ",
 StyleBox["Map",
  FontWeight->"Bold"],
 ":"
}], "Text",ExpressionUUID->"ed6f184f-b245-4134-8303-3a33a37ddc3c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Take", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"Sin", "/@", 
    RowBox[{
     RowBox[{"Function", "[", 
      RowBox[{"If", "[", 
       RowBox[{
        RowBox[{"#", "===", "10"}], ",", "endOfLazyList", ",", "#"}], "]"}], 
      "]"}], "/@", 
     RowBox[{"lazyRange", "[", "]"}]}]}], ",", "\[IndentingNewLine]", "20"}], 
  "\[IndentingNewLine]", "]"}]], "Input",
 CellLabel->"In[5]:=",ExpressionUUID->"0298ebbd-56f4-4309-b165-821651549c40"],

Cell[BoxData[
 RowBox[{"lazyList", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Sin", "[", "1", "]"}], ",", 
     RowBox[{"Sin", "[", "2", "]"}], ",", 
     RowBox[{"Sin", "[", "3", "]"}], ",", 
     RowBox[{"Sin", "[", "4", "]"}], ",", 
     RowBox[{"Sin", "[", "5", "]"}], ",", 
     RowBox[{"Sin", "[", "6", "]"}], ",", 
     RowBox[{"Sin", "[", "7", "]"}], ",", 
     RowBox[{"Sin", "[", "8", "]"}], ",", 
     RowBox[{"Sin", "[", "9", "]"}]}], "}"}], ",", 
   RowBox[{"lazyList", "[", "]"}]}], "]"}]], "Output",
 CellLabel->"Out[5]=",ExpressionUUID->"d0d00488-41eb-489c-b799-3b0f25685b2b"]
}, Open  ]],

Cell[TextData[{
 "This will not work correctly since the ",
 StyleBox["Sin",
  FontWeight->"Bold"],
 " function will be wrapped around ",
 StyleBox["endOfLazyList",
  FontWeight->"Bold"],
 ":"
}], "Text",ExpressionUUID->"46007d5f-4cdc-4b8c-bb36-654f81ac8ef7"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Take", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"composeMappedFunctions", "[", "\[IndentingNewLine]", 
    RowBox[{"Sin", "/@", 
     RowBox[{
      RowBox[{"Function", "[", 
       RowBox[{"If", "[", 
        RowBox[{
         RowBox[{"#", "===", "10"}], ",", "endOfLazyList", ",", "#"}], "]"}], 
       "]"}], "/@", 
      RowBox[{"lazyRange", "[", "]"}]}]}], "\[IndentingNewLine]", "]"}], ",", 
   "\[IndentingNewLine]", "20"}], "\[IndentingNewLine]", "]"}]], "Input",
 CellLabel->"In[6]:=",ExpressionUUID->"8e78562c-a9bf-4757-9675-72fe04b2057c"],

Cell[BoxData[
 RowBox[{"lazyList", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Sin", "[", "1", "]"}], ",", 
     RowBox[{"Sin", "[", "2", "]"}], ",", 
     RowBox[{"Sin", "[", "3", "]"}], ",", 
     RowBox[{"Sin", "[", "4", "]"}], ",", 
     RowBox[{"Sin", "[", "5", "]"}], ",", 
     RowBox[{"Sin", "[", "6", "]"}], ",", 
     RowBox[{"Sin", "[", "7", "]"}], ",", 
     RowBox[{"Sin", "[", "8", "]"}], ",", 
     RowBox[{"Sin", "[", "9", "]"}], ",", 
     RowBox[{"Sin", "[", "endOfLazyList", "]"}], ",", 
     RowBox[{"Sin", "[", "11", "]"}], ",", 
     RowBox[{"Sin", "[", "12", "]"}], ",", 
     RowBox[{"Sin", "[", "13", "]"}], ",", 
     RowBox[{"Sin", "[", "14", "]"}], ",", 
     RowBox[{"Sin", "[", "15", "]"}], ",", 
     RowBox[{"Sin", "[", "16", "]"}], ",", 
     RowBox[{"Sin", "[", "17", "]"}], ",", 
     RowBox[{"Sin", "[", "18", "]"}], ",", 
     RowBox[{"Sin", "[", "19", "]"}], ",", 
     RowBox[{"Sin", "[", "20", "]"}]}], "}"}], ",", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{"Sin", "@*", 
      RowBox[{"(", 
       RowBox[{
        RowBox[{"If", "[", 
         RowBox[{
          RowBox[{"#1", "===", "10"}], ",", "endOfLazyList", ",", "#1"}], 
         "]"}], "&"}], ")"}]}], ")"}], "/@", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"lazyList", "[", 
        RowBox[{"#1", ",", 
         RowBox[{"#0", "[", 
          RowBox[{
           RowBox[{"#2", "+", "#1"}], ",", "#2"}], "]"}]}], "]"}], "&"}], 
      ")"}], "[", 
     RowBox[{
      RowBox[{"1", "+", "20"}], ",", "1"}], "]"}]}]}], "]"}]], "Output",
 CellLabel->"Out[6]=",ExpressionUUID->"a94cd287-8fb1-41af-b461-fae6dc507570"]
}, Open  ]]
}, Closed]]
}, Open  ]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["Running verification tests", "Section"]], \
"Title",ExpressionUUID->"7f8ec0c4-ea1a-47b7-8db7-70f3d2af1951"],

Cell["\<\
You can run verification tests of the code to see if everything works as \
expected. This is especially useful if you make your own changes to the code. \
Most of the tests have been lifted from the example code above.\
\>", "Text",ExpressionUUID->"7d7cd98d-988e-4a88-a39e-e45a2ebbfaac"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"testReport", "=", 
   RowBox[{"TestReport", "[", 
    RowBox[{"FileNameJoin", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"NotebookDirectory", "[", "]"}], ",", 
       "\"\<VerificationTests.nb\>\""}], "}"}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Length", "/@", 
  RowBox[{"testReport", "[", "\"\<TestResultRules\>\"", "]"}]}]}], "Input",
 CellLabel->"In[15]:=",ExpressionUUID->"d39108b1-440b-4934-83bc-ca7def2926a3"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"TestsSucceeded\"\>", "\[Rule]", "251"}], ",", 
   RowBox[{"\<\"TestsFailedWrongResults\"\>", "\[Rule]", "2"}], ",", 
   RowBox[{"\<\"TestsFailedWithMessages\"\>", "\[Rule]", "0"}], ",", 
   RowBox[{"\<\"TestsFailedWithErrors\"\>", "\[Rule]", "0"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellLabel->"Out[16]=",ExpressionUUID->"0e3b9d02-bf9f-4d9e-88a2-de8301c3fd05"]
}, Open  ]],

Cell["\<\
Alternatively, run the tests from the *.wlt file that was generated from the \
notebook. This is generally faster:\
\>", "Text",ExpressionUUID->"d272576a-3f88-4d16-89a1-e82a544f61cd"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"testReport", "=", 
   RowBox[{"TestReport", "[", 
    RowBox[{"FileNameJoin", "[", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"NotebookDirectory", "[", "]"}], ",", 
       "\"\<VerificationTests.wlt\>\""}], "}"}], "]"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"Length", "/@", 
  RowBox[{"testReport", "[", "\"\<TestResultRules\>\"", "]"}]}]}], "Input",
 CellLabel->"In[43]:=",ExpressionUUID->"e671f9bb-d62b-46e6-95a8-e4e014fff349"],

Cell[BoxData[
 RowBox[{"\[LeftAssociation]", 
  RowBox[{
   RowBox[{"\<\"TestsSucceeded\"\>", "\[Rule]", "251"}], ",", 
   RowBox[{"\<\"TestsFailedWrongResults\"\>", "\[Rule]", "2"}], ",", 
   RowBox[{"\<\"TestsFailedWithMessages\"\>", "\[Rule]", "0"}], ",", 
   RowBox[{"\<\"TestsFailedWithErrors\"\>", "\[Rule]", "0"}]}], 
  "\[RightAssociation]"}]], "Output",
 CellLabel->"Out[44]=",ExpressionUUID->"5eaaf0d9-aa4f-4389-bd01-41a5229d7c75"]
}, Open  ]],

Cell["There are currently 2 failing tests. These are known issues.", \
"Text",ExpressionUUID->"0ef2ed30-5b21-4f6e-b4dc-8e64f2279b7a"]
}, Closed]],

Cell[CellGroupData[{

Cell[TextData[StyleBox["Re-building the paclet", "Section"]], \
"Title",ExpressionUUID->"28c3538b-db04-4b32-b524-c3a53902e72a"],

Cell[BoxData[
 RowBox[{"PackPaclet", "[", 
  RowBox[{"FileNameJoin", "[", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"NotebookDirectory", "[", "]"}], ",", "\"\<lazyLists\>\""}], 
    "}"}], "]"}], "]"}]], "Input",
 CellLabel->"In[30]:=",ExpressionUUID->"55db7a2d-4d4a-413f-ae5a-bc32c25ae622"]
}, Closed]]
},
WindowSize->{1181, 839},
WindowMargins->{{349, Automatic}, {Automatic, 40}},
PrivateNotebookOptions->{"FileOutlineCache"->False},
ShowGroupOpener->True,
TaggingRules->{"SaveDialogDataSavesBlog" -> False, "TryRealOnly" -> False},
TrackCellChangeTimes->False,
Magnification:>1.3 Inherited,
FrontEndVersion->"12.1 for Microsoft Windows (64-bit) (June 9, 2020)",
StyleDefinitions->"Default.nb",
ExpressionUUID->"51e48de9-5997-45d0-8e87-672898f8f3a2"
]

