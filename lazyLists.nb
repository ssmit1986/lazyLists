Notebook[{
Cell[BoxData[{
 RowBox[{
  RowBox[{"$HistoryLength", "=", "10"}], ";"}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"SetDirectory", "[", 
   RowBox[{"NotebookDirectory", "[", "]"}], "]"}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"ClearAll", "[", 
  RowBox[{"\"\<lazyLists`*\>\"", ",", "\"\<lazyLists`Private`*\>\""}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"<<", "lazyLists`"}]}], "Input",
 CellLabel->"In[1]:=",ExpressionUUID->"2d6a87cf-3ef1-4832-b8b9-0995d6d1b646"],

Cell[CellGroupData[{

Cell["Usage messages for lazy list constructors and other symbols", \
"Section",ExpressionUUID->"ec4cc4aa-b2ff-4f5e-9ddc-c3f207f96586"],

Cell[CellGroupData[{

Cell["Constructors", \
"Subsection",ExpressionUUID->"270e0702-e686-4de6-bae4-7c5c59474557"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"?", "lazyList"}], "\[IndentingNewLine]", 
 RowBox[{"?", "lazyGenerator"}], "\[IndentingNewLine]", 
 RowBox[{"?", "lazyRange"}], "\[IndentingNewLine]", 
 RowBox[{"?", "lazyPowerRange"}], "\[IndentingNewLine]", 
 RowBox[{"?", "lazyNestList"}], "\[IndentingNewLine]", 
 RowBox[{"?", "lazyPeriodicList"}], "\[IndentingNewLine]", 
 RowBox[{"?", "lazyStream"}], "\[IndentingNewLine]", 
 RowBox[{"?", "lazyTuples"}], "\[IndentingNewLine]", 
 RowBox[{"?", "lazyConstantArray"}]}], "Input",
 CellLabel->"In[4]:=",ExpressionUUID->"8f1d3194-9e73-46ae-83d7-5e7cad595285"],

Cell[CellGroupData[{

Cell[BoxData["\<\"lazyList is linked list data structure that should contain \
2 elements: the first is the first element, the second a held expression that \
will generate the next linked list when evaluated.\\nYou can extract these \
elements explicitely with First and Last/Rest. Part and Take will not work \
because they have been overloaded with special functionalities when used on \
lazyList.\\nlazyList[list] or lazyList[Hold[var]] is a special constructor \
that generates a lazyList from an ordinary list\"\>"], "Print", "PrintUsage",
 CellTags->
  "Info43746513380-8500392",ExpressionUUID->"4960b98f-8fd4-448e-9f8d-\
0f0336fe5510"],

Cell[BoxData["\<\"lazyGenerator[f, start, min, max, step] generates a \
lazyList that applies f to values {start, start + step, start + 2 step, ...} \
for values between min and max (which are allowed to be infinite).\\nWhen min \
and max are both infinite, symbolic values for start and step are \
allowed\"\>"], "Print", "PrintUsage",
 CellTags->
  "Info53746513380-8500392",ExpressionUUID->"af5c2c2d-ecb8-4ebb-a7dc-\
7f514ff4bd12"],

Cell[BoxData["\<\"lazyRange[] is a lazy representation of the Integers from 1 \
to \[Infinity]. lazyRange[min, delta] represents values values from min \
onwards in steps of delta. lazyRange has no upper limit\"\>"], "Print", \
"PrintUsage",
 CellTags->
  "Info63746513380-8500392",ExpressionUUID->"a050ed79-73e9-45cc-a8ad-\
892d9985d4b0"],

Cell[BoxData["\<\"lazyPowerRange[min, r] is the infinite list {min, r \
\[Times] min, r^2 \[Times] min, ...}\"\>"], "Print", "PrintUsage",
 CellTags->
  "Info73746513380-8500392",ExpressionUUID->"d5a19653-503b-4798-adc8-\
43842e9fad34"],

Cell[BoxData["\<\"lazyNestList[f, elem] is the infinite list {elem, f[elem], \
f[f[elem]], ...} starting with elem and generated by iterating f repeatedly\"\
\>"], "Print", "PrintUsage",
 CellTags->
  "Info83746513380-8500392",ExpressionUUID->"5128340f-641c-496e-ba8c-\
a65d2ab1eab4"],

Cell[BoxData["\<\"lazyPeriodicList[list] is an infinite lazyList that cycles \
through the values in list periodically\"\>"], "Print", "PrintUsage",
 CellTags->
  "Info93746513380-8500392",ExpressionUUID->"abb68498-cb22-40f3-94a7-\
0dff457e31f1"],

Cell[BoxData["\<\"lazyStream[streamObject] creates a lazyList that streams \
from streamObject. These streams will stop automatically when EndOfFile is \
reached\"\>"], "Print", "PrintUsage",
 CellTags->
  "Info103746513380-8500392",ExpressionUUID->"52e5cd67-910d-4807-8fc6-\
c0649774855d"],

Cell[BoxData["\<\"\"\>"], "Print", "PrintUsage",
 CellTags->
  "Info113746513380-8500392",ExpressionUUID->"8c65d9f8-ef39-4e8c-94c9-\
2e09b8e74131"],

Cell[BoxData["\<\"lazyConstantArray[elem] produces an infinite list of copies \
of elem\"\>"], "Print", "PrintUsage",
 CellTags->
  "Info123746513380-8500392",ExpressionUUID->"c2215e31-f005-4e87-be2b-\
a2c942811386"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Operations on finite lazyLists", \
"Subsection",ExpressionUUID->"6d5d1031-631a-41cb-8e58-264d57f52254"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"?", "lazyFiniteTake"}], "\[IndentingNewLine]", 
 RowBox[{"?", "lazyFinitePart"}], "\[IndentingNewLine]", 
 RowBox[{"?", "lazySetState"}]}], "Input",
 CellLabel->"In[13]:=",ExpressionUUID->"0937c9c9-1b4b-4347-a8ce-1b460d985208"],

Cell[CellGroupData[{

Cell[BoxData["\<\"lazyFiniteTake[lz, spec] directly applies Take to finite \
lazyLists and periodic lazyLists without having to traverse the lazyList \
element-by-element. \\nIt is equivalent to Take[list, spec]\"\>"], "Print", \
"PrintUsage",
 CellTags->
  "Info133746513381-8500392",ExpressionUUID->"7d8e20fe-8dda-4be9-aa9a-\
2e0d120aedb1"],

Cell[BoxData["\<\"lazyFinitePart[lz, i, j, k,...] directly extracts Part from \
finite and periodic lazyLists without having to traverse the lazyList \
element-by-element. \\nIt is equivalent to Part[list, i, j, k, ...]\"\>"], \
"Print", "PrintUsage",
 CellTags->
  "Info143746513381-8500392",ExpressionUUID->"d68f9f5c-ffcc-4f67-b5ef-\
3e3a0b2a0d9b"],

Cell[BoxData["\<\"lazySetState[lz, index] with lz a supported lazyList \
returns a lazyList at the specified index. \\nFinite lists, lazyPeriodicList \
and lists generated with lazyGenerator, lazy(Power)Range, and lazyNestList \
are supported\"\>"], "Print", "PrintUsage",
 CellTags->
  "Info153746513381-8500392",ExpressionUUID->"d1b6e144-af36-46d6-9a8e-\
da26eadf4460"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Special functions", \
"Subsection",ExpressionUUID->"8161cb60-2662-464e-bd05-1ed7918a050f"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"?", "lazyMapThread"}], "\[IndentingNewLine]", 
 RowBox[{"?", "lazyTranspose"}], "\[IndentingNewLine]", 
 RowBox[{"?", "lazyPartMap"}]}], "Input",
 CellLabel->"In[16]:=",ExpressionUUID->"966ecd04-15a3-4c9a-b904-32be5271d7a0"],

Cell[CellGroupData[{

Cell[BoxData["\<\"lazyMapThread[f, {lz1, lz2, ...}] is similar to MapThread, \
except all elements from the lazyLists are fed to the first slot of f as a \
regular List\"\>"], "Print", "PrintUsage",
 CellTags->
  "Info163746513381-8500392",ExpressionUUID->"c2de0b46-9ea2-48ab-a02c-\
45013c725aaa"],

Cell[BoxData["\<\"lazyTranspose[{lz1, lz2, ...}] creates a lazyList with \
tuples of elements from lz1, lz2, etc. \\nEquivalent to \
lazyMapThread[Identity, {lz1, lz2, ...}]\"\>"], "Print", "PrintUsage",
 CellTags->
  "Info173746513381-8500392",ExpressionUUID->"1d28795f-309b-4f43-924f-\
0ffb2cfa32da"],

Cell[BoxData["\<\"lazyPartMap[l, {i, j, k, ...}] is equivalent to Map[Part[l, \
{#}]&, {i, j, k, ...}] but faster\"\>"], "Print", "PrintUsage",
 CellTags->
  "Info183746513381-8500392",ExpressionUUID->"6900a68e-582d-4108-86bc-\
e28de0ef7ad3"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Implementation details", \
"Subsection",ExpressionUUID->"2afa4dd0-09a8-4f37-b66b-767769b7a1f0"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"?", 
  "$lazyIterationLimit"}], "\[IndentingNewLine]", "$lazyIterationLimit"}], \
"Input",
 CellLabel->"In[19]:=",ExpressionUUID->"d8833260-c2e5-4791-808b-7f6f92e54cfe"],

Cell[BoxData["\<\"Iteration limit used for finding successive elements in a \
lazy list\"\>"], "Print", "PrintUsage",
 CellTags->
  "Info193746513381-8500392",ExpressionUUID->"90f862e9-f68f-4dbf-af84-\
302b1aeb838e"],

Cell[BoxData["\[Infinity]"], "Output",
 CellLabel->"Out[20]=",ExpressionUUID->"f3bef123-b855-4ca8-b619-9cbd2dbb0210"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Usage examples", \
"Section",ExpressionUUID->"79b459a2-40b2-4d85-ad2a-91269059057f"],

Cell[CellGroupData[{

Cell["Creating lazyLists and extracting elements from them", \
"Subsection",ExpressionUUID->"9cdf5a73-58b8-496b-a090-8a5dfff3450d"],

Cell[TextData[{
 StyleBox["lazyRange[start, step]",
  FontWeight->"Bold"],
 " are the basic constructor for equally-space infinite lazyLists. Both \
arguments of lazyRange default to 1 when omitted. Thus, lazyRange[] \
represents the positive integers. Successive integers can be extracted by \
repeatedly applying ",
 StyleBox["Last",
  FontWeight->"Bold"],
 " or ",
 StyleBox["Rest",
  FontWeight->"Bold"],
 ":"
}], "Text",ExpressionUUID->"1a112eb4-0971-4789-9386-f0b04d8aa1e0"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"lazyRange", "[", "]"}], "\[IndentingNewLine]", 
 RowBox[{"Last", "@", "%"}], "\[IndentingNewLine]", 
 RowBox[{"Rest", "@", "%"}]}], "Input",
 CellLabel->"In[21]:=",ExpressionUUID->"dab87c82-c933-47c1-b843-edd59f2e403c"],

Cell[BoxData[
 RowBox[{"lazyList", "[", 
  RowBox[{"1", ",", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"lazyList", "[", 
       RowBox[{"#1", ",", 
        RowBox[{"#0", "[", 
         RowBox[{
          RowBox[{"#2", "+", "#1"}], ",", "#2"}], "]"}]}], "]"}], "&"}], 
     ")"}], "[", 
    RowBox[{
     RowBox[{"1", "+", "1"}], ",", "1"}], "]"}]}], "]"}]], "Output",
 CellLabel->"Out[21]=",ExpressionUUID->"9ff127be-8348-415b-94ad-233dda771bd4"],

Cell[BoxData[
 RowBox[{"lazyList", "[", 
  RowBox[{"2", ",", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"lazyList", "[", 
       RowBox[{"#1", ",", 
        RowBox[{"#0", "[", 
         RowBox[{
          RowBox[{"#2", "+", "#1"}], ",", "#2"}], "]"}]}], "]"}], "&"}], 
     ")"}], "[", 
    RowBox[{
     RowBox[{"1", "+", "2"}], ",", "1"}], "]"}]}], "]"}]], "Output",
 CellLabel->"Out[22]=",ExpressionUUID->"e8763d39-036a-413d-adc0-e0c7166261fc"],

Cell[BoxData[
 RowBox[{"lazyList", "[", 
  RowBox[{"3", ",", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"lazyList", "[", 
       RowBox[{"#1", ",", 
        RowBox[{"#0", "[", 
         RowBox[{
          RowBox[{"#2", "+", "#1"}], ",", "#2"}], "]"}]}], "]"}], "&"}], 
     ")"}], "[", 
    RowBox[{
     RowBox[{"1", "+", "3"}], ",", "1"}], "]"}]}], "]"}]], "Output",
 CellLabel->"Out[23]=",ExpressionUUID->"70ec0e16-5eb5-4398-8ac7-b5afe752204a"]
}, Open  ]],

Cell[TextData[{
 StyleBox["lazyPowerRange[start, r]",
  FontWeight->"Bold"],
 " similarly creates a range of powers. Both lazyRange and lazyPowerRange can \
be symbolic:"
}], "Text",ExpressionUUID->"d47e9905-2b75-4b30-8f46-e31f3b1be6a7"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"lazyRange", "[", 
  RowBox[{"start", ",", "step"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Last", "@", "%"}], "\[IndentingNewLine]", 
 RowBox[{"lazyPowerRange", "[", 
  RowBox[{"start", ",", "r"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Last", "@", "%"}]}], "Input",
 CellLabel->"In[24]:=",ExpressionUUID->"430bd9f9-0ffd-4088-bed6-c2b3221739b1"],

Cell[BoxData[
 RowBox[{"lazyList", "[", 
  RowBox[{"start", ",", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"lazyList", "[", 
       RowBox[{"#1", ",", 
        RowBox[{"#0", "[", 
         RowBox[{
          RowBox[{"#2", "+", "#1"}], ",", "#2"}], "]"}]}], "]"}], "&"}], 
     ")"}], "[", 
    RowBox[{
     RowBox[{"step", "+", "start"}], ",", "step"}], "]"}]}], "]"}]], "Output",
 CellLabel->"Out[24]=",ExpressionUUID->"1f7a2c76-2d9e-40df-b36e-5bfc3760be66"],

Cell[BoxData[
 RowBox[{"lazyList", "[", 
  RowBox[{
   RowBox[{"start", "+", "step"}], ",", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"lazyList", "[", 
       RowBox[{"#1", ",", 
        RowBox[{"#0", "[", 
         RowBox[{
          RowBox[{"#2", "+", "#1"}], ",", "#2"}], "]"}]}], "]"}], "&"}], 
     ")"}], "[", 
    RowBox[{
     RowBox[{"step", "+", 
      RowBox[{"(", 
       RowBox[{"start", "+", "step"}], ")"}]}], ",", "step"}], "]"}]}], 
  "]"}]], "Output",
 CellLabel->"Out[25]=",ExpressionUUID->"b58e36f1-be09-4e0a-b808-fb4e59b99515"],

Cell[BoxData[
 RowBox[{"lazyList", "[", 
  RowBox[{"start", ",", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"lazyList", "[", 
       RowBox[{"#1", ",", 
        RowBox[{"#0", "[", 
         RowBox[{
          RowBox[{"#2", " ", "#1"}], ",", "#2"}], "]"}]}], "]"}], "&"}], 
     ")"}], "[", 
    RowBox[{
     RowBox[{"r", " ", "start"}], ",", "r"}], "]"}]}], "]"}]], "Output",
 CellLabel->"Out[26]=",ExpressionUUID->"200aa8e2-d0af-46cd-bf0b-01e9ae602f46"],

Cell[BoxData[
 RowBox[{"lazyList", "[", 
  RowBox[{
   RowBox[{"r", " ", "start"}], ",", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"lazyList", "[", 
       RowBox[{"#1", ",", 
        RowBox[{"#0", "[", 
         RowBox[{
          RowBox[{"#2", " ", "#1"}], ",", "#2"}], "]"}]}], "]"}], "&"}], 
     ")"}], "[", 
    RowBox[{
     RowBox[{"r", " ", 
      RowBox[{"(", 
       RowBox[{"r", " ", "start"}], ")"}]}], ",", "r"}], "]"}]}], 
  "]"}]], "Output",
 CellLabel->"Out[27]=",ExpressionUUID->"6ebc66a9-de6d-4c36-bae6-1c505839e75f"]
}, Open  ]],

Cell[TextData[{
 "Nesting Last is not very efficient. Instead, use special functionalities of \
",
 StyleBox["Take",
  FontWeight->"Bold"],
 " and ",
 StyleBox["Part",
  FontWeight->"Bold"],
 " to continuously evaluate the tail of lazy list until the required elements \
have been found. "
}], "Text",ExpressionUUID->"c60618e2-1470-4fc2-98cd-8097bfc68e7d"],

Cell[TextData[{
 StyleBox["Part[lz, n]",
  FontWeight->"Bold"],
 " of a lazyList returns the ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["n", "th"], TraditionalForm]],ExpressionUUID->
  "a2ee4c5a-3790-4c4f-b079-8c24b67948cc"],
 " element, whereas ",
 StyleBox["Part[lz, {n}]",
  FontWeight->"Bold"],
 " returns a lazyList containing the ",
 Cell[BoxData[
  FormBox[
   SuperscriptBox["n", "th"], TraditionalForm]],ExpressionUUID->
  "9e85a72e-cd2e-472d-b039-32d152c5d678"],
 " element and the tail of the lazyList. This allows you to keep extracting \
further elements from the returned lazyList without losing progress. The \
lazyList does not keep track of position for efficiency reasons. This is up \
to the user."
}], "Text",ExpressionUUID->"7f5f6d4d-7f2f-4fb4-958f-2fabd9c6b849"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Part", "[", 
  RowBox[{
   RowBox[{"lazyRange", "[", "]"}], ",", "4"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Part", "[", 
  RowBox[{
   RowBox[{"lazyRange", "[", "]"}], ",", 
   RowBox[{"{", "4", "}"}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Last", "[", "%", "]"}], "\[IndentingNewLine]", 
 RowBox[{"Rest", "[", "%%", "]"}]}], "Input",
 CellLabel->"In[28]:=",ExpressionUUID->"62f4563c-892f-4239-8057-70dc5511ffaf"],

Cell[BoxData["4"], "Output",
 CellLabel->"Out[28]=",ExpressionUUID->"8c516d12-01de-450d-83b4-82c1bb37a74f"],

Cell[BoxData[
 RowBox[{"lazyList", "[", 
  RowBox[{"4", ",", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"lazyList", "[", 
       RowBox[{"#1", ",", 
        RowBox[{"#0", "[", 
         RowBox[{
          RowBox[{"#2", "+", "#1"}], ",", "#2"}], "]"}]}], "]"}], "&"}], 
     ")"}], "[", 
    RowBox[{
     RowBox[{"1", "+", "4"}], ",", "1"}], "]"}]}], "]"}]], "Output",
 CellLabel->"Out[29]=",ExpressionUUID->"5fc560c2-b2d6-45eb-af68-01a5f090a94b"],

Cell[BoxData[
 RowBox[{"lazyList", "[", 
  RowBox[{"5", ",", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"lazyList", "[", 
       RowBox[{"#1", ",", 
        RowBox[{"#0", "[", 
         RowBox[{
          RowBox[{"#2", "+", "#1"}], ",", "#2"}], "]"}]}], "]"}], "&"}], 
     ")"}], "[", 
    RowBox[{
     RowBox[{"1", "+", "5"}], ",", "1"}], "]"}]}], "]"}]], "Output",
 CellLabel->"Out[30]=",ExpressionUUID->"30977ef1-5daa-4c66-bff4-c7e75e424cff"],

Cell[BoxData[
 RowBox[{"lazyList", "[", 
  RowBox[{"5", ",", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"lazyList", "[", 
       RowBox[{"#1", ",", 
        RowBox[{"#0", "[", 
         RowBox[{
          RowBox[{"#2", "+", "#1"}], ",", "#2"}], "]"}]}], "]"}], "&"}], 
     ")"}], "[", 
    RowBox[{
     RowBox[{"1", "+", "5"}], ",", "1"}], "]"}]}], "]"}]], "Output",
 CellLabel->"Out[31]=",ExpressionUUID->"4dc096dd-2ec7-4a9b-b0f6-ab2a92ae249a"]
}, Open  ]],

Cell[TextData[{
 "Multiple indices can be extracted in one go. In this case, the extracted \
elements will go in the first element of the returned lazyList while the tail \
will be left in the state of the highest visited index. ",
 StyleBox["Span",
  FontWeight->"Bold"],
 " is also supported for integers:"
}], "Text",ExpressionUUID->"b80e232f-0514-4341-9156-760672a0e40a"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Part", "[", 
  RowBox[{
   RowBox[{"lazyRange", "[", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"1", ",", "4", ",", " ", "10", ",", " ", "5"}], "}"}]}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"Part", "[", 
  RowBox[{
   RowBox[{"lazyRange", "[", "]"}], ",", 
   RowBox[{"10", ";;", "2", ";;", 
    RowBox[{"-", "2"}]}]}], "]"}]}], "Input",
 CellLabel->"In[32]:=",ExpressionUUID->"34dac2ad-2f9f-4764-b2c2-1e8b2142915d"],

Cell[BoxData[
 RowBox[{"lazyList", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "4", ",", "10", ",", "5"}], "}"}], ",", 
   RowBox[{"lazyList", "[", 
    RowBox[{"10", ",", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"lazyList", "[", 
         RowBox[{"#1", ",", 
          RowBox[{"#0", "[", 
           RowBox[{
            RowBox[{"#2", "+", "#1"}], ",", "#2"}], "]"}]}], "]"}], "&"}], 
       ")"}], "[", 
      RowBox[{
       RowBox[{"1", "+", "10"}], ",", "1"}], "]"}]}], "]"}]}], 
  "]"}]], "Output",
 CellLabel->"Out[32]=",ExpressionUUID->"6bd061bd-8860-4565-9705-2766e6ec65fb"],

Cell[BoxData[
 RowBox[{"lazyList", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"10", ",", "8", ",", "6", ",", "4", ",", "2"}], "}"}], ",", 
   RowBox[{"lazyList", "[", 
    RowBox[{"10", ",", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"lazyList", "[", 
         RowBox[{"#1", ",", 
          RowBox[{"#0", "[", 
           RowBox[{
            RowBox[{"#2", "+", "#1"}], ",", "#2"}], "]"}]}], "]"}], "&"}], 
       ")"}], "[", 
      RowBox[{
       RowBox[{"1", "+", "10"}], ",", "1"}], "]"}]}], "]"}]}], 
  "]"}]], "Output",
 CellLabel->"Out[33]=",ExpressionUUID->"e914da90-42d8-4ab1-85b6-eb796e812142"]
}, Open  ]],

Cell[TextData[{
 StyleBox["lazyPartMap",
  FontWeight->"Bold"],
 " extracts values at particular indices while also retaining the tails at \
those positions:"
}], "Text",ExpressionUUID->"e9468ffe-b246-46a6-82e3-cce5359f2e50"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"lazyPartMap", "[", 
  RowBox[{
   RowBox[{"lazyRange", "[", "]"}], ",", 
   RowBox[{"Range", "[", 
    RowBox[{"2", ",", "22", ",", "4"}], "]"}]}], "]"}]], "Input",
 CellLabel->"In[34]:=",ExpressionUUID->"f1a4df16-3571-403e-9fa6-237293e18a55"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"lazyList", "[", 
    RowBox[{"2", ",", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"lazyList", "[", 
         RowBox[{"#1", ",", 
          RowBox[{"#0", "[", 
           RowBox[{
            RowBox[{"#2", "+", "#1"}], ",", "#2"}], "]"}]}], "]"}], "&"}], 
       ")"}], "[", 
      RowBox[{
       RowBox[{"1", "+", "2"}], ",", "1"}], "]"}]}], "]"}], ",", 
   RowBox[{"lazyList", "[", 
    RowBox[{"6", ",", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"lazyList", "[", 
         RowBox[{"#1", ",", 
          RowBox[{"#0", "[", 
           RowBox[{
            RowBox[{"#2", "+", "#1"}], ",", "#2"}], "]"}]}], "]"}], "&"}], 
       ")"}], "[", 
      RowBox[{
       RowBox[{"1", "+", "6"}], ",", "1"}], "]"}]}], "]"}], ",", 
   RowBox[{"lazyList", "[", 
    RowBox[{"10", ",", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"lazyList", "[", 
         RowBox[{"#1", ",", 
          RowBox[{"#0", "[", 
           RowBox[{
            RowBox[{"#2", "+", "#1"}], ",", "#2"}], "]"}]}], "]"}], "&"}], 
       ")"}], "[", 
      RowBox[{
       RowBox[{"1", "+", "10"}], ",", "1"}], "]"}]}], "]"}], ",", 
   RowBox[{"lazyList", "[", 
    RowBox[{"14", ",", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"lazyList", "[", 
         RowBox[{"#1", ",", 
          RowBox[{"#0", "[", 
           RowBox[{
            RowBox[{"#2", "+", "#1"}], ",", "#2"}], "]"}]}], "]"}], "&"}], 
       ")"}], "[", 
      RowBox[{
       RowBox[{"1", "+", "14"}], ",", "1"}], "]"}]}], "]"}], ",", 
   RowBox[{"lazyList", "[", 
    RowBox[{"18", ",", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"lazyList", "[", 
         RowBox[{"#1", ",", 
          RowBox[{"#0", "[", 
           RowBox[{
            RowBox[{"#2", "+", "#1"}], ",", "#2"}], "]"}]}], "]"}], "&"}], 
       ")"}], "[", 
      RowBox[{
       RowBox[{"1", "+", "18"}], ",", "1"}], "]"}]}], "]"}], ",", 
   RowBox[{"lazyList", "[", 
    RowBox[{"22", ",", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"lazyList", "[", 
         RowBox[{"#1", ",", 
          RowBox[{"#0", "[", 
           RowBox[{
            RowBox[{"#2", "+", "#1"}], ",", "#2"}], "]"}]}], "]"}], "&"}], 
       ")"}], "[", 
      RowBox[{
       RowBox[{"1", "+", "22"}], ",", "1"}], "]"}]}], "]"}]}], 
  "}"}]], "Output",
 CellLabel->"Out[34]=",ExpressionUUID->"58dc4939-8cad-42cd-944a-d18de74d5fe1"]
}, Open  ]],

Cell["\<\
Attempting to extract a part that doesn\[CloseCurlyQuote]t exist from a \
finite lazyList will yield a message and return $Failed:\
\>", "Text",ExpressionUUID->"3989a517-8b84-4212-9e72-43c697532a27"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"lz", " ", "=", " ", 
   RowBox[{"lazyList", "[", 
    RowBox[{"Range", "[", "4", "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"lz", "[", 
  RowBox[{"[", "5", "]"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"lz", "[", 
  RowBox[{"[", 
   RowBox[{"{", "5", "}"}], "]"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"lz", "[", 
  RowBox[{"[", 
   RowBox[{"{", 
    RowBox[{"2", ",", "5"}], "}"}], "]"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"lz", "[", 
  RowBox[{"[", 
   RowBox[{"2", ";;", "5"}], "]"}], "]"}]}], "Input",
 CellLabel->"In[35]:=",ExpressionUUID->"32163113-6f5c-4fd9-8bf8-56f7acf65b56"],

Cell[BoxData[
 TemplateBox[{
  "Part","partw",
   "\"Part \\!\\(\\*RowBox[{\\\"5\\\"}]\\) of \\!\\(\\*RowBox[{\\\"lazyList\\\
\", \\\"[\\\", RowBox[{\\\"1\\\", \\\",\\\", \
RowBox[{\\\"lazyLists`Private`lazyFiniteList\\\", \\\"[\\\", RowBox[{RowBox[{\
\\\"\[LeftSkeleton]\\\", \\\"31\\\", \\\"\[RightSkeleton]\\\"}], \\\",\\\", \
RowBox[{\\\"1\\\", \\\"+\\\", \\\"1\\\"}]}], \\\"]\\\"}]}], \\\"]\\\"}]\\) \
does not exist.\"",2,36,1,16512682316897481868,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellLabel->
  "During evaluation of \
In[35]:=",ExpressionUUID->"c6b6ec57-70eb-4a9f-a797-3544d9858b04"],

Cell[BoxData["$Failed"], "Output",
 CellLabel->"Out[36]=",ExpressionUUID->"83c119b9-c34a-4af3-94c8-60a3d20f270b"],

Cell[BoxData[
 TemplateBox[{
  "Part","partw",
   "\"Part \\!\\(\\*RowBox[{\\\"5\\\"}]\\) of \\!\\(\\*RowBox[{\\\"lazyList\\\
\", \\\"[\\\", RowBox[{\\\"1\\\", \\\",\\\", \
RowBox[{\\\"lazyLists`Private`lazyFiniteList\\\", \\\"[\\\", RowBox[{RowBox[{\
\\\"\[LeftSkeleton]\\\", \\\"31\\\", \\\"\[RightSkeleton]\\\"}], \\\",\\\", \
RowBox[{\\\"1\\\", \\\"+\\\", \\\"1\\\"}]}], \\\"]\\\"}]}], \\\"]\\\"}]\\) \
does not exist.\"",2,37,2,16512682316897481868,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellLabel->
  "During evaluation of \
In[35]:=",ExpressionUUID->"6a7ff2d9-f1ca-412c-9a16-9f07bc4467fc"],

Cell[BoxData["$Failed"], "Output",
 CellLabel->"Out[37]=",ExpressionUUID->"2d6a8fdf-74e7-4b58-a1ee-61cb96c26c52"],

Cell[BoxData[
 TemplateBox[{
  "Part","partw",
   "\"Part \\!\\(\\*RowBox[{\\\"4\\\"}]\\) of \\!\\(\\*RowBox[{\\\"lazyList\\\
\", \\\"[\\\", RowBox[{\\\"2\\\", \\\",\\\", \
RowBox[{\\\"lazyLists`Private`lazyFiniteList\\\", \\\"[\\\", RowBox[{RowBox[{\
\\\"\[LeftSkeleton]\\\", \\\"31\\\", \\\"\[RightSkeleton]\\\"}], \\\",\\\", \
RowBox[{\\\"2\\\", \\\"+\\\", \\\"1\\\"}]}], \\\"]\\\"}]}], \\\"]\\\"}]\\) \
does not exist.\"",2,38,3,16512682316897481868,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellLabel->
  "During evaluation of \
In[35]:=",ExpressionUUID->"a9c7abdc-0ca2-4d48-a65f-c42dac34c775"],

Cell[BoxData["$Failed"], "Output",
 CellLabel->"Out[38]=",ExpressionUUID->"bf5187f6-1800-409a-b1f0-00e45b5b5377"],

Cell[BoxData[
 TemplateBox[{
  "Part","partw",
   "\"Part \\!\\(\\*RowBox[{\\\"5\\\"}]\\) of \\!\\(\\*RowBox[{\\\"lazyList\\\
\", \\\"[\\\", RowBox[{\\\"1\\\", \\\",\\\", \
RowBox[{\\\"lazyLists`Private`lazyFiniteList\\\", \\\"[\\\", RowBox[{RowBox[{\
\\\"\[LeftSkeleton]\\\", \\\"31\\\", \\\"\[RightSkeleton]\\\"}], \\\",\\\", \
RowBox[{\\\"1\\\", \\\"+\\\", \\\"1\\\"}]}], \\\"]\\\"}]}], \\\"]\\\"}]\\) \
does not exist.\"",2,39,4,16512682316897481868,"Local"},
  "MessageTemplate"]], "Message", "MSG",
 CellLabel->
  "During evaluation of \
In[35]:=",ExpressionUUID->"c4b18ca2-86fb-483e-888e-b9711aecada7"],

Cell[BoxData["$Failed"], "Output",
 CellLabel->"Out[39]=",ExpressionUUID->"8e1fa288-f4f4-4e2b-91c5-da8ef1581e32"]
}, Open  ]],

Cell[TextData[{
 StyleBox["Take",
  FontWeight->"Bold"],
 " of lazyList returns lazyList. The first element is a list of the extracted \
elements. The tail is a lazyList at the point where take stopped. Note that \
there will be an overlap of 1 if you continue extracting elements form the \
returned lazyList (this is necessary to avoid unnecessary evaluations of \
elements)."
}], "Text",ExpressionUUID->"66aa0271-c1d7-444e-bd61-b1bc2b426edf"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"list", "=", 
   RowBox[{"Take", "[", 
    RowBox[{
     RowBox[{"lazyRange", "[", "]"}], ",", "4"}], "]"}]}], 
  ";"}], "\[IndentingNewLine]", 
 RowBox[{"First", "[", "list", "]"}], "\[IndentingNewLine]", 
 RowBox[{"Last", "[", "list", "]"}], "\[IndentingNewLine]", 
 RowBox[{"Take", "[", 
  RowBox[{
   RowBox[{"Last", "[", "list", "]"}], ",", "5"}], "]"}]}], "Input",
 CellLabel->"In[40]:=",ExpressionUUID->"0deb31ae-48a0-4c10-b1c5-60e740712aa2"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}]], "Output",
 CellLabel->"Out[41]=",ExpressionUUID->"866800cf-fbd7-4929-b29b-bfce0878419c"],

Cell[BoxData[
 RowBox[{"lazyList", "[", 
  RowBox[{"4", ",", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"lazyList", "[", 
       RowBox[{"#1", ",", 
        RowBox[{"#0", "[", 
         RowBox[{
          RowBox[{"#2", "+", "#1"}], ",", "#2"}], "]"}]}], "]"}], "&"}], 
     ")"}], "[", 
    RowBox[{
     RowBox[{"1", "+", "4"}], ",", "1"}], "]"}]}], "]"}]], "Output",
 CellLabel->"Out[42]=",ExpressionUUID->"9ada504f-b540-4803-8da5-490d5f2711b5"],

Cell[BoxData[
 RowBox[{"lazyList", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"4", ",", "5", ",", "6", ",", "7", ",", "8"}], "}"}], ",", 
   RowBox[{"lazyList", "[", 
    RowBox[{"8", ",", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"lazyList", "[", 
         RowBox[{"#1", ",", 
          RowBox[{"#0", "[", 
           RowBox[{
            RowBox[{"#2", "+", "#1"}], ",", "#2"}], "]"}]}], "]"}], "&"}], 
       ")"}], "[", 
      RowBox[{
       RowBox[{"1", "+", "8"}], ",", "1"}], "]"}]}], "]"}]}], "]"}]], "Output",
 CellLabel->"Out[43]=",ExpressionUUID->"decbf3f0-c3cd-4c91-938c-8df7a1fbb925"]
}, Open  ]],

Cell["It is possible to specify a lower and upper index for Take:", \
"Text",ExpressionUUID->"8a0ddc07-8ca8-415e-9861-4912dc4f0514"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Take", "[", 
  RowBox[{
   RowBox[{"lazyRange", "[", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "10"}], "}"}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Take", "[", 
  RowBox[{
   RowBox[{"lazyRange", "[", "]"}], ",", 
   RowBox[{"{", 
    RowBox[{"10", ",", "5"}], "}"}]}], "]"}]}], "Input",
 CellLabel->"In[44]:=",ExpressionUUID->"65961842-2921-4b5c-bbac-e02cfc7d40ba"],

Cell[BoxData[
 RowBox[{"lazyList", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"5", ",", "6", ",", "7", ",", "8", ",", "9", ",", "10"}], "}"}], 
   ",", 
   RowBox[{"lazyList", "[", 
    RowBox[{"10", ",", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"lazyList", "[", 
         RowBox[{"#1", ",", 
          RowBox[{"#0", "[", 
           RowBox[{
            RowBox[{"#2", "+", "#1"}], ",", "#2"}], "]"}]}], "]"}], "&"}], 
       ")"}], "[", 
      RowBox[{
       RowBox[{"1", "+", "10"}], ",", "1"}], "]"}]}], "]"}]}], 
  "]"}]], "Output",
 CellLabel->"Out[44]=",ExpressionUUID->"670df63e-c567-4695-bc48-85578ffaabbd"],

Cell[BoxData[
 RowBox[{"lazyList", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"10", ",", "9", ",", "8", ",", "7", ",", "6", ",", "5"}], "}"}], 
   ",", 
   RowBox[{"lazyList", "[", 
    RowBox[{"10", ",", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"lazyList", "[", 
         RowBox[{"#1", ",", 
          RowBox[{"#0", "[", 
           RowBox[{
            RowBox[{"#2", "+", "#1"}], ",", "#2"}], "]"}]}], "]"}], "&"}], 
       ")"}], "[", 
      RowBox[{
       RowBox[{"1", "+", "10"}], ",", "1"}], "]"}]}], "]"}]}], 
  "]"}]], "Output",
 CellLabel->"Out[45]=",ExpressionUUID->"96d33746-48a5-4649-be06-82db1f764398"]
}, Open  ]],

Cell["\<\
Take will not issue a message if indices are requested beyond the length of \
the lazyList:\
\>", "Text",ExpressionUUID->"54f32590-2da2-49e5-b01e-8657a6c320f2"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Take", "[", 
  RowBox[{"lz", ",", "5"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Take", "[", 
  RowBox[{"lz", ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "5"}], "}"}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Take", "[", 
  RowBox[{"lz", ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "10"}], "}"}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Take", "[", 
  RowBox[{"lz", ",", 
   RowBox[{"{", 
    RowBox[{"10", ",", "3"}], "}"}]}], "]"}]}], "Input",
 CellLabel->"In[46]:=",ExpressionUUID->"ab6d13e6-fbcc-488f-9ed1-1029e38d203f"],

Cell[BoxData[
 RowBox[{"lazyList", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "2", ",", "3", ",", "4"}], "}"}], ",", 
   RowBox[{"lazyList", "[", "]"}]}], "]"}]], "Output",
 CellLabel->"Out[46]=",ExpressionUUID->"c0a5227c-3c65-424c-ae49-517f361e037b"],

Cell[BoxData[
 RowBox[{"lazyList", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"3", ",", "4"}], "}"}], ",", 
   RowBox[{"lazyList", "[", "]"}]}], "]"}]], "Output",
 CellLabel->"Out[47]=",ExpressionUUID->"0123b798-09ea-4996-a696-aaad68c0cadf"],

Cell[BoxData[
 RowBox[{"lazyList", "[", "]"}]], "Output",
 CellLabel->"Out[48]=",ExpressionUUID->"cfa4a3ec-8b78-4667-a1e5-b29bbfcc49b8"],

Cell[BoxData[
 RowBox[{"lazyList", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"4", ",", "3"}], "}"}], ",", 
   RowBox[{"lazyList", "[", "]"}]}], "]"}]], "Output",
 CellLabel->"Out[49]=",ExpressionUUID->"c04920cd-7e0b-4863-807e-5ef65576608f"]
}, Open  ]],

Cell[TextData[{
 StyleBox["TakeWhile",
  FontWeight->"Bold"],
 " also works with lazyLists. Note that the tail of the returned lazyList \
contains the first element that didn\[CloseCurlyQuote]t pass the test:"
}], "Text",ExpressionUUID->"d9a560d3-261a-4f9c-bb6c-955eabdcb76c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"TakeWhile", "[", 
  RowBox[{
   RowBox[{"lazyPowerRange", "[", 
    RowBox[{"2", ",", "2"}], "]"}], ",", 
   RowBox[{
    RowBox[{"#", "<", "100"}], "&"}]}], "]"}]], "Input",
 CellLabel->"In[50]:=",ExpressionUUID->"81c528c1-fbff-4d04-adb4-9a8335001936"],

Cell[BoxData[
 RowBox[{"lazyList", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"2", ",", "4", ",", "8", ",", "16", ",", "32", ",", "64"}], "}"}],
    ",", 
   RowBox[{"lazyList", "[", 
    RowBox[{"128", ",", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"lazyList", "[", 
         RowBox[{"#1", ",", 
          RowBox[{"#0", "[", 
           RowBox[{
            RowBox[{"#2", " ", "#1"}], ",", "#2"}], "]"}]}], "]"}], "&"}], 
       ")"}], "[", 
      RowBox[{
       RowBox[{"2", " ", "128"}], ",", "2"}], "]"}]}], "]"}]}], 
  "]"}]], "Output",
 CellLabel->"Out[50]=",ExpressionUUID->"197ebfdb-c8f8-4e06-b4ce-9e5ed3c5b4bd"]
}, Open  ]],

Cell["\<\
Normal lists can be converted into lazyLists by wrapping lazyList around \
them. The list is stored in a variable and is streamed element-by-element:\
\>", "Text",ExpressionUUID->"115e41b9-6140-442b-806c-1dc1bda77a77"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"First", "@", 
  RowBox[{"Take", "[", 
   RowBox[{
    RowBox[{"lazyList", "[", 
     RowBox[{"Fibonacci", "[", 
      RowBox[{"Range", "[", "10", "]"}], "]"}], "]"}], ",", "5"}], 
   "]"}]}]], "Input",
 CellLabel->"In[51]:=",ExpressionUUID->"a71ae506-2558-4576-96a7-cd81d08eff10"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "1", ",", "2", ",", "3", ",", "5"}], "}"}]], "Output",
 CellLabel->"Out[51]=",ExpressionUUID->"83967e8c-3dff-4848-b0ca-3900820b09be"]
}, Open  ]],

Cell["\<\
It is also possible to turn a symbol that refers to a list into a lazyList by \
wrapping Hold around it:\
\>", "Text",ExpressionUUID->"49cab4cf-9bc5-40f6-b882-1a4b1090df44"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"list", "=", 
   RowBox[{"Fibonacci", "[", 
    RowBox[{"Range", "[", "10", "]"}], "]"}]}], ";"}], "\[IndentingNewLine]", 
 RowBox[{"finiteLz", "=", 
  RowBox[{"lazyList", "[", 
   RowBox[{"Hold", "[", "list", "]"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"First", "@", 
  RowBox[{"Take", "[", 
   RowBox[{"finiteLz", ",", "5"}], "]"}]}]}], "Input",
 CellLabel->"In[52]:=",ExpressionUUID->"ddb15fbb-3cb6-4cd4-933f-c1f27036e5d5"],

Cell[BoxData[
 RowBox[{"lazyList", "[", 
  RowBox[{"1", ",", 
   RowBox[{"lazyLists`Private`lazyFiniteList", "[", 
    RowBox[{"list", ",", 
     RowBox[{"1", "+", "1"}]}], "]"}]}], "]"}]], "Output",
 CellLabel->"Out[53]=",ExpressionUUID->"1e3fb9f0-8773-4a07-a4fa-e7a5639e0738"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "1", ",", "2", ",", "3", ",", "5"}], "}"}]], "Output",
 CellLabel->"Out[54]=",ExpressionUUID->"33029926-dfa4-4cc6-9b2f-7f742f25305c"]
}, Open  ]],

Cell[TextData[{
 StyleBox["lazyFinitePart",
  FontWeight->"Bold"],
 " and ",
 StyleBox["lazyFiniteTake",
  FontWeight->"Bold"],
 " can be used to extract parts from lazyLists directly from the underlying \
symbol without having to traverse the lazyList:"
}], "Text",ExpressionUUID->"faf5e77f-060d-427c-a054-f7015d144306"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"lazyFinitePart", "[", 
   RowBox[{"finiteLz", ",", "4"}], "]"}], " ", "===", " ", 
  RowBox[{"Part", "[", 
   RowBox[{"list", ",", "4"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{
  RowBox[{"lazyFiniteTake", "[", 
   RowBox[{"finiteLz", ",", 
    RowBox[{"{", 
     RowBox[{"2", ",", "4"}], "}"}]}], "]"}], "===", 
  RowBox[{"Take", "[", 
   RowBox[{"list", ",", 
    RowBox[{"{", 
     RowBox[{"2", ",", "4"}], "}"}]}], "]"}]}]}], "Input",
 CellLabel->"In[55]:=",ExpressionUUID->"1e24ba46-7d8b-4e06-87a9-4207f4abd148"],

Cell[BoxData["True"], "Output",
 CellLabel->"Out[55]=",ExpressionUUID->"b9c4d59b-bc70-4c1f-b645-625e3faf0b88"],

Cell[BoxData["True"], "Output",
 CellLabel->"Out[56]=",ExpressionUUID->"c82f8ea7-e3d6-4545-be64-f34b2f3f5c28"]
}, Open  ]],

Cell[TextData[{
 StyleBox["lazySetState",
  FontWeight->"Bold"],
 " can be used to directly move a finite lazyList to a given index without \
traversing. Also supports going to the last index directly:"
}], "Text",ExpressionUUID->"804de8df-4c8c-44d9-9302-8e8e55b8935d"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"lazySetState", "[", 
  RowBox[{"finiteLz", ",", 
   RowBox[{"-", "1"}]}], "]"}]], "Input",
 CellLabel->"In[57]:=",ExpressionUUID->"823d9361-a12a-41f0-94a7-227f8178948c"],

Cell[BoxData[
 RowBox[{"lazyList", "[", 
  RowBox[{"55", ",", 
   RowBox[{"lazyLists`Private`lazyFiniteList", "[", 
    RowBox[{"list", ",", 
     RowBox[{"10", "+", "1"}]}], "]"}]}], "]"}]], "Output",
 CellLabel->"Out[57]=",ExpressionUUID->"7866602a-a7ff-4ce4-9f2f-5d447abdefa4"]
}, Open  ]],

Cell[TextData[{
 "lazyLists can be transposed with ",
 StyleBox["lazyTranspose",
  FontWeight->"Bold"],
 ":"
}], "Text",ExpressionUUID->"c76a374a-4a99-4e7e-89a6-b031331f12d0"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"First", "@", 
  RowBox[{"Take", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"lazyTranspose", "[", "\[IndentingNewLine]", 
     RowBox[{"{", 
      RowBox[{
       RowBox[{"lazyRange", "[", "]"}], ",", 
       RowBox[{"lazyConstantArray", "[", "0", "]"}]}], "}"}], 
     "\[IndentingNewLine]", "]"}], ",", "\[IndentingNewLine]", "5"}], 
   "\[IndentingNewLine]", "]"}]}]], "Input",
 CellLabel->"In[58]:=",ExpressionUUID->"01271068-9a2f-4f9f-bdc4-c0b467f0c7b9"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "0"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "0"}], "}"}]}], "}"}]], "Output",
 CellLabel->"Out[58]=",ExpressionUUID->"df5b51fe-0a15-4562-ac58-438196771850"]
}, Open  ]],

Cell[CellGroupData[{

Cell["Lazy generator", \
"Subsubsection",ExpressionUUID->"26898ac6-d54e-450a-a936-857ee5fc5b92"],

Cell[TextData[{
 StyleBox["lazyGenerator",
  FontWeight->"Bold"],
 " is used to generate lazyLists from a generating function in much the same \
way as Table. It has 5 arguments: ",
 Cell[BoxData[
  FormBox[
   RowBox[{"lazyGenerator", "[", 
    RowBox[{
    "fun", ",", " ", "start", ",", " ", "min", ",", " ", "max", ",", " ", 
     "step"}], "]"}], TraditionalForm]],ExpressionUUID->
  "4d0fa8ac-3001-48d3-90e0-697b8ca3e5a3"]
}], "Text",ExpressionUUID->"091a7650-9a36-4c83-987b-e4b754a39857"],

Cell[CellGroupData[{

Cell[TextData[{
 Cell[BoxData[
  FormBox["fun", TraditionalForm]],ExpressionUUID->
  "0224669c-b117-4ae9-b79e-00a105d14d99"],
 " the generating function"
}], "Item",ExpressionUUID->"127b423b-e334-4122-8740-ad04296ed7c5"],

Cell[TextData[{
 Cell[BoxData[
  FormBox["start", TraditionalForm]],ExpressionUUID->
  "03d24386-0c6c-4a65-8c91-4cb9f816d482"],
 " the starting value to apply the function to. Defaults to 1"
}], "Item",ExpressionUUID->"28bd2c1a-daa5-4650-a0b8-ee46a1046a75"],

Cell[TextData[{
 Cell[BoxData[
  FormBox[
   RowBox[{"min", ",", " ", "max"}], TraditionalForm]],ExpressionUUID->
  "7ef99663-e50a-454e-8161-f090c09e8f65"],
 " The minimum values fun can be applied to. Default to ",
 Cell[BoxData[
  FormBox[
   RowBox[{"-", "\[Infinity]"}], TraditionalForm]],ExpressionUUID->
  "7d85d512-abf4-4551-aa9e-950b8128004d"],
 " and ",
 Cell[BoxData[
  FormBox[
   RowBox[{"+", "\[Infinity]"}], TraditionalForm]],ExpressionUUID->
  "21231119-7098-4895-b137-49b3daa5ccb4"]
}], "Item",ExpressionUUID->"507dfb61-60fe-4375-94ae-bbda9b21f2cd"],

Cell[TextData[{
 Cell[BoxData[
  FormBox["step", TraditionalForm]],ExpressionUUID->
  "dc5325ce-8947-4333-9383-014dd4cbe392"],
 " the step size with which to increase the iterator of the table after each \
step. Defaults to 1"
}], "Item",ExpressionUUID->"a64d6517-5c3f-4592-88c7-50f1c70777c8"]
}, Open  ]],

Cell["\<\
The simplest form of lazyGenerator just specifies the function:\
\>", "Text",ExpressionUUID->"bd0674b1-8f96-4da1-9da1-6a8c201faba7"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"infiniteInBothDirections", " ", "=", " ", 
  RowBox[{"lazyGenerator", "[", "f", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"First", "@", 
  RowBox[{"Take", "[", 
   RowBox[{"infiniteInBothDirections", ",", "5"}], "]"}]}]}], "Input",
 CellLabel->"In[59]:=",ExpressionUUID->"cdb0de3c-6d7d-45d4-b18d-c463f687a508"],

Cell[BoxData[
 RowBox[{"lazyList", "[", 
  RowBox[{
   RowBox[{"f", "[", "1", "]"}], ",", 
   RowBox[{"lazyLists`Private`twoSidedGenerator", "[", 
    RowBox[{"f", ",", 
     RowBox[{"1", "+", "1"}], ",", "1"}], "]"}]}], "]"}]], "Output",
 CellLabel->"Out[59]=",ExpressionUUID->"1dac0f45-952a-4ee0-98e8-bd81735969f2"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"f", "[", "1", "]"}], ",", 
   RowBox[{"f", "[", "2", "]"}], ",", 
   RowBox[{"f", "[", "3", "]"}], ",", 
   RowBox[{"f", "[", "4", "]"}], ",", 
   RowBox[{"f", "[", "5", "]"}]}], "}"}]], "Output",
 CellLabel->"Out[60]=",ExpressionUUID->"fc44b943-807b-41df-be01-f2987dfa0f02"]
}, Open  ]],

Cell["\<\
If the min and max limits are infinite, you can do symbolic steps:\
\>", "Text",ExpressionUUID->"2ee55deb-c936-404c-9dfc-eb155afb151a"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"symbolicGenerator", " ", "=", " ", 
  RowBox[{"lazyGenerator", "[", 
   RowBox[{"f", ",", " ", "start", ",", " ", 
    RowBox[{"-", "\[Infinity]"}], ",", "\[Infinity]", ",", "step"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"First", "@", 
  RowBox[{"Take", "[", 
   RowBox[{"symbolicGenerator", ",", " ", "5"}], "]"}]}]}], "Input",
 CellLabel->"In[61]:=",ExpressionUUID->"1fa6793f-bf16-4356-b0a4-72b0956494dc"],

Cell[BoxData[
 RowBox[{"lazyList", "[", 
  RowBox[{
   RowBox[{"f", "[", "start", "]"}], ",", 
   RowBox[{"lazyLists`Private`twoSidedGenerator", "[", 
    RowBox[{"f", ",", 
     RowBox[{"start", "+", "step"}], ",", "step"}], "]"}]}], "]"}]], "Output",
 CellLabel->"Out[61]=",ExpressionUUID->"257b1f3f-4d86-4340-9a27-172e3d5ff111"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"f", "[", "start", "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"start", "+", "step"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"start", "+", 
     RowBox[{"2", " ", "step"}]}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"start", "+", 
     RowBox[{"3", " ", "step"}]}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"start", "+", 
     RowBox[{"4", " ", "step"}]}], "]"}]}], "}"}]], "Output",
 CellLabel->"Out[62]=",ExpressionUUID->"d20d8453-c624-40da-89c5-4a8734f4a795"]
}, Open  ]],

Cell["\<\
If limits are specified, the start and step have to be numeric. Take will \
automatically stop when a limit is reached:\
\>", "Text",ExpressionUUID->"ec412910-8086-4f94-8383-07ef4488ff6c"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"First", "@", 
  RowBox[{"Take", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"lazyGenerator", "[", 
     RowBox[{"f", ",", " ", "2", ",", " ", "1", ",", "10", ",", "2"}], "]"}], 
    ",", "\[IndentingNewLine]", "50"}], "\[IndentingNewLine]", 
   "]"}]}]], "Input",
 CellLabel->"In[63]:=",ExpressionUUID->"5f275465-d56b-4871-b8e1-19eda807544d"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"f", "[", "2", "]"}], ",", 
   RowBox[{"f", "[", "4", "]"}], ",", 
   RowBox[{"f", "[", "6", "]"}], ",", 
   RowBox[{"f", "[", "8", "]"}], ",", 
   RowBox[{"f", "[", "10", "]"}]}], "}"}]], "Output",
 CellLabel->"Out[63]=",ExpressionUUID->"acc453fc-0085-43db-a492-52ae8349a000"]
}, Open  ]],

Cell[TextData[{
 StyleBox["lazySetState",
  FontWeight->"Bold"],
 " can be used with lazyGenerator lists. It override the current position of \
the generator and reset it to the given value. Notice that this means that \
this can create a completely different generator if it is set to a value the \
original would never visit. The step size and min/max values are retained:"
}], "Text",ExpressionUUID->"1e034299-8ca5-4d23-a766-3a7fb63544ce"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"l", " ", "=", " ", 
  RowBox[{"Take", "[", 
   RowBox[{
    RowBox[{"lazyGenerator", "[", 
     RowBox[{"f", ",", " ", "2", ",", " ", "1", ",", "10", ",", "2"}], "]"}], 
    ",", "3"}], "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"Take", "[", "\[IndentingNewLine]", 
  RowBox[{
   RowBox[{"lazySetState", "[", 
    RowBox[{
     RowBox[{"Last", "[", "l", "]"}], ",", "3"}], "]"}], ",", 
   "\[IndentingNewLine]", "3"}], "\[IndentingNewLine]", "]"}]}], "Input",
 CellLabel->"In[64]:=",ExpressionUUID->"cd734a99-8091-4dc1-8e3e-b6f7adc74e54"],

Cell[BoxData[
 RowBox[{"lazyList", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"f", "[", "2", "]"}], ",", 
     RowBox[{"f", "[", "4", "]"}], ",", 
     RowBox[{"f", "[", "6", "]"}]}], "}"}], ",", 
   RowBox[{"lazyList", "[", 
    RowBox[{
     RowBox[{"f", "[", "6", "]"}], ",", 
     RowBox[{"lazyLists`Private`finiteGenerator", "[", 
      RowBox[{"f", ",", 
       RowBox[{"6", "+", "2"}], ",", "1", ",", "10", ",", "2"}], "]"}]}], 
    "]"}]}], "]"}]], "Output",
 CellLabel->"Out[64]=",ExpressionUUID->"e696203f-51eb-42d0-acbb-fe7e687db246"],

Cell[BoxData[
 RowBox[{"lazyList", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
     RowBox[{"f", "[", "3", "]"}], ",", 
     RowBox[{"f", "[", "5", "]"}], ",", 
     RowBox[{"f", "[", "7", "]"}]}], "}"}], ",", 
   RowBox[{"lazyList", "[", 
    RowBox[{
     RowBox[{"f", "[", "7", "]"}], ",", 
     RowBox[{"lazyLists`Private`finiteGenerator", "[", 
      RowBox[{"f", ",", 
       RowBox[{"7", "+", "2"}], ",", "1", ",", "10", ",", "2"}], "]"}]}], 
    "]"}]}], "]"}]], "Output",
 CellLabel->"Out[65]=",ExpressionUUID->"65404ba1-1ce0-4e1a-92f3-b3b8aa294f38"]
}, Open  ]],

Cell["\<\
This also works with lazyRange, lazyPowerRange, and lazyNestList. \
lazySetState effectively re-creates these lists with a new starting value:\
\>", "Text",ExpressionUUID->"75e339ce-7d36-4821-a9c4-78a0c90eccd1"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"lazySetState", "[", 
  RowBox[{
   RowBox[{"lazyRange", "[", 
    RowBox[{"start", ",", " ", "step"}], "]"}], ",", "newStart"}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"lazySetState", "[", 
  RowBox[{
   RowBox[{"lazyPowerRange", "[", 
    RowBox[{"start", ",", "r"}], "]"}], ",", "newStart"}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"lazySetState", "[", 
  RowBox[{
   RowBox[{"lazyNestList", "[", 
    RowBox[{"f", ",", "start"}], "]"}], ",", "newStart"}], "]"}]}], "Input",
 CellLabel->"In[66]:=",ExpressionUUID->"49d0ed21-a0e9-422e-975e-ec265be2c6ac"],

Cell[BoxData[
 RowBox[{"lazyList", "[", 
  RowBox[{"newStart", ",", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"lazyList", "[", 
       RowBox[{"#1", ",", 
        RowBox[{"#0", "[", 
         RowBox[{
          RowBox[{"#2", "+", "#1"}], ",", "#2"}], "]"}]}], "]"}], "&"}], 
     ")"}], "[", 
    RowBox[{
     RowBox[{"step", "+", "newStart"}], ",", "step"}], "]"}]}], 
  "]"}]], "Output",
 CellLabel->"Out[66]=",ExpressionUUID->"dc6fbef6-2795-48d8-ba44-835846355643"],

Cell[BoxData[
 RowBox[{"lazyList", "[", 
  RowBox[{"newStart", ",", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"lazyList", "[", 
       RowBox[{"#1", ",", 
        RowBox[{"#0", "[", 
         RowBox[{
          RowBox[{"#2", " ", "#1"}], ",", "#2"}], "]"}]}], "]"}], "&"}], 
     ")"}], "[", 
    RowBox[{
     RowBox[{"r", " ", "newStart"}], ",", "r"}], "]"}]}], "]"}]], "Output",
 CellLabel->"Out[67]=",ExpressionUUID->"566b83cb-7068-4da9-95f9-27d8ebd9ed11"],

Cell[BoxData[
 RowBox[{"lazyList", "[", 
  RowBox[{"newStart", ",", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"lazyList", "[", 
       RowBox[{"#1", ",", 
        RowBox[{"#0", "[", 
         RowBox[{
          RowBox[{"f", "[", "#1", "]"}], ",", 
          RowBox[{"#2", "+", "1"}]}], "]"}]}], "]"}], "&"}], ")"}], "[", 
    RowBox[{
     RowBox[{"f", "[", "newStart", "]"}], ",", 
     RowBox[{"2", "+", "1"}]}], "]"}]}], "]"}]], "Output",
 CellLabel->"Out[68]=",ExpressionUUID->"a291f9b2-b60c-44c1-a9e0-6c929b687ea8"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Lazy file streams", \
"Subsubsection",ExpressionUUID->"6d9500cf-eaaf-4ac9-97d8-236f0b90d0fa"],

Cell["lazyLists can be used with InputStreams. First make a file:", \
"Text",ExpressionUUID->"f082c183-c495-4435-9420-7573f759251c"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{
  RowBox[{"stmp", "=", 
   RowBox[{"OpenWrite", "[", "\"\<tmp\>\"", "]"}]}], ";"}], "\n", 
 RowBox[{"Write", "[", 
  RowBox[{"stmp", ",", "a", ",", "b", ",", "c"}], "]"}], "\n", 
 RowBox[{"Write", "[", 
  RowBox[{"stmp", ",", "x"}], "]"}], "\n", 
 RowBox[{"Write", "[", 
  RowBox[{"stmp", ",", "\"\<Hello\>\""}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Write", "[", 
  RowBox[{"stmp", ",", "\"\<Hello\>\""}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Write", "[", 
  RowBox[{"stmp", ",", "\"\<Hello\>\""}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"Close", "[", "stmp", "]"}]}], "Input",
 CellLabel->"In[69]:=",
 CellID->28621,ExpressionUUID->"56e7c7ce-37ef-4877-9931-7dd9f3a12e91"],

Cell[BoxData["\<\"tmp\"\>"], "Output",
 CellLabel->"Out[75]=",ExpressionUUID->"4cddd274-59fc-4bb2-85c6-58038b93d9ee"]
}, Open  ]],

Cell["Open a reading stream and make a lazyList out of it:", \
"Text",ExpressionUUID->"a3290700-5172-4544-bd8e-a4ce7202ecbb"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Module", "[", 
  RowBox[{
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"stream", "=", 
      RowBox[{"OpenRead", "[", "\"\<tmp\>\"", "]"}]}], ",", 
     "\[IndentingNewLine]", "result"}], "\[IndentingNewLine]", "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"result", "=", 
     RowBox[{"First", "@", 
      RowBox[{"Take", "[", 
       RowBox[{
        RowBox[{"lazyStream", "[", "stream", "]"}], ",", "3"}], "]"}]}]}], 
    ";", "\[IndentingNewLine]", 
    RowBox[{"Close", "[", "stream", "]"}], ";", "\[IndentingNewLine]", 
    "result"}]}], "\[IndentingNewLine]", "]"}]], "Input",
 CellLabel->"In[76]:=",ExpressionUUID->"397a2c85-f736-4613-8c9b-d8a642960c89"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"abc", ",", "x", ",", "\<\"Hello\"\>"}], "}"}]], "Output",
 CellLabel->"Out[76]=",ExpressionUUID->"c1264f2d-e1df-4825-b71b-74cc1008b1c7"]
}, Open  ]],

Cell["\<\
The stream will cut out automatically when it reaches the end of the file:\
\>", "Text",ExpressionUUID->"57ec74de-bf80-4038-9fb8-21b16a056923"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"Module", "[", 
  RowBox[{
   RowBox[{"{", "\[IndentingNewLine]", 
    RowBox[{
     RowBox[{"stream", "=", 
      RowBox[{"OpenRead", "[", "\"\<tmp\>\"", "]"}]}], ",", 
     "\[IndentingNewLine]", "result"}], "\[IndentingNewLine]", "}"}], ",", 
   "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"result", "=", 
     RowBox[{"First", "@", 
      RowBox[{"TakeWhile", "[", 
       RowBox[{
        RowBox[{"lazyStream", "[", "stream", "]"}], ",", 
        RowBox[{"True", "&"}]}], "]"}]}]}], ";", "\[IndentingNewLine]", 
    RowBox[{"Close", "[", "stream", "]"}], ";", "\[IndentingNewLine]", 
    "result"}]}], "\[IndentingNewLine]", "]"}]], "Input",
 CellLabel->"In[77]:=",ExpressionUUID->"71fdd96b-ab00-400c-a4be-632c2ee366b4"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
  "abc", ",", "x", ",", "\<\"Hello\"\>", ",", "\<\"Hello\"\>", 
   ",", "\<\"Hello\"\>", ",", "EndOfFile"}], "}"}]], "Output",
 CellLabel->"Out[77]=",ExpressionUUID->"22a42c33-8903-4135-b609-ff077f8f569c"]
}, Open  ]],

Cell[TextData[{
 StyleBox["Plus",
  FontWeight->"Bold"],
 ", ",
 StyleBox["Times",
  FontWeight->"Bold"],
 ", ",
 StyleBox["Power",
  FontWeight->"Bold"],
 ", ",
 StyleBox["Divide",
  FontWeight->"Bold"],
 ", and ",
 StyleBox["Subtract ",
  FontWeight->"Bold"],
 "thread over lazyLists, though these functionalities are far less efficient \
than for ordinary lists and should probably be avoided if the same can be \
achieved with FoldList or Map"
}], "Text",ExpressionUUID->"d3f5e510-6511-42f7-bf7f-18d13a7c0060"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"First", " ", "@", " ", 
  RowBox[{"Take", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"lazyRange", "[", "]"}], "+", 
     RowBox[{"lazyRange", "[", "2", "]"}]}], ",", "5"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"First", " ", "@", " ", 
  RowBox[{"Take", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"2", "*", " ", 
      RowBox[{"lazyRange", "[", "]"}]}], "+", 
     RowBox[{"3", " ", 
      RowBox[{"lazyRange", "[", 
       RowBox[{"1", ",", "2"}], "]"}]}]}], ",", "5"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"First", " ", "@", " ", 
  RowBox[{"Take", "[", 
   RowBox[{
    RowBox[{
     RowBox[{"lazyRange", "[", "]"}], "^", 
     RowBox[{"lazyRange", "[", "]"}]}], ",", "5"}], 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"First", " ", "@", " ", 
  RowBox[{"Take", "[", 
   RowBox[{
    RowBox[{"Divide", "[", 
     RowBox[{"1", ",", 
      RowBox[{"lazyRange", "[", 
       RowBox[{"2", ",", "2"}], "]"}]}], "]"}], ",", "5"}], "]"}]}]}], "Input",
 CellLabel->"In[78]:=",ExpressionUUID->"431c46dd-1989-4038-a8a6-287ac92d6e53"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"3", ",", "5", ",", "7", ",", "9", ",", "11"}], "}"}]], "Output",
 CellLabel->"Out[78]=",ExpressionUUID->"6bfa0652-6f70-4542-ac59-a6cc02a16a29"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"5", ",", "13", ",", "21", ",", "29", ",", "37"}], "}"}]], "Output",
 CellLabel->"Out[79]=",ExpressionUUID->"a9d4b884-a385-4885-afa1-eab25e2dd64f"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "4", ",", "27", ",", "256", ",", "3125"}], 
  "}"}]], "Output",
 CellLabel->"Out[80]=",ExpressionUUID->"4ec82923-c265-412e-8e33-de4abda3ace5"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   FractionBox["1", "2"], ",", 
   FractionBox["1", "4"], ",", 
   FractionBox["1", "6"], ",", 
   FractionBox["1", "8"], ",", 
   FractionBox["1", "10"]}], "}"}]], "Output",
 CellLabel->"Out[81]=",ExpressionUUID->"c595afc5-b727-4f69-b733-7176ff5eb5c6"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["lazyList operators", \
"Subsection",ExpressionUUID->"314c8f5e-1a86-4e86-9bd1-68842761416f"],

Cell[TextData[{
 StyleBox["Map",
  FontWeight->"Bold"],
 ", ",
 StyleBox["MapIndexed",
  FontWeight->"Bold"],
 ", ",
 StyleBox["FoldList",
  FontWeight->"Bold"],
 ", ",
 StyleBox["Cases",
  FontWeight->"Bold"],
 ",",
 StyleBox[" Pick",
  FontWeight->"Bold"],
 ",",
 StyleBox[" ",
  FontWeight->"Bold"],
 "and ",
 StyleBox["Select",
  FontWeight->"Bold"],
 " work with lazyLists and return lazyLists. There is also ",
 StyleBox["lazyMapThread",
  FontWeight->"Bold"],
 ", which functions similar to MapThread. All of these functions can be \
combined together to generate more complex lazyLists."
}], "Text",ExpressionUUID->"2db4b7f0-d54f-42c4-8598-19597a08299a"],

Cell[CellGroupData[{

Cell["Map", \
"Subsubsection",ExpressionUUID->"25ea5f2b-c1e7-4656-9115-8c0a9c24f192"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Map", "[", 
  RowBox[{"Sqrt", ",", 
   RowBox[{"lazyRange", "[", 
    RowBox[{"0", ",", "2"}], "]"}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"First", "@", 
  RowBox[{"Take", "[", 
   RowBox[{"%", ",", "5"}], "]"}]}]}], "Input",
 CellLabel->"In[82]:=",ExpressionUUID->"db26052a-0c7d-4de0-99a3-0b0a708b07d2"],

Cell[BoxData[
 RowBox[{"lazyList", "[", 
  RowBox[{"0", ",", 
   RowBox[{"Sqrt", "/@", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"lazyList", "[", 
        RowBox[{"#1", ",", 
         RowBox[{"#0", "[", 
          RowBox[{
           RowBox[{"#2", "+", "#1"}], ",", "#2"}], "]"}]}], "]"}], "&"}], 
      ")"}], "[", 
     RowBox[{
      RowBox[{"2", "+", "0"}], ",", "2"}], "]"}]}]}], "]"}]], "Output",
 CellLabel->"Out[82]=",ExpressionUUID->"67d0871f-9989-4111-a568-2020788f06e2"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0", ",", 
   SqrtBox["2"], ",", "2", ",", 
   SqrtBox["6"], ",", 
   RowBox[{"2", " ", 
    SqrtBox["2"]}]}], "}"}]], "Output",
 CellLabel->"Out[83]=",ExpressionUUID->"e746bcf4-d9c8-4519-9814-05e139a76ab4"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Fold", \
"Subsubsection",ExpressionUUID->"b293c8ba-17ea-40d2-9a5b-0d024f5a61e0"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"FoldList", "[", 
  RowBox[{"Plus", ",", "x0", ",", 
   RowBox[{"lazyRange", "[", 
    RowBox[{"n", ",", "m"}], "]"}]}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"First", "@", 
  RowBox[{"Take", "[", 
   RowBox[{"%", ",", "5"}], "]"}]}]}], "Input",
 CellLabel->"In[84]:=",ExpressionUUID->"88d3c946-e148-4f02-8892-b1be9959da90"],

Cell[BoxData[
 RowBox[{"lazyList", "[", 
  RowBox[{"x0", ",", 
   RowBox[{"FoldList", "[", 
    RowBox[{"Plus", ",", 
     RowBox[{"x0", "+", "n"}], ",", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"lazyList", "[", 
         RowBox[{"#1", ",", 
          RowBox[{"#0", "[", 
           RowBox[{
            RowBox[{"#2", "+", "#1"}], ",", "#2"}], "]"}]}], "]"}], "&"}], 
       ")"}], "[", 
      RowBox[{
       RowBox[{"m", "+", "n"}], ",", "m"}], "]"}]}], "]"}]}], "]"}]], "Output",
 CellLabel->"Out[84]=",ExpressionUUID->"5ca36bab-1842-4bb8-a03f-e982ec216419"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"x0", ",", 
   RowBox[{"n", "+", "x0"}], ",", 
   RowBox[{"m", "+", 
    RowBox[{"2", " ", "n"}], "+", "x0"}], ",", 
   RowBox[{
    RowBox[{"3", " ", "m"}], "+", 
    RowBox[{"3", " ", "n"}], "+", "x0"}], ",", 
   RowBox[{
    RowBox[{"6", " ", "m"}], "+", 
    RowBox[{"4", " ", "n"}], "+", "x0"}]}], "}"}]], "Output",
 CellLabel->"Out[85]=",ExpressionUUID->"e87c6151-90ad-4c88-9db9-6a78bf087fa1"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Cases", \
"Subsubsection",ExpressionUUID->"3c7f4e74-23d1-40b0-ba20-1134f3f1a203"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Cases", "[", 
  RowBox[{
   RowBox[{"lazyRange", "[", 
    RowBox[{"0", ",", 
     RowBox[{"2", "/", "3"}]}], "]"}], ",", "_Integer"}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"First", "@", 
  RowBox[{"Take", "[", 
   RowBox[{"%", ",", "5"}], "]"}]}]}], "Input",
 CellLabel->"In[86]:=",ExpressionUUID->"b0b0dea7-1808-4672-a86a-d9ce4333d960"],

Cell[BoxData[
 RowBox[{"lazyList", "[", 
  RowBox[{"0", ",", 
   RowBox[{"lazyLists`Private`case$19322", "[", 
    RowBox[{
     RowBox[{"(", 
      RowBox[{
       RowBox[{"lazyList", "[", 
        RowBox[{"#1", ",", 
         RowBox[{"#0", "[", 
          RowBox[{
           RowBox[{"#2", "+", "#1"}], ",", "#2"}], "]"}]}], "]"}], "&"}], 
      ")"}], "[", 
     RowBox[{
      RowBox[{
       FractionBox["2", "3"], "+", "0"}], ",", 
      FractionBox["2", "3"]}], "]"}], "]"}]}], "]"}]], "Output",
 CellLabel->"Out[86]=",ExpressionUUID->"91dc40d4-b408-445a-a7e6-715df7b2aa23"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0", ",", "2", ",", "4", ",", "6", ",", "8"}], "}"}]], "Output",
 CellLabel->"Out[87]=",ExpressionUUID->"4ae8483d-346d-4288-954c-ec98b508cdb2"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Pick", \
"Subsubsection",ExpressionUUID->"f3a06a45-4dfb-4c77-a330-74be0c8e9361"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Pick", "[", 
  RowBox[{
   RowBox[{"lazyRange", "[", 
    RowBox[{"0", ",", "2"}], "]"}], ",", 
   RowBox[{"lazyRange", "[", 
    RowBox[{"0", ",", 
     RowBox[{"2", "/", "3"}]}], "]"}], ",", "_Integer"}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"First", "@", 
  RowBox[{"Take", "[", 
   RowBox[{"%", ",", "5"}], "]"}]}]}], "Input",
 CellLabel->"In[88]:=",ExpressionUUID->"02767e8a-5bbd-4578-a783-6b1ca449f3b0"],

Cell[BoxData[
 RowBox[{"lazyList", "[", 
  RowBox[{"0", ",", 
   RowBox[{"lazyLists`Private`pick$19323", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"lazyList", "[", 
         RowBox[{"#1", ",", 
          RowBox[{"#0", "[", 
           RowBox[{
            RowBox[{"#2", "+", "#1"}], ",", "#2"}], "]"}]}], "]"}], "&"}], 
       ")"}], "[", 
      RowBox[{
       RowBox[{"2", "+", "0"}], ",", "2"}], "]"}], ",", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"lazyList", "[", 
         RowBox[{"#1", ",", 
          RowBox[{"#0", "[", 
           RowBox[{
            RowBox[{"#2", "+", "#1"}], ",", "#2"}], "]"}]}], "]"}], "&"}], 
       ")"}], "[", 
      RowBox[{
       RowBox[{
        FractionBox["2", "3"], "+", "0"}], ",", 
       FractionBox["2", "3"]}], "]"}]}], "]"}]}], "]"}]], "Output",
 CellLabel->"Out[88]=",ExpressionUUID->"82a2e461-48f1-448b-bd7e-c4bed71897ec"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"0", ",", "6", ",", "12", ",", "18", ",", "24"}], "}"}]], "Output",
 CellLabel->"Out[89]=",ExpressionUUID->"bc0ee765-673a-494a-8458-9d9d948cb8e2"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Select", \
"Subsubsection",ExpressionUUID->"67410976-9bef-4063-994a-da7ffc8607aa"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"Select", "[", 
  RowBox[{
   RowBox[{"lazyRange", "[", "]"}], ",", "OddQ"}], 
  "]"}], "\[IndentingNewLine]", 
 RowBox[{"First", "@", 
  RowBox[{"Take", "[", 
   RowBox[{"%", ",", "5"}], "]"}]}]}], "Input",
 CellLabel->"In[90]:=",ExpressionUUID->"f7cc65d1-b623-4858-860e-fb8bda6906cf"],

Cell[BoxData[
 RowBox[{"lazyList", "[", 
  RowBox[{"1", ",", 
   RowBox[{"Select", "[", 
    RowBox[{
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"lazyList", "[", 
         RowBox[{"#1", ",", 
          RowBox[{"#0", "[", 
           RowBox[{
            RowBox[{"#2", "+", "#1"}], ",", "#2"}], "]"}]}], "]"}], "&"}], 
       ")"}], "[", 
      RowBox[{
       RowBox[{"1", "+", "1"}], ",", "1"}], "]"}], ",", "OddQ"}], "]"}]}], 
  "]"}]], "Output",
 CellLabel->"Out[90]=",ExpressionUUID->"c99920fe-f3b4-410b-a70e-34acdbff4d39"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "3", ",", "5", ",", "7", ",", "9"}], "}"}]], "Output",
 CellLabel->"Out[91]=",ExpressionUUID->"3229ba3b-b06f-42a8-976b-252735ed6012"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["MapIndexed", \
"Subsubsection",ExpressionUUID->"165f8426-7fdc-4dd2-879f-7c449ccd6ae4"],

Cell[TextData[{
 StyleBox["MapIndexed",
  FontWeight->"Bold"],
 " allows you to map a function of 2 arguments over a lazyList. The 2nd \
argument is an integer that keeps track of the position in the list. Note \
that this is slightly different from the way MapIndexed works normally, which \
supplies a list containing the index to the second argument. "
}], "Text",ExpressionUUID->"46c8a02f-7fcf-4bfc-ab29-1b9988a542db"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"First", "@", 
  RowBox[{"Take", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"MapIndexed", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{"#1", ",", "#2"}], "}"}], "&"}], ",", 
      RowBox[{"lazyRange", "[", 
       RowBox[{"2", ",", "2"}], "]"}]}], "]"}], ",", "\[IndentingNewLine]", 
    "5"}], "\[IndentingNewLine]", "]"}]}]], "Input",
 CellLabel->"In[92]:=",ExpressionUUID->"ab76f983-28b6-43cf-9633-09f130a5a988"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"2", ",", "1"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "2"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"6", ",", "3"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"8", ",", "4"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"10", ",", "5"}], "}"}]}], "}"}]], "Output",
 CellLabel->"Out[92]=",ExpressionUUID->"5c71e84a-a39f-4d55-b8af-a7d2af16463d"]
}, Open  ]],

Cell["\<\
MapIndexed has a third argument to specify the starting position. This is \
useful when passing a lazyList which has already been partially evaluated.\
\>", "Text",ExpressionUUID->"a1d52835-fdc6-4c94-8c49-8996fd82e507"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"First", "@", 
  RowBox[{"Take", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"MapIndexed", "[", 
     RowBox[{
      RowBox[{
       RowBox[{"{", 
        RowBox[{"#1", ",", "#2"}], "}"}], "&"}], ",", 
      RowBox[{"lazyRange", "[", "]"}], ",", "20"}], "]"}], ",", 
    "\[IndentingNewLine]", "5"}], "\[IndentingNewLine]", "]"}]}]], "Input",
 CellLabel->"In[93]:=",ExpressionUUID->"fc210aed-ccdd-4241-b891-65b6433f88ed"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{"1", ",", "20"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"2", ",", "21"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"3", ",", "22"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"4", ",", "23"}], "}"}], ",", 
   RowBox[{"{", 
    RowBox[{"5", ",", "24"}], "}"}]}], "}"}]], "Output",
 CellLabel->"Out[93]=",ExpressionUUID->"e3626bce-2309-499d-a0e6-8295c4f15970"]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["lazyMapThread", \
"Subsubsection",ExpressionUUID->"6527aab7-0b41-4f41-8386-669ecaa71c8b"],

Cell[TextData[{
 StyleBox["lazyMapThread",
  FontWeight->"Bold"],
 " is functionally similar to MapThread, except all arguments are fed as a \
List into the first slot of the mapped function:"
}], "Text",ExpressionUUID->"edc0cb50-690c-4cee-b084-17a3472acd11"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"First", "@", 
  RowBox[{"Take", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"lazyMapThread", "[", 
     RowBox[{"f", ",", 
      RowBox[{"{", 
       RowBox[{
        RowBox[{"lazyRange", "[", "]"}], ",", 
        RowBox[{"lazyRange", "[", 
         RowBox[{"2", ",", "2"}], "]"}]}], "}"}]}], "]"}], ",", 
    "\[IndentingNewLine]", "5"}], "\[IndentingNewLine]", "]"}]}]], "Input",
 CellLabel->"In[94]:=",ExpressionUUID->"2f643a7b-e0c1-44f8-bfc1-340a161a0d8a"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"f", "[", 
    RowBox[{"{", 
     RowBox[{"1", ",", "2"}], "}"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"{", 
     RowBox[{"2", ",", "4"}], "}"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"{", 
     RowBox[{"3", ",", "6"}], "}"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"{", 
     RowBox[{"4", ",", "8"}], "}"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"{", 
     RowBox[{"5", ",", "10"}], "}"}], "]"}]}], "}"}]], "Output",
 CellLabel->"Out[94]=",ExpressionUUID->"7cc30dc4-b5b7-48db-87f4-e55d1fa0f302"]
}, Open  ]],

Cell["Compare with regular MapThread:", \
"Text",ExpressionUUID->"c06c056b-c716-4d08-82f9-cdd01019726f"],

Cell[CellGroupData[{

Cell[BoxData[
 RowBox[{"MapThread", "[", 
  RowBox[{"f", ",", 
   RowBox[{"{", 
    RowBox[{
     RowBox[{"Range", "[", "5", "]"}], ",", 
     RowBox[{"2", 
      RowBox[{"Range", "[", "5", "]"}]}]}], "}"}]}], "]"}]], "Input",
 CellLabel->"In[95]:=",ExpressionUUID->"3bbfeee5-cbb7-4e4d-8186-0d37f0b22777"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{
   RowBox[{"f", "[", 
    RowBox[{"1", ",", "2"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"2", ",", "4"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"3", ",", "6"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"4", ",", "8"}], "]"}], ",", 
   RowBox[{"f", "[", 
    RowBox[{"5", ",", "10"}], "]"}]}], "}"}]], "Output",
 CellLabel->"Out[95]=",ExpressionUUID->"2002d6de-3814-422b-b41d-8a658afb162f"]
}, Open  ]]
}, Open  ]]
}, Open  ]],

Cell[CellGroupData[{

Cell["Caveats", \
"Subsection",ExpressionUUID->"913456ae-86bc-474d-90bb-1fe719afec8e"],

Cell["\<\
When defining your own lazyLists, make sure the last part of the list does \
not evaluate to itself. Take etc. will not work correctly on such lists and \
stop iterating prematurely:\
\>", "Text",ExpressionUUID->"232911ec-716c-44a2-a324-124b95f3af23"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"badExample", " ", "=", 
  RowBox[{
   RowBox[{"Function", "[", 
    RowBox[{"lazyList", "[", 
     RowBox[{"1", ",", 
      RowBox[{"#0", "[", "]"}]}], "]"}], "]"}], "[", 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"badExample", "===", 
  RowBox[{"Last", "[", "badExample", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"First", " ", "@", 
  RowBox[{"Take", "[", 
   RowBox[{"badExample", ",", "20"}], "]"}]}]}], "Input",
 CellLabel->"In[96]:=",ExpressionUUID->"16b8e012-7427-4406-b801-d4e7e34f299e"],

Cell[BoxData[
 RowBox[{"lazyList", "[", 
  RowBox[{"1", ",", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"lazyList", "[", 
       RowBox[{"1", ",", 
        RowBox[{"#0", "[", "]"}]}], "]"}], "&"}], ")"}], "[", "]"}]}], 
  "]"}]], "Output",
 CellLabel->"Out[96]=",ExpressionUUID->"995ffa9c-7535-48b0-be31-2dda502de083"],

Cell[BoxData["True"], "Output",
 CellLabel->"Out[97]=",ExpressionUUID->"953ef15b-319c-42e2-91be-f2af81344904"],

Cell[BoxData[
 RowBox[{"{", 
  RowBox[{"1", ",", "1"}], "}"}]], "Output",
 CellLabel->"Out[98]=",ExpressionUUID->"137a9c7e-0bcc-4fdd-bd17-c59245897954"]
}, Open  ]],

Cell["\<\
Instead, you can add an iterator that increases with each evaluation. This \
iterator can also be used to keep track of the position in the lazy list:\
\>", "Text",ExpressionUUID->"24b81520-5eb3-4541-b793-4c68766f4c01"],

Cell[CellGroupData[{

Cell[BoxData[{
 RowBox[{"example", " ", "=", 
  RowBox[{
   RowBox[{"Function", "[", 
    RowBox[{"lazyList", "[", 
     RowBox[{"1", ",", 
      RowBox[{"#0", "[", 
       RowBox[{"#1", "+", "1"}], "]"}]}], "]"}], "]"}], "[", "1", 
   "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"example", "===", 
  RowBox[{"Last", "[", "example", "]"}]}], "\[IndentingNewLine]", 
 RowBox[{"Take", "[", 
  RowBox[{"example", ",", "20"}], "]"}], "\[IndentingNewLine]", 
 RowBox[{"position", "=", 
  RowBox[{"Replace", "[", "\[IndentingNewLine]", 
   RowBox[{
    RowBox[{"Last", "@", "%"}], ",", "\[IndentingNewLine]", 
    RowBox[{"{", "\[IndentingNewLine]", 
     RowBox[{
      RowBox[{"lazyList", "[", 
       RowBox[{"_", ",", 
        RowBox[{
         RowBox[{"Function", "[", "__", "]"}], "[", "i_", "]"}]}], "]"}], 
      "\[RuleDelayed]", "i"}], "\[IndentingNewLine]", "}"}]}], 
   "]"}]}]}], "Input",
 CellLabel->"In[99]:=",ExpressionUUID->"44069107-bcb5-4d00-85bc-c9773bf4979b"],

Cell[BoxData[
 RowBox[{"lazyList", "[", 
  RowBox[{"1", ",", 
   RowBox[{
    RowBox[{"(", 
     RowBox[{
      RowBox[{"lazyList", "[", 
       RowBox[{"1", ",", 
        RowBox[{"#0", "[", 
         RowBox[{"#1", "+", "1"}], "]"}]}], "]"}], "&"}], ")"}], "[", 
    RowBox[{"1", "+", "1"}], "]"}]}], "]"}]], "Output",
 CellLabel->"Out[99]=",ExpressionUUID->"5e820cad-963c-4c76-bfd6-2fec49653c63"],

Cell[BoxData["False"], "Output",
 CellLabel->
  "Out[100]=",ExpressionUUID->"4fb35ade-14cd-4c0f-b9c3-6e934185dc2e"],

Cell[BoxData[
 RowBox[{"lazyList", "[", 
  RowBox[{
   RowBox[{"{", 
    RowBox[{
    "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1",
      ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", ",", "1", 
     ",", "1", ",", "1", ",", "1", ",", "1", ",", "1"}], "}"}], ",", 
   RowBox[{"lazyList", "[", 
    RowBox[{"1", ",", 
     RowBox[{
      RowBox[{"(", 
       RowBox[{
        RowBox[{"lazyList", "[", 
         RowBox[{"1", ",", 
          RowBox[{"#0", "[", 
           RowBox[{"#1", "+", "1"}], "]"}]}], "]"}], "&"}], ")"}], "[", 
      RowBox[{"20", "+", "1"}], "]"}]}], "]"}]}], "]"}]], "Output",
 CellLabel->
  "Out[101]=",ExpressionUUID->"5bc1d8ad-df58-4aad-958f-fa6a9aebacca"],

Cell[BoxData["21"], "Output",
 CellLabel->"Out[102]=",ExpressionUUID->"1fbc069f-fb11-4956-a8d7-48f22bc72c3c"]
}, Open  ]]
}, Open  ]]
}, Open  ]]
},
WindowSize->{983, 839},
WindowMargins->{{Automatic, 377}, {Automatic, 40}},
PrivateNotebookOptions->{"FileOutlineCache"->False},
ShowGroupOpener->True,
TrackCellChangeTimes->False,
Magnification:>1.3 Inherited,
FrontEndVersion->"11.3 for Microsoft Windows (64-bit) (March 6, 2018)",
StyleDefinitions->"Default.nb"
]

